{
  "version": 3,
  "sources": ["../../../src/application/usecases/UpdateUserUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=91574f12-45c0-49ba-a6c9-c46429d38e9f", "../../../src/infra/database/session.ts", "../../../src/infra/database/repositories/UpdateUserRepository.ts", "../../../src/application/usecases/UpdateUserUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/UpdateUserUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/UpdateUserUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"fd5eaf77-c413-4c10-9950-a0604990cf52\",e._sentryDebugIdIdentifier=\"sentry-dbid-fd5eaf77-c413-4c10-9950-a0604990cf52\")}catch(e){}}();", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import {User} from '../../../domain/entities/User';\nimport {\n  IUpdateUserRepository,\n  UpdateUserRepositoryInput,\n  UpdateUserRepositoryOutput,\n} from '../../../domain/repositories/IUpdateUserRepository';\nimport {databaseInstance} from '../session';\n\nexport class UpdateUserRepository implements IUpdateUserRepository {\n  public async execute(\n    input: UpdateUserRepositoryInput,\n  ): Promise<UpdateUserRepositoryOutput> {\n    let response: User | any;\n    const databaseSession = databaseInstance.getSession();\n    const user_found = databaseSession.find((user) => user.user_id === input.user_id\n        || input.user_id === user.email) as User || null;\n    if (!user_found){\n      return user_found;\n    }\n    const database_session_updated = databaseSession.map(user => {\n      if (user.user_id === input.user_id) {\n        if (user.user_id === input.user_id) {\n          response = {\n            user_id: input.user_id,\n            ...input.to_update,\n            email: user.email,\n            created_at: user.created_at\n          }\n          return response\n        }\n      }\n      return user;\n    });\n    databaseInstance.updateSession(database_session_updated);\n    return response;\n  }\n}\n", "import { Logger } from '../../infra/logger/Logger';\nimport { Language, User, UserRole } from '../../domain/entities/User';\nimport { IUpdateUserRepository } from '../../domain/repositories/IUpdateUserRepository';\nimport { UpdateUserRepository } from '../../infra/database/repositories/UpdateUserRepository';\n\nexport type UpdateUserUseCaseInput = {\n  user_id: string;\n  to_update: {\n    name?: string;\n    bio?: string;\n    role?: UserRole;\n    languages?: Language[];\n  };\n};\n\nexport type UpdateUserUseCaseOutput = User | null;\n\nexport interface IUpdateUserUseCase {\n  execute(input: UpdateUserUseCaseInput): Promise<UpdateUserUseCaseOutput>;\n}\n\nexport class UpdateUserUseCase implements IUpdateUserUseCase {\n  constructor(\n    private readonly logger: Logger,\n    private updateUserRepository: IUpdateUserRepository = new UpdateUserRepository(),\n  ) {\n    this.logger = this.logger.getChild('UpdateUserUseCase');\n  }\n\n  async execute(\n    input: UpdateUserUseCaseInput,\n  ): Promise<UpdateUserUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    const response = this.updateUserRepository.execute(input);\n    this.logger.debug('update user repository response', response);\n    this.logger.debug('execute output', response);\n    return response;\n  }\n}\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,uBAAAE,EAAA,YAAAC,IAAA,eAAAC,EAAAJ,ICAE,UAAU,CAAC,GAAG,CAAC,IAAIK,EAAe,OAAO,OAApB,IAA2B,OAAoB,OAAO,OAApB,IAA2B,OAAoB,OAAO,KAApB,IAAyB,KAAK,CAAC,EAAEC,EAAG,IAAI,QAAO,MAAMA,IAAID,EAAE,gBAAgBA,EAAE,iBAAiB,CAAC,EAAEA,EAAE,gBAAgBC,CAAC,EAAE,uCAAuCD,EAAE,yBAAyB,mDAAmD,MAAS,CAAC,CAAC,GAAE,ECE5U,IAAME,EAAN,KAAuB,CAG5B,YAA6BC,EAAqB,CAArB,iBAAAA,EAC3B,KAAK,cAAgBA,CACvB,CAJQ,cAMD,OAAiB,CACtB,YAAK,cAAgB,CAAC,EACf,CAAC,CAAC,KAAK,aAChB,CAEO,YAAqB,CAC1B,GAAI,KAAK,cACP,OAAO,KAAK,cAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,CAEO,cAAcC,EAAuB,CAC1C,YAAK,cAAgBA,EACd,KAAK,aACd,CACF,EAEaC,EAAmB,IAAIH,EAAgB,CAAC,CAAC,ECnB/C,IAAMI,EAAN,KAA4D,CACjE,MAAa,QACXC,EACqC,CACrC,IAAIC,EACEC,EAAkBC,EAAiB,WAAW,EAC9CC,EAAaF,EAAgB,KAAMG,GAASA,EAAK,UAAYL,EAAM,SAClEA,EAAM,UAAYK,EAAK,KAAK,GAAa,KAChD,GAAI,CAACD,EACH,OAAOA,EAET,IAAME,EAA2BJ,EAAgB,IAAIG,GAC/CA,EAAK,UAAYL,EAAM,SACrBK,EAAK,UAAYL,EAAM,SACzBC,EAAW,CACT,QAASD,EAAM,QACf,GAAGA,EAAM,UACT,MAAOK,EAAK,MACZ,WAAYA,EAAK,UACnB,EACOJ,GAGJI,CACR,EACD,OAAAF,EAAiB,cAAcG,CAAwB,EAChDL,CACT,CACF,ECfO,IAAMM,EAAN,KAAsD,CAC3D,YACmBC,EACTC,EAA8C,IAAIC,EAC1D,CAFiB,YAAAF,EACT,0BAAAC,EAER,KAAK,OAAS,KAAK,OAAO,SAAS,mBAAmB,CACxD,CAEA,MAAM,QACJE,EACkC,CAClC,KAAK,OAAO,MAAM,gBAAiB,KAAK,UAAUA,CAAK,CAAC,EACxD,IAAMC,EAAW,KAAK,qBAAqB,QAAQD,CAAK,EACxD,YAAK,OAAO,MAAM,kCAAmCC,CAAQ,EAC7D,KAAK,OAAO,MAAM,iBAAkBA,CAAQ,EACrCA,CACT,CACF,EJnCc,IAAOC,EAAuB",
  "names": ["UpdateUserUseCase_exports", "__export", "UpdateUserUseCase", "UpdateUserUseCase_default", "__toCommonJS", "e", "n", "DatabaseSession", "entityModel", "input", "databaseInstance", "UpdateUserRepository", "input", "response", "databaseSession", "databaseInstance", "user_found", "user", "database_session_updated", "UpdateUserUseCase", "logger", "updateUserRepository", "UpdateUserRepository", "input", "response", "UpdateUserUseCase_default"]
}
