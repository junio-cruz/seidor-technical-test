{
  "version": 3,
  "sources": ["../../../src/application/usecases/ApproveUserUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=15a2313b-8752-4893-9751-4efc57454e74", "../../../src/infra/database/session.ts", "../../../src/infra/database/repositories/GetUserRepository.ts", "../../../src/infra/database/repositories/UpdateUserRepository.ts", "../../../src/application/usecases/ApproveUserUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/ApproveUserUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/ApproveUserUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"fb732a9c-60f5-4ed3-b8a4-05ad00af4a90\",e._sentryDebugIdIdentifier=\"sentry-dbid-fb732a9c-60f5-4ed3-b8a4-05ad00af4a90\")}catch(e){}}();", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import {\n  GetUserRepositoryInput,\n  GetUserRepositoryOutput,\n  IGetUserRepository,\n} from '../../../domain/repositories/IGetUserRepository';\nimport { databaseInstance } from '../session';\nimport { User } from '../../../domain/entities/User';\n\nexport class GetUserRepository implements IGetUserRepository {\n  public async execute(\n      input: GetUserRepositoryInput,\n  ): Promise<GetUserRepositoryOutput> {\n    const databaseSession = databaseInstance.getSession();\n    return databaseSession.find((user: User) =>\n        (user.user_id === input.user_id || user.auth_token === input.user_id || user.email === input.user_id)) || null\n  }\n}\n", "import {User} from '../../../domain/entities/User';\nimport {\n  IUpdateUserRepository,\n  UpdateUserRepositoryInput,\n  UpdateUserRepositoryOutput,\n} from '../../../domain/repositories/IUpdateUserRepository';\nimport {databaseInstance} from '../session';\n\nexport class UpdateUserRepository implements IUpdateUserRepository {\n  public async execute(\n    input: UpdateUserRepositoryInput,\n  ): Promise<UpdateUserRepositoryOutput> {\n    let response: User | any;\n    const databaseSession = databaseInstance.getSession();\n    const user_found = databaseSession.find((user) => user.user_id === input.user_id\n        || input.user_id === user.email) as User || null;\n    if (!user_found){\n      return user_found;\n    }\n    const database_session_updated = databaseSession.map(user => {\n      if (user.user_id === input.user_id) {\n        if (user.user_id === input.user_id) {\n          response = {\n            user_id: input.user_id,\n            ...input.to_update,\n            email: user.email,\n            created_at: user.created_at\n          }\n          return response\n        }\n      }\n      return user;\n    });\n    databaseInstance.updateSession(database_session_updated);\n    return response;\n  }\n}\n", "import { User } from '../../domain/entities/User';\nimport { Logger } from '../../infra/logger/Logger';\nimport { IAppConfig } from '../protocols/config/IAppConfig';\nimport { IGetUserRepository } from '../../domain/repositories/IGetUserRepository';\nimport { GetUserRepository } from '../../infra/database/repositories/GetUserRepository';\nimport { IUpdateUserRepository } from '../../domain/repositories/IUpdateUserRepository';\nimport { UpdateUserRepository } from '../../infra/database/repositories/UpdateUserRepository';\n\nexport type ApproveUserUseCaseInput = {\n  user_id: string;\n  admin_id: string;\n};\n\nexport type ApproveUserUseCaseOutput = User | null;\n\nexport interface IApproveUserUseCase {\n  execute(\n    input: ApproveUserUseCaseInput,\n  ): Promise<ApproveUserUseCaseOutput>;\n}\n\nexport class ApproveUserUseCase\n  implements IApproveUserUseCase\n{\n  constructor(\n    private readonly logger: Logger,\n    private appConfig: IAppConfig,\n    private getUserRepository: IGetUserRepository = new GetUserRepository(),\n    private updateUserRepository: IUpdateUserRepository = new UpdateUserRepository(),\n  ) {\n    this.logger = this.logger.getChild('ApproveUserUseCase');\n  }\n\n  public async execute(\n    input: ApproveUserUseCaseInput,\n  ): Promise<ApproveUserUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    const admin_user = await this.getUserRepository.execute({\n      user_id: input.admin_id,\n    });\n\n    if (!admin_user) {\n      throw new Error('ADMIN_USER_NOT_FOUND');\n    }\n\n    if (admin_user.role !== 'Admin') {\n      throw new Error('ADMIN_USER_NOT_AUTHORIZED');\n    }\n\n    const user_approved = this.updateUserRepository.execute({\n      user_id: input.user_id,\n      to_update: {\n        approved_at: new Date(),\n      },\n    });\n    this.logger.debug('update user repository response', user_approved);\n\n    if (!user_approved) {\n      return user_approved;\n    }\n\n    this.logger.debug('execute output', user_approved);\n    return user_approved;\n  }\n}\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,wBAAAE,EAAA,YAAAC,IAAA,eAAAC,EAAAJ,ICAE,UAAU,CAAC,GAAG,CAAC,IAAIK,EAAe,OAAO,OAApB,IAA2B,OAAoB,OAAO,OAApB,IAA2B,OAAoB,OAAO,KAApB,IAAyB,KAAK,CAAC,EAAEC,EAAG,IAAI,QAAO,MAAMA,IAAID,EAAE,gBAAgBA,EAAE,iBAAiB,CAAC,EAAEA,EAAE,gBAAgBC,CAAC,EAAE,uCAAuCD,EAAE,yBAAyB,mDAAmD,MAAS,CAAC,CAAC,GAAE,ECE5U,IAAME,EAAN,KAAuB,CAG5B,YAA6BC,EAAqB,CAArB,iBAAAA,EAC3B,KAAK,cAAgBA,CACvB,CAJQ,cAMD,OAAiB,CACtB,YAAK,cAAgB,CAAC,EACf,CAAC,CAAC,KAAK,aAChB,CAEO,YAAqB,CAC1B,GAAI,KAAK,cACP,OAAO,KAAK,cAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,CAEO,cAAcC,EAAuB,CAC1C,YAAK,cAAgBA,EACd,KAAK,aACd,CACF,EAEaC,EAAmB,IAAIH,EAAgB,CAAC,CAAC,ECnB/C,IAAMI,EAAN,KAAsD,CAC3D,MAAa,QACTC,EACgC,CAElC,OADwBC,EAAiB,WAAW,EAC7B,KAAMC,GACxBA,EAAK,UAAYF,EAAM,SAAWE,EAAK,aAAeF,EAAM,SAAWE,EAAK,QAAUF,EAAM,OAAQ,GAAK,IAChH,CACF,ECRO,IAAMG,EAAN,KAA4D,CACjE,MAAa,QACXC,EACqC,CACrC,IAAIC,EACEC,EAAkBC,EAAiB,WAAW,EAC9CC,EAAaF,EAAgB,KAAMG,GAASA,EAAK,UAAYL,EAAM,SAClEA,EAAM,UAAYK,EAAK,KAAK,GAAa,KAChD,GAAI,CAACD,EACH,OAAOA,EAET,IAAME,EAA2BJ,EAAgB,IAAIG,GAC/CA,EAAK,UAAYL,EAAM,SACrBK,EAAK,UAAYL,EAAM,SACzBC,EAAW,CACT,QAASD,EAAM,QACf,GAAGA,EAAM,UACT,MAAOK,EAAK,MACZ,WAAYA,EAAK,UACnB,EACOJ,GAGJI,CACR,EACD,OAAAF,EAAiB,cAAcG,CAAwB,EAChDL,CACT,CACF,ECfO,IAAMM,EAAN,KAEP,CACE,YACmBC,EACTC,EACAC,EAAwC,IAAIC,EAC5CC,EAA8C,IAAIC,EAC1D,CAJiB,YAAAL,EACT,eAAAC,EACA,uBAAAC,EACA,0BAAAE,EAER,KAAK,OAAS,KAAK,OAAO,SAAS,oBAAoB,CACzD,CAEA,MAAa,QACXE,EACmC,CACnC,KAAK,OAAO,MAAM,gBAAiB,KAAK,UAAUA,CAAK,CAAC,EACxD,IAAMC,EAAa,MAAM,KAAK,kBAAkB,QAAQ,CACtD,QAASD,EAAM,QACjB,CAAC,EAED,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,sBAAsB,EAGxC,GAAIA,EAAW,OAAS,QACtB,MAAM,IAAI,MAAM,2BAA2B,EAG7C,IAAMC,EAAgB,KAAK,qBAAqB,QAAQ,CACtD,QAASF,EAAM,QACf,UAAW,CACT,YAAa,IAAI,IACnB,CACF,CAAC,EAGD,OAFA,KAAK,OAAO,MAAM,kCAAmCE,CAAa,EAE7DA,IAIL,KAAK,OAAO,MAAM,iBAAkBA,CAAa,EAC1CA,EACT,CACF,EL7Dc,IAAOC,EAAuB",
  "names": ["ApproveUserUseCase_exports", "__export", "ApproveUserUseCase", "ApproveUserUseCase_default", "__toCommonJS", "e", "n", "DatabaseSession", "entityModel", "input", "databaseInstance", "GetUserRepository", "input", "databaseInstance", "user", "UpdateUserRepository", "input", "response", "databaseSession", "databaseInstance", "user_found", "user", "database_session_updated", "ApproveUserUseCase", "logger", "appConfig", "getUserRepository", "GetUserRepository", "updateUserRepository", "UpdateUserRepository", "input", "admin_user", "user_approved", "ApproveUserUseCase_default"]
}
