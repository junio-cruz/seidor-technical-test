{
  "version": 3,
  "sources": ["../../../src/application/usecases/ListUsersUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=fed08c27-d1d2-472e-b429-d56d6a833d98", "../../../src/infra/database/session.ts", "../../../src/infra/database/repositories/ListUsersRepository.ts", "../../../src/application/usecases/ListUsersUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/ListUsersUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/ListUsersUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"93845011-56fc-414d-bacf-4c75937564b9\",e._sentryDebugIdIdentifier=\"sentry-dbid-93845011-56fc-414d-bacf-4c75937564b9\")}catch(e){}}();", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import { databaseInstance } from '../session';\nimport { UserRole } from '../../../domain/entities/User';\nimport {\n  IListUsersRepository,\n  ListUsersRepositoryInput,\n  ListUsersRepositoryOutput,\n} from '../../../domain/repositories/IListUsersRepository';\n\nexport class ListUsersRepository implements IListUsersRepository {\n  public async execute(\n    input: ListUsersRepositoryInput,\n  ): Promise<ListUsersRepositoryOutput> {\n    const queryFilters = {} as {\n      name?: string;\n      email_verified?: boolean;\n      phone_number_verified?: boolean;\n      role?: UserRole;\n      created_at?: Date;\n      approved_at?: Date | null;\n      deleted_at?: Date | null;\n      updated_at?: Date;\n    };\n\n    if (input?.filter?.name) {\n      queryFilters.name = input.filter.name;\n    }\n\n    if (input?.filter?.email_verified) {\n      queryFilters.email_verified = input.filter.email_verified;\n    }\n\n    if (input?.filter?.role) {\n      queryFilters.role = input.filter.role;\n    }\n\n    //FILTRO DE DATAS\n\n    // if (input?.filter?.approved_at) {\n    //   if (!queryFilters.$and) queryFilters.$and = [];\n    //   queryFilters.$and.push({\n    //     approved_at: { $gte: input.filter.approved_at },\n    //   });\n    // }\n    //\n    // if (input.filter?.approved_at === null) {\n    //   if (!queryFilters.$and) queryFilters.$and = [];\n    //   queryFilters.$and.push({\n    //     approved_at: { $eq: null },\n    //   });\n    // }\n\n    // if (input?.filter?.deleted_at) {\n    //   if (!queryFilters.$and) queryFilters.$and = [];\n    //   queryFilters.$and.push({\n    //     deleted_at: { $gte: input.filter.deleted_at },\n    //   });\n    // }\n    //\n    // if (input?.filter?.created_at) {\n    //   if (!queryFilters.$and) queryFilters.$and = [];\n    //   queryFilters.$and.push({\n    //     created_at: { $gte: input.filter.created_at },\n    //   });\n    // }\n    //\n    // if (input.filter?.deleted_at === null) {\n    //   if (!queryFilters) queryFilters.$and = [];\n    //   queryFilters.$and.push({\n    //     deleted_at: { $eq: null },\n    //   });\n    // }\n\n    const users = databaseInstance.getSession();\n    const page = input.pagination?.page || 1;\n    const pageSize = input.pagination?.page_size || 10;\n\n    const [response, count] = [\n      users.filter(() => queryFilters)\n        .sort()\n        .slice(pageSize * page - pageSize),\n      users.length\n    ];\n\n    return {\n      page,\n      page_data: response,\n      page_count: response.length,\n      all_count: response.length,\n      all_pages_count: Math.ceil(count / pageSize),\n    };\n  }\n}\n", "import { Logger } from '../../infra/logger/Logger';\nimport { User, UserRole } from '../../domain/entities/User';\nimport { IListUsersRepository } from '../../domain/repositories/IListUsersRepository';\nimport { ListUsersRepository } from '../../infra/database/repositories/ListUsersRepository';\n\nexport type ListUsersUseCaseInput = {\n  filter?: {\n    name?: string;\n    role?: UserRole;\n    email_verified?: boolean;\n    approved_at?: Date | null;\n  };\n  order?: {\n    [field: string]: 'asc' | 'desc';\n  };\n  pagination?: {\n    page?: number;\n    page_size?: number;\n  };\n};\n\nexport type ListUsersUseCaseOutput = {\n  page: number;\n  page_data: User[];\n  page_count: number;\n  all_count: number;\n  all_pages_count: number;\n};\nexport interface IListUsersUseCase {\n  execute(input: ListUsersUseCaseInput): Promise<ListUsersUseCaseOutput>;\n}\n\nexport class ListUsersUseCase implements IListUsersUseCase {\n  constructor(\n    private readonly logger: Logger,\n    private listUsersRepository: IListUsersRepository = new ListUsersRepository(),\n  ) {\n    this.logger = this.logger.getChild('ListUsersUseCase');\n  }\n\n  public async execute(\n    input: ListUsersUseCaseInput,\n  ): Promise<ListUsersUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    const response = await this.listUsersRepository.execute(input);\n    this.logger.debug('execute output', response);\n    return response;\n  }\n}\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,sBAAAE,EAAA,YAAAC,IAAA,eAAAC,EAAAJ,ICAE,UAAU,CAAC,GAAG,CAAC,IAAIK,EAAe,OAAO,OAApB,IAA2B,OAAoB,OAAO,OAApB,IAA2B,OAAoB,OAAO,KAApB,IAAyB,KAAK,CAAC,EAAEC,EAAG,IAAI,QAAO,MAAMA,IAAID,EAAE,gBAAgBA,EAAE,iBAAiB,CAAC,EAAEA,EAAE,gBAAgBC,CAAC,EAAE,uCAAuCD,EAAE,yBAAyB,mDAAmD,MAAS,CAAC,CAAC,GAAE,ECE5U,IAAME,EAAN,KAAuB,CAG5B,YAA6BC,EAAqB,CAArB,iBAAAA,EAC3B,KAAK,cAAgBA,CACvB,CAJQ,cAMD,OAAiB,CACtB,YAAK,cAAgB,CAAC,EACf,CAAC,CAAC,KAAK,aAChB,CAEO,YAAqB,CAC1B,GAAI,KAAK,cACP,OAAO,KAAK,cAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,CAEO,cAAcC,EAAuB,CAC1C,YAAK,cAAgBA,EACd,KAAK,aACd,CACF,EAEaC,EAAmB,IAAIH,EAAgB,CAAC,CAAC,ECnB/C,IAAMI,EAAN,KAA0D,CAC/D,MAAa,QACXC,EACoC,CACpC,IAAMC,EAAe,CAAC,EAWlBD,GAAO,QAAQ,OACjBC,EAAa,KAAOD,EAAM,OAAO,MAG/BA,GAAO,QAAQ,iBACjBC,EAAa,eAAiBD,EAAM,OAAO,gBAGzCA,GAAO,QAAQ,OACjBC,EAAa,KAAOD,EAAM,OAAO,MAwCnC,IAAME,EAAQC,EAAiB,WAAW,EACpCC,EAAOJ,EAAM,YAAY,MAAQ,EACjCK,EAAWL,EAAM,YAAY,WAAa,GAE1C,CAACM,EAAUC,CAAK,EAAI,CACxBL,EAAM,OAAO,IAAMD,CAAY,EAC5B,KAAK,EACL,MAAMI,EAAWD,EAAOC,CAAQ,EACnCH,EAAM,MACR,EAEA,MAAO,CACL,KAAAE,EACA,UAAWE,EACX,WAAYA,EAAS,OACrB,UAAWA,EAAS,OACpB,gBAAiB,KAAK,KAAKC,EAAQF,CAAQ,CAC7C,CACF,CACF,EC3DO,IAAMG,EAAN,KAAoD,CACzD,YACmBC,EACTC,EAA4C,IAAIC,EACxD,CAFiB,YAAAF,EACT,yBAAAC,EAER,KAAK,OAAS,KAAK,OAAO,SAAS,kBAAkB,CACvD,CAEA,MAAa,QACXE,EACiC,CACjC,KAAK,OAAO,MAAM,gBAAiB,KAAK,UAAUA,CAAK,CAAC,EACxD,IAAMC,EAAW,MAAM,KAAK,oBAAoB,QAAQD,CAAK,EAC7D,YAAK,OAAO,MAAM,iBAAkBC,CAAQ,EACrCA,CACT,CACF,EJ7Cc,IAAOC,EAAuB",
  "names": ["ListUsersUseCase_exports", "__export", "ListUsersUseCase", "ListUsersUseCase_default", "__toCommonJS", "e", "n", "DatabaseSession", "entityModel", "input", "databaseInstance", "ListUsersRepository", "input", "queryFilters", "users", "databaseInstance", "page", "pageSize", "response", "count", "ListUsersUseCase", "logger", "listUsersRepository", "ListUsersRepository", "input", "response", "ListUsersUseCase_default"]
}
