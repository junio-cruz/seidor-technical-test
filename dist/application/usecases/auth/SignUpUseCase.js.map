{
  "version": 3,
  "sources": ["../../../../src/application/usecases/auth/SignUpUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=7b9eca5c-78d6-4cd7-9825-9a0eb4ea0535", "../../../../src/infra/isp/ISP.ts", "../../../../node_modules/uuid/dist/esm-node/rng.js", "../../../../node_modules/uuid/dist/esm-node/stringify.js", "../../../../node_modules/uuid/dist/esm-node/native.js", "../../../../node_modules/uuid/dist/esm-node/v4.js", "../../../../src/infra/guidGenerator/UUIDGuidGenerator.ts", "../../../../src/infra/database/session.ts", "../../../../src/infra/database/repositories/GetUserRepository.ts", "../../../../src/infra/database/repositories/CreateUserRepository.ts", "../../../../src/application/usecases/auth/SignUpUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/auth/SignUpUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/auth/SignUpUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"da228817-26dd-470d-881f-cf0ce6f5b3b5\",e._sentryDebugIdIdentifier=\"sentry-dbid-da228817-26dd-470d-881f-cf0ce6f5b3b5\")}catch(e){}}();", "import {\n  CreateUserInput,\n  CreateUserOutput,\n  DeleteUserInput,\n  DeleteUserOutput,\n  GetUserInput,\n  GetUserOutput,\n  IISP,\n  InitiateAuthInput,\n  InitiateAuthOutput,\n  RevalidateAuthInput,\n  RevalidateAuthOutput,\n  SetEmailVerifiedInput,\n  SetEmailVerifiedOutput,\n  SetPhoneNumberInput,\n  SetPhoneNumberOutput,\n  SetUserPasswordInput,\n  SetUserPasswordOutput,\n} from '../../application/protocols/isp/IISP';\n\nexport class ISP implements IISP {\n  public async createUser(input: CreateUserInput): Promise<CreateUserOutput> {\n    console.log(input);\n    return {\n      userName: input.user_id,\n      userEmail: input.email,\n    };\n  }\n\n  public async getUser(input: GetUserInput): Promise<GetUserOutput> {\n    console.log(input);\n    return {\n      userName: 'User Name',\n      userEmail: 'user@fanzo.com',\n    };\n  }\n\n  public async deleteUser(input: DeleteUserInput): Promise<DeleteUserOutput> {\n    console.log(input);\n  }\n\n  public async setPhoneNumber(\n      input: SetPhoneNumberInput,\n  ): Promise<SetPhoneNumberOutput> {\n    console.log(input);\n  }\n\n  public async setUserPassword(\n      input: SetUserPasswordInput,\n  ): Promise<SetUserPasswordOutput> {\n    console.log(input);\n  }\n\n  public async setEmailVerified(\n      input: SetEmailVerifiedInput,\n  ): Promise<SetEmailVerifiedOutput> {\n    console.log(input);\n  }\n\n  public async initiateAuth(\n      input: InitiateAuthInput,\n  ): Promise<InitiateAuthOutput> {\n    console.log(input);\n    return {\n      access_token: 'access_token',\n      refresh_token: 'refresh_token',\n      expires_in: 30,\n    };\n  }\n\n  public async revalidateAuth(\n      input: RevalidateAuthInput,\n  ): Promise<RevalidateAuthOutput> {\n    console.log(input);\n    return {\n      access_token: 'access_token',\n      expires_in: 30,\n    };\n  }\n}\n", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import { v4 as uuid } from 'uuid';\nimport { IGuidGenerator } from '../../application/protocols/guid/IGuidGenerator';\n\nexport class UUIDGuidGenerator implements IGuidGenerator {\n  public uuidV4(): string {\n    return uuid();\n  }\n}\n", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import {\n  GetUserRepositoryInput,\n  GetUserRepositoryOutput,\n  IGetUserRepository,\n} from '../../../domain/repositories/IGetUserRepository';\nimport { databaseInstance } from '../session';\nimport { User } from '../../../domain/entities/User';\n\nexport class GetUserRepository implements IGetUserRepository {\n  public async execute(\n      input: GetUserRepositoryInput,\n  ): Promise<GetUserRepositoryOutput> {\n    const databaseSession = databaseInstance.getSession();\n    return databaseSession.find((user: User) =>\n        (user.user_id === input.user_id || user.auth_token === input.user_id || user.email === input.user_id)) || null\n  }\n}\n", "import { databaseInstance } from '../session';\nimport {\n  CreateUserRepositoryInput,\n  CreateUserRepositoryOutput,\n  ICreateUserRepository,\n} from '../../../domain/repositories/ICreateUserRepository';\n\nexport class CreateUserRepository implements ICreateUserRepository {\n  public async execute(\n    input: CreateUserRepositoryInput,\n  ): Promise<CreateUserRepositoryOutput> {\n    const databaseSession = databaseInstance.getSession();\n    databaseSession.push(input);\n    return databaseSession.find((user) => user.user_id === input.user_id) || input;\n  }\n}\n", "import { Language, User, UserRole } from '../../../domain/entities/User';\n\nimport { IISP } from '../../protocols/isp/IISP';\nimport { ILogger } from '../../protocols/logger/ILogger';\nimport { IGuidGenerator } from '../../protocols/guid/IGuidGenerator';\nimport {\n  CreateUserRepositoryInput,\n  ICreateUserRepository,\n} from '../../../domain/repositories/ICreateUserRepository';\nimport { IAppConfig } from '../../protocols/config/IAppConfig';\nimport { ISP } from '../../../infra/isp/ISP';\nimport { UUIDGuidGenerator } from '../../../infra/guidGenerator/UUIDGuidGenerator';\nimport { IGetUserRepository } from '../../../domain/repositories/IGetUserRepository';\nimport { GetUserRepository } from '../../../infra/database/repositories/GetUserRepository';\nimport { CreateUserRepository } from '../../../infra/database/repositories/CreateUserRepository';\n\nexport type SignUpUseCaseInput = {\n  name: string;\n  email: string;\n  password: string;\n  role: UserRole;\n  languages: Language[];\n  bio?: string;\n};\n\nexport type SignUpUseCaseOutput = User;\n\nexport interface ISignUpUseCase {\n  execute(input: SignUpUseCaseInput): Promise<SignUpUseCaseOutput>;\n}\n\nexport class SignUpUseCase implements ISignUpUseCase {\n  constructor(\n    private logger: ILogger,\n    private appConfig: IAppConfig,\n    private identityServiceProvider: IISP = new ISP(),\n    private guidGenerator: IGuidGenerator = new UUIDGuidGenerator(),\n    private getUserRepository: IGetUserRepository = new GetUserRepository(),\n    private createRepository: ICreateUserRepository = new CreateUserRepository(),\n  ) {\n    this.logger = this.logger.getChild('SignUpUseCase');\n  }\n\n  async execute(input: SignUpUseCaseInput): Promise<SignUpUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    const email = input.email.toLowerCase();\n\n    try {\n      const userFound = await this.getUserRepository.execute({\n        user_id: email,\n      });\n      this.logger.debug('users repository response', userFound);\n\n      if (userFound) {\n        throw new Error('USER_ALREADY_EXISTS');\n      }\n\n      const approved_at = !(input.role === 'Admin')\n        ? new Date()\n        : undefined;\n\n      const createUserRepositoryInput: CreateUserRepositoryInput = {\n        user_id: this.guidGenerator.uuidV4(),\n        auth_token: this.guidGenerator.uuidV4(),\n        email: input.email,\n        email_verified: false,\n        name: input.name,\n        role: input.role,\n        bio: input.bio,\n        languages: input.languages,\n        approved_at,\n        created_at: new Date(),\n        photo_url: undefined,\n        deleted_at: undefined,\n      };\n\n      const user = await this.createRepository.execute(\n        createUserRepositoryInput,\n      );\n      this.logger.debug('create user repository response', user);\n\n      const ispUserCreated = await this.identityServiceProvider.createUser({\n        email,\n        user_id: createUserRepositoryInput.user_id,\n      });\n      this.logger.debug('identityServiceProvider createUser', ispUserCreated);\n\n      await this.identityServiceProvider.setUserPassword({\n        email,\n        password: input.password,\n      });\n      this.logger.debug('identityServiceProvider confirmUser');\n\n      this.logger.debug('execute output', user);\n      return user;\n    } catch (error) {\n      this.logger.error('error', error);\n      throw error;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["SignUpUseCase_exports", "__export", "SignUpUseCase", "SignUpUseCase_default", "__toCommonJS", "e", "n", "ISP", "input", "import_crypto", "rnds8Pool", "poolPtr", "rng", "crypto", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_crypto", "native_default", "crypto", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "unsafeStringify", "v4_default", "UUIDGuidGenerator", "v4_default", "DatabaseSession", "entityModel", "input", "databaseInstance", "GetUserRepository", "input", "databaseInstance", "user", "CreateUserRepository", "input", "databaseSession", "databaseInstance", "user", "SignUpUseCase", "logger", "appConfig", "identityServiceProvider", "ISP", "guidGenerator", "UUIDGuidGenerator", "getUserRepository", "GetUserRepository", "createRepository", "CreateUserRepository", "input", "email", "userFound", "approved_at", "createUserRepositoryInput", "user", "ispUserCreated", "error", "SignUpUseCase_default"]
}
