{
  "version": 3,
  "sources": ["../../../../../src/application/usecases/auth/password/ChangePasswordUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=8b978777-a1c4-4377-bd43-92fdd6db08c4", "../../../../../src/infra/isp/ISP.ts", "../../../../../src/infra/database/session.ts", "../../../../../src/infra/database/repositories/GetUserRepository.ts", "../../../../../src/application/usecases/auth/password/ChangePasswordUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/auth/password/ChangePasswordUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/auth/password/ChangePasswordUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"c7dc6397-a054-4244-bef3-f42061d04812\",e._sentryDebugIdIdentifier=\"sentry-dbid-c7dc6397-a054-4244-bef3-f42061d04812\")}catch(e){}}();", "import {\n  CreateUserInput,\n  CreateUserOutput,\n  DeleteUserInput,\n  DeleteUserOutput,\n  GetUserInput,\n  GetUserOutput,\n  IISP,\n  InitiateAuthInput,\n  InitiateAuthOutput,\n  RevalidateAuthInput,\n  RevalidateAuthOutput,\n  SetEmailVerifiedInput,\n  SetEmailVerifiedOutput,\n  SetPhoneNumberInput,\n  SetPhoneNumberOutput,\n  SetUserPasswordInput,\n  SetUserPasswordOutput,\n} from '../../application/protocols/isp/IISP';\n\nexport class ISP implements IISP {\n  public async createUser(input: CreateUserInput): Promise<CreateUserOutput> {\n    console.log(input);\n    return {\n      userName: input.user_id,\n      userEmail: input.email,\n    };\n  }\n\n  public async getUser(input: GetUserInput): Promise<GetUserOutput> {\n    console.log(input);\n    return {\n      userName: 'User Name',\n      userEmail: 'user@fanzo.com',\n    };\n  }\n\n  public async deleteUser(input: DeleteUserInput): Promise<DeleteUserOutput> {\n    console.log(input);\n  }\n\n  public async setPhoneNumber(\n      input: SetPhoneNumberInput,\n  ): Promise<SetPhoneNumberOutput> {\n    console.log(input);\n  }\n\n  public async setUserPassword(\n      input: SetUserPasswordInput,\n  ): Promise<SetUserPasswordOutput> {\n    console.log(input);\n  }\n\n  public async setEmailVerified(\n      input: SetEmailVerifiedInput,\n  ): Promise<SetEmailVerifiedOutput> {\n    console.log(input);\n  }\n\n  public async initiateAuth(\n      input: InitiateAuthInput,\n  ): Promise<InitiateAuthOutput> {\n    console.log(input);\n    return {\n      access_token: 'access_token',\n      refresh_token: 'refresh_token',\n      expires_in: 30,\n    };\n  }\n\n  public async revalidateAuth(\n      input: RevalidateAuthInput,\n  ): Promise<RevalidateAuthOutput> {\n    console.log(input);\n    return {\n      access_token: 'access_token',\n      expires_in: 30,\n    };\n  }\n}\n", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import {\n  GetUserRepositoryInput,\n  GetUserRepositoryOutput,\n  IGetUserRepository,\n} from '../../../domain/repositories/IGetUserRepository';\nimport { databaseInstance } from '../session';\nimport { User } from '../../../domain/entities/User';\n\nexport class GetUserRepository implements IGetUserRepository {\n  public async execute(\n      input: GetUserRepositoryInput,\n  ): Promise<GetUserRepositoryOutput> {\n    const databaseSession = databaseInstance.getSession();\n    return databaseSession.find((user: User) =>\n        (user.user_id === input.user_id || user.auth_token === input.user_id || user.email === input.user_id)) || null\n  }\n}\n", "import { ISP } from '../../../../infra/isp/ISP';\nimport { IISP } from '../../../protocols/isp/IISP';\nimport { User } from '../../../../domain/entities/User';\nimport { ILogger } from '../../../protocols/logger/ILogger';\nimport { IGetUserRepository } from '../../../../domain/repositories/IGetUserRepository';\nimport { GetUserRepository } from '../../../../infra/database/repositories/GetUserRepository';\n\nexport type ChangePasswordUseCaseInput = {\n  auth_token: string;\n  new_password: string;\n};\n\nexport type ChangePasswordUseCaseOutput = User;\n\nexport interface IChangePasswordUseCase {\n  execute(\n    input: ChangePasswordUseCaseInput,\n  ): Promise<ChangePasswordUseCaseOutput>;\n}\n\nexport class ChangePasswordUseCase implements IChangePasswordUseCase {\n  constructor(\n    private readonly logger: ILogger,\n    private getUserRepository: IGetUserRepository = new GetUserRepository(),\n    private identityServiceProvider: IISP = new ISP(),\n  ) {\n    this.logger = this.logger.getChild('ChangePasswordUseCase');\n  }\n\n  public async execute(\n    input: ChangePasswordUseCaseInput,\n  ): Promise<ChangePasswordUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    try {\n      const user = await this.getUserRepository.execute({\n        user_id: input.auth_token,\n      });\n      this.logger.debug('user repository response', user);\n\n      if (!user) {\n        throw new Error('USER_NOT_FOUND');\n      }\n\n      if (user.auth_token !== input.auth_token) {\n        throw new Error('USER_NOT_AUTHORIZED');\n      }\n\n      await this.identityServiceProvider.setUserPassword({\n        password: input.new_password,\n        email: user.email,\n      });\n      this.logger.debug('identityServiceProvider setUserPassword');\n\n      return user;\n    } catch (error) {\n      this.logger.error('execute error', error);\n      throw error;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["ChangePasswordUseCase_exports", "__export", "ChangePasswordUseCase", "ChangePasswordUseCase_default", "__toCommonJS", "e", "n", "ISP", "input", "DatabaseSession", "entityModel", "input", "databaseInstance", "GetUserRepository", "input", "databaseInstance", "user", "ChangePasswordUseCase", "logger", "getUserRepository", "GetUserRepository", "identityServiceProvider", "ISP", "input", "user", "error", "ChangePasswordUseCase_default"]
}
