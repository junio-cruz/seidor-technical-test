var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var g=(t,e)=>{for(var r in e)u(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of m(e))!U.call(t,o)&&o!==r&&u(t,o,{get:()=>e[o],enumerable:!(s=d(e,o))||s.enumerable});return t};var I=t=>h(u({},"__esModule",{value:!0}),t);var y={};g(y,{ChangePasswordUseCase:()=>p,default:()=>f});module.exports=I(y);(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[e]="c7dc6397-a054-4244-bef3-f42061d04812",t._sentryDebugIdIdentifier="sentry-dbid-c7dc6397-a054-4244-bef3-f42061d04812")}catch{}})();var i=class{async createUser(e){return console.log(e),{userName:e.user_id,userEmail:e.email}}async getUser(e){return console.log(e),{userName:"User Name",userEmail:"user@fanzo.com"}}async deleteUser(e){console.log(e)}async setPhoneNumber(e){console.log(e)}async setUserPassword(e){console.log(e)}async setEmailVerified(e){console.log(e)}async initiateAuth(e){return console.log(e),{access_token:"access_token",refresh_token:"refresh_token",expires_in:30}}async revalidateAuth(e){return console.log(e),{access_token:"access_token",expires_in:30}}};var a=class{constructor(e){this.entityModel=e;this.clientSession=e}clientSession;start(){return this.clientSession=[],!!this.clientSession}getSession(){if(this.clientSession)return this.clientSession;throw new Error("START_DATABASE_ERROR")}updateSession(e){return this.clientSession=e,this.clientSession}},c=new a([]);var n=class{async execute(e){return c.getSession().find(s=>s.user_id===e.user_id||s.auth_token===e.user_id||s.email===e.user_id)||null}};var p=class{constructor(e,r=new n,s=new i){this.logger=e;this.getUserRepository=r;this.identityServiceProvider=s;this.logger=this.logger.getChild("ChangePasswordUseCase")}async execute(e){this.logger.debug("execute input",JSON.stringify(e));try{let r=await this.getUserRepository.execute({user_id:e.auth_token});if(this.logger.debug("user repository response",r),!r)throw new Error("USER_NOT_FOUND");if(r.auth_token!==e.auth_token)throw new Error("USER_NOT_AUTHORIZED");return await this.identityServiceProvider.setUserPassword({password:e.new_password,email:r.email}),this.logger.debug("identityServiceProvider setUserPassword"),r}catch(r){throw this.logger.error("execute error",r),r}}};var f=void 0;0&&(module.exports={ChangePasswordUseCase});
//# sourceMappingURL=ChangePasswordUseCase.js.map
