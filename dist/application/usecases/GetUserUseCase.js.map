{
  "version": 3,
  "sources": ["../../../src/application/usecases/GetUserUseCase.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=05e5b43c-0058-4462-af7f-66f90815d020", "../../../src/infra/database/session.ts", "../../../src/infra/database/repositories/GetUserRepository.ts", "../../../src/application/usecases/GetUserUseCase.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/application/usecases/GetUserUseCase.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/application/usecases/GetUserUseCase.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"01ef48ed-6706-4ace-8d3f-dc800b649c34\",e._sentryDebugIdIdentifier=\"sentry-dbid-01ef48ed-6706-4ace-8d3f-dc800b649c34\")}catch(e){}}();", "import {User} from \"../../domain/entities/User\";\n\nexport class DatabaseSession  {\n  private clientSession: User[];\n\n  constructor(private readonly entityModel: User[]) {\n    this.clientSession = entityModel\n  }\n\n  public start(): boolean {\n    this.clientSession = [] as User[];\n    return !!this.clientSession\n  }\n\n  public getSession(): User[] {\n    if (this.clientSession) {\n      return this.clientSession;\n    }\n    throw new Error('START_DATABASE_ERROR');\n  }\n\n  public updateSession(input: User[]): User[] {\n    this.clientSession = input;\n    return this.clientSession;\n  }\n}\n\nexport const databaseInstance = new DatabaseSession([]);\n\n", "import {\n  GetUserRepositoryInput,\n  GetUserRepositoryOutput,\n  IGetUserRepository,\n} from '../../../domain/repositories/IGetUserRepository';\nimport { databaseInstance } from '../session';\nimport { User } from '../../../domain/entities/User';\n\nexport class GetUserRepository implements IGetUserRepository {\n  public async execute(\n      input: GetUserRepositoryInput,\n  ): Promise<GetUserRepositoryOutput> {\n    const databaseSession = databaseInstance.getSession();\n    return databaseSession.find((user: User) =>\n        (user.user_id === input.user_id || user.auth_token === input.user_id || user.email === input.user_id)) || null\n  }\n}\n", "import { User } from '../../domain/entities/User';\n\nimport { Logger } from '../../infra/logger/Logger';\nimport { IGetUserRepository } from '../../domain/repositories/IGetUserRepository';\nimport { GetUserRepository } from '../../infra/database/repositories/GetUserRepository';\n\nexport type GetUserUseCaseInput = {\n  user_id: string;\n};\n\nexport type GetUserUseCaseOutput = User | null;\n\nexport interface IGetUserUseCase {\n  execute(input: GetUserUseCaseInput): Promise<GetUserUseCaseOutput>;\n}\n\nexport class GetUserUseCase implements IGetUserUseCase {\n  constructor(\n    private readonly logger: Logger,\n    private getUserRepository: IGetUserRepository = new GetUserRepository(),\n  ) {\n    this.logger = this.logger.getChild('GetUserUseCase');\n  }\n\n  async execute(input: GetUserUseCaseInput): Promise<GetUserUseCaseOutput> {\n    this.logger.debug('execute input', JSON.stringify(input));\n    const user = await this.getUserRepository.execute({\n      user_id: input.user_id,\n    });\n    this.logger.debug('get user repository response', user);\n    this.logger.debug('execute output', user);\n    return user;\n  }\n}\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,YAAAC,IAAA,eAAAC,EAAAJ,ICAE,UAAU,CAAC,GAAG,CAAC,IAAIK,EAAe,OAAO,OAApB,IAA2B,OAAoB,OAAO,OAApB,IAA2B,OAAoB,OAAO,KAApB,IAAyB,KAAK,CAAC,EAAEC,EAAG,IAAI,QAAO,MAAMA,IAAID,EAAE,gBAAgBA,EAAE,iBAAiB,CAAC,EAAEA,EAAE,gBAAgBC,CAAC,EAAE,uCAAuCD,EAAE,yBAAyB,mDAAmD,MAAS,CAAC,CAAC,GAAE,ECE5U,IAAME,EAAN,KAAuB,CAG5B,YAA6BC,EAAqB,CAArB,iBAAAA,EAC3B,KAAK,cAAgBA,CACvB,CAJQ,cAMD,OAAiB,CACtB,YAAK,cAAgB,CAAC,EACf,CAAC,CAAC,KAAK,aAChB,CAEO,YAAqB,CAC1B,GAAI,KAAK,cACP,OAAO,KAAK,cAEd,MAAM,IAAI,MAAM,sBAAsB,CACxC,CAEO,cAAcC,EAAuB,CAC1C,YAAK,cAAgBA,EACd,KAAK,aACd,CACF,EAEaC,EAAmB,IAAIH,EAAgB,CAAC,CAAC,ECnB/C,IAAMI,EAAN,KAAsD,CAC3D,MAAa,QACTC,EACgC,CAElC,OADwBC,EAAiB,WAAW,EAC7B,KAAMC,GACxBA,EAAK,UAAYF,EAAM,SAAWE,EAAK,aAAeF,EAAM,SAAWE,EAAK,QAAUF,EAAM,OAAQ,GAAK,IAChH,CACF,ECAO,IAAMG,EAAN,KAAgD,CACrD,YACmBC,EACTC,EAAwC,IAAIC,EACpD,CAFiB,YAAAF,EACT,uBAAAC,EAER,KAAK,OAAS,KAAK,OAAO,SAAS,gBAAgB,CACrD,CAEA,MAAM,QAAQE,EAA2D,CACvE,KAAK,OAAO,MAAM,gBAAiB,KAAK,UAAUA,CAAK,CAAC,EACxD,IAAMC,EAAO,MAAM,KAAK,kBAAkB,QAAQ,CAChD,QAASD,EAAM,OACjB,CAAC,EACD,YAAK,OAAO,MAAM,+BAAgCC,CAAI,EACtD,KAAK,OAAO,MAAM,iBAAkBA,CAAI,EACjCA,CACT,CACF,EJ9Bc,IAAOC,EAAuB",
  "names": ["GetUserUseCase_exports", "__export", "GetUserUseCase", "GetUserUseCase_default", "__toCommonJS", "e", "n", "DatabaseSession", "entityModel", "input", "databaseInstance", "GetUserRepository", "input", "databaseInstance", "user", "GetUserUseCase", "logger", "getUserRepository", "GetUserRepository", "input", "user", "GetUserUseCase_default"]
}
