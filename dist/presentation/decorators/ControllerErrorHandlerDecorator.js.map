{
  "version": 3,
  "sources": ["../../../node_modules/@sentry/src/is.ts", "../../../node_modules/@sentry/src/string.ts", "../../../node_modules/@sentry/src/aggregate-errors.ts", "../../../node_modules/@sentry/src/worldwide.ts", "../../../node_modules/@sentry/src/browser.ts", "../../../node_modules/@sentry/src/debug-build.ts", "../../../node_modules/@sentry/src/logger.ts", "../../../node_modules/@sentry/src/dsn.ts", "../../../node_modules/@sentry/src/error.ts", "../../../node_modules/@sentry/src/object.ts", "../../../node_modules/@sentry/src/node-stack-trace.ts", "../../../node_modules/@sentry/src/stacktrace.ts", "../../../node_modules/@sentry/src/instrument/_handlers.ts", "../../../node_modules/@sentry/src/instrument/console.ts", "../../../node_modules/@sentry/src/misc.ts", "../../../node_modules/@sentry/src/instrument/dom.ts", "../../../node_modules/@sentry/src/supports.ts", "../../../node_modules/@sentry/src/instrument/fetch.ts", "../../../node_modules/@sentry/src/instrument/globalError.ts", "../../../node_modules/@sentry/src/instrument/globalUnhandledRejection.ts", "../../../node_modules/@sentry/src/vendor/supportsHistory.ts", "../../../node_modules/@sentry/src/instrument/history.ts", "../../../node_modules/@sentry/src/instrument/xhr.ts", "../../../node_modules/@sentry/src/instrument/index.ts", "../../../node_modules/@sentry/src/env.ts", "../../../node_modules/@sentry/src/node.ts", "../../../node_modules/@sentry/src/isBrowser.ts", "../../../node_modules/@sentry/src/memo.ts", "../../../node_modules/@sentry/src/normalize.ts", "../../../node_modules/@sentry/src/path.ts", "../../../node_modules/@sentry/src/syncpromise.ts", "../../../node_modules/@sentry/src/promisebuffer.ts", "../../../node_modules/@sentry/src/cookie.ts", "../../../node_modules/@sentry/src/url.ts", "../../../node_modules/@sentry/src/requestdata.ts", "../../../node_modules/@sentry/src/severity.ts", "../../../node_modules/@sentry/src/time.ts", "../../../node_modules/@sentry/src/baggage.ts", "../../../node_modules/@sentry/src/tracing.ts", "../../../node_modules/@sentry/src/envelope.ts", "../../../node_modules/@sentry/src/clientreport.ts", "../../../node_modules/@sentry/src/ratelimit.ts", "../../../node_modules/@sentry/src/userIntegrations.ts", "../../../node_modules/@sentry/src/cache.ts", "../../../node_modules/@sentry/src/eventbuilder.ts", "../../../node_modules/@sentry/src/parameterize.ts", "../../../node_modules/@sentry/src/anr.ts", "../../../node_modules/@sentry/src/lru.ts", "../../../node_modules/@sentry/src/buildPolyfills/_nullishCoalesce.ts", "../../../node_modules/@sentry/src/buildPolyfills/_asyncNullishCoalesce.ts", "../../../node_modules/@sentry/src/buildPolyfills/_asyncOptionalChain.ts", "../../../node_modules/@sentry/src/buildPolyfills/_asyncOptionalChainDelete.ts", "../../../node_modules/@sentry/src/buildPolyfills/_optionalChain.ts", "../../../node_modules/@sentry/src/buildPolyfills/_optionalChainDelete.ts", "../../../node_modules/@sentry/src/vendor/escapeStringForRegex.ts", "../../../node_modules/@sentry/utils/cjs/index.js", "../../../node_modules/@sentry/src/debug-build.ts", "../../../node_modules/@sentry/src/constants.ts", "../../../node_modules/@sentry/src/eventProcessors.ts", "../../../node_modules/@sentry/src/session.ts", "../../../node_modules/@sentry/src/utils/spanUtils.ts", "../../../node_modules/@sentry/src/utils/prepareEvent.ts", "../../../node_modules/@sentry/src/exports.ts", "../../../node_modules/@sentry/src/utils/getRootSpan.ts", "../../../node_modules/@sentry/src/tracing/dynamicSamplingContext.ts", "../../../node_modules/@sentry/src/utils/applyScopeDataToEvent.ts", "../../../node_modules/@sentry/src/scope.ts", "../../../node_modules/@sentry/src/version.ts", "../../../node_modules/@sentry/src/hub.ts", "../../../node_modules/@sentry/src/tracing/utils.ts", "../../../node_modules/@sentry/src/tracing/errors.ts", "../../../node_modules/@sentry/src/semanticAttributes.ts", "../../../node_modules/@sentry/src/tracing/span.ts", "../../../node_modules/@sentry/src/tracing/transaction.ts", "../../../node_modules/@sentry/src/tracing/idletransaction.ts", "../../../node_modules/@sentry/src/utils/hasTracingEnabled.ts", "../../../node_modules/@sentry/src/tracing/sampling.ts", "../../../node_modules/@sentry/src/tracing/hubextensions.ts", "../../../node_modules/@sentry/src/tracing/spanstatus.ts", "../../../node_modules/@sentry/src/utils/handleCallbackErrors.ts", "../../../node_modules/@sentry/src/tracing/trace.ts", "../../../node_modules/@sentry/src/tracing/measurement.ts", "../../../node_modules/@sentry/src/envelope.ts", "../../../node_modules/@sentry/src/sessionflusher.ts", "../../../node_modules/@sentry/src/api.ts", "../../../node_modules/@sentry/src/integration.ts", "../../../node_modules/@sentry/src/metrics/constants.ts", "../../../node_modules/@sentry/src/metrics/utils.ts", "../../../node_modules/@sentry/src/metrics/envelope.ts", "../../../node_modules/@sentry/src/baseclient.ts", "../../../node_modules/@sentry/src/checkin.ts", "../../../node_modules/@sentry/src/metrics/instance.ts", "../../../node_modules/@sentry/src/metrics/aggregator.ts", "../../../node_modules/@sentry/src/server-runtime-client.ts", "../../../node_modules/@sentry/src/sdk.ts", "../../../node_modules/@sentry/src/transports/base.ts", "../../../node_modules/@sentry/src/transports/offline.ts", "../../../node_modules/@sentry/src/transports/multiplexed.ts", "../../../node_modules/@sentry/src/utils/isSentryRequestUrl.ts", "../../../node_modules/@sentry/src/metadata.ts", "../../../node_modules/@sentry/src/integrations/metadata.ts", "../../../node_modules/@sentry/src/integrations/requestdata.ts", "../../../node_modules/@sentry/src/integrations/inboundfilters.ts", "../../../node_modules/@sentry/src/integrations/functiontostring.ts", "../../../node_modules/@sentry/src/integrations/linkederrors.ts", "../../../node_modules/@sentry/src/metrics/browser-aggregator.ts", "../../../node_modules/@sentry/src/metrics/integration.ts", "../../../node_modules/@sentry/src/metrics/exports.ts", "../../../node_modules/@sentry/src/index.ts", "../../../node_modules/@sentry-internal/src/common/debug-build.ts", "../../../node_modules/@sentry-internal/src/node/integrations/utils/node-utils.ts", "../../../node_modules/@sentry-internal/src/node/integrations/express.ts", "../../../node_modules/@sentry-internal/src/node/integrations/postgres.ts", "../../../node_modules/@sentry-internal/src/node/integrations/mysql.ts", "../../../node_modules/@sentry-internal/src/node/integrations/mongo.ts", "../../../node_modules/@sentry-internal/src/node/integrations/prisma.ts", "../../../node_modules/@sentry-internal/src/node/integrations/graphql.ts", "../../../node_modules/@sentry-internal/src/node/integrations/apollo.ts", "../../../node_modules/@sentry-internal/src/node/integrations/lazy.ts", "../../../node_modules/@sentry-internal/src/browser/types.ts", "../../../node_modules/@sentry-internal/src/browser/backgroundtab.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/bindReporter.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/generateUniqueID.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/getNavigationEntry.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/getActivationStart.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/initMetric.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/observe.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/onHidden.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/getCLS.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/lib/getVisibilityWatcher.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/getFID.ts", "../../../node_modules/@sentry-internal/src/browser/web-vitals/getLCP.ts", "../../../node_modules/@sentry-internal/src/browser/instrument.ts", "../../../node_modules/@sentry-internal/src/browser/metrics/utils.ts", "../../../node_modules/@sentry-internal/src/browser/metrics/index.ts", "../../../node_modules/@sentry-internal/src/common/fetch.ts", "../../../node_modules/@sentry-internal/src/browser/request.ts", "../../../node_modules/@sentry-internal/src/browser/router.ts", "../../../node_modules/@sentry-internal/src/browser/browsertracing.ts", "../../../node_modules/@sentry-internal/src/extensions.ts", "../../../node_modules/@sentry-internal/tracing/cjs/index.js", "../../../node_modules/@sentry/src/tracing/index.ts", "../../../node_modules/@sentry/src/client.ts", "../../../node_modules/@sentry/src/proxy/base.ts", "../../../node_modules/@sentry/src/proxy/parse-proxy-response.ts", "../../../node_modules/@sentry/src/proxy/index.ts", "../../../node_modules/@sentry/src/transports/http.ts", "../../../node_modules/@sentry/src/nodeVersion.ts", "../../../node_modules/@sentry/src/async/domain.ts", "../../../node_modules/@sentry/src/async/hooks.ts", "../../../node_modules/@sentry/src/async/index.ts", "../../../node_modules/@sentry/src/integrations/console.ts", "../../../node_modules/@sentry/src/debug-build.ts", "../../../node_modules/@sentry/src/integrations/utils/http.ts", "../../../node_modules/@sentry/src/integrations/http.ts", "../../../node_modules/@sentry/src/integrations/utils/errorhandling.ts", "../../../node_modules/@sentry/src/integrations/onuncaughtexception.ts", "../../../node_modules/@sentry/src/integrations/onunhandledrejection.ts", "../../../node_modules/@sentry/src/integrations/modules.ts", "../../../node_modules/@sentry/src/integrations/contextlines.ts", "../../../node_modules/@sentry/src/integrations/context.ts", "../../../node_modules/@sentry/src/integrations/local-variables/common.ts", "../../../node_modules/@sentry/src/integrations/local-variables/local-variables-sync.ts", "../../../node_modules/@sentry/src/integrations/local-variables/index.ts", "../../../node_modules/@sentry/src/integrations/undici/index.ts", "../../../node_modules/@sentry/src/integrations/spotlight.ts", "../../../node_modules/@sentry/node/cjs/integrations/anr/worker-script.js", "../../../node_modules/@sentry/src/integrations/anr/index.ts", "../../../node_modules/@sentry/src/integrations/hapi/index.ts", "../../../node_modules/@sentry/src/module.ts", "../../../node_modules/@sentry/src/sdk.ts", "../../../node_modules/@sentry/src/utils.ts", "../../../node_modules/@sentry/src/integrations/anr/legacy.ts", "../../../node_modules/@sentry/src/requestDataDeprecated.ts", "../../../node_modules/@sentry/src/handlers.ts", "../../../node_modules/@sentry/node/cjs/integrations/index.js", "../../../node_modules/@sentry/node/cjs/tracing/integrations.js", "../../../node_modules/@sentry/src/cron/common.ts", "../../../node_modules/@sentry/src/cron/cron.ts", "../../../node_modules/@sentry/src/cron/node-cron.ts", "../../../node_modules/@sentry/src/cron/node-schedule.ts", "../../../node_modules/@sentry/src/index.ts", "../../../node_modules/src/awsservices.ts", "../../../node_modules/src/debug-build.ts", "../../../node_modules/src/utils.ts", "../../../node_modules/src/awslambda.ts", "../../../node_modules/src/google-cloud-grpc.ts", "../../../node_modules/src/google-cloud-http.ts", "../../../node_modules/src/gcpfunction/http.ts", "../../../node_modules/src/gcpfunction/events.ts", "../../../node_modules/src/gcpfunction/cloud_events.ts", "../../../node_modules/src/gcpfunction/index.ts", "../../../node_modules/@sentry/serverless/cjs/index.js", "../../../src/presentation/decorators/ControllerErrorHandlerDecorator.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=270f1416-f93c-4cf4-ab65-af4561c63765", "../../../src/presentation/decorators/ControllerErrorHandlerDecorator.ts", "../../../src/presentation/http/errors.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport type { ParameterizedString, PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n", "import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n", "import type { Event, EventHint, Exception, ExtendedError, StackParser } from '@sentry/types';\n\nimport { isInstanceOf } from './is';\nimport { truncate } from './string';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  maxValueLimit: number = 250,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException as ExtendedError,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    is_exception_group: true,\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions: Exception[], maxValueLength: number): Exception[] {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Integration } from '@sentry/types';\n\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport interface InternalGlobal {\n  navigator?: { userAgent?: string };\n  console: Console;\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  onerror?: {\n    (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n}\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj: { Math?: Math }): any | undefined {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ: InternalGlobal =\n  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||\n  // eslint-disable-next-line no-restricted-globals\n  (typeof window == 'object' && isGlobalObj(window)) ||\n  (typeof self == 'object' && isGlobalObj(self)) ||\n  (typeof global == 'object' && isGlobalObj(global)) ||\n  (function (this: any) {\n    return this;\n  })() ||\n  {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nexport function getGlobalObject<T>(): T & InternalGlobal {\n  return GLOBAL_OBJ as T & InternalGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n", "import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset && elem.dataset['sentryComponent']) {\n      return elem.dataset['sentryComponent'];\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` attribute. This attribute is added at build-time\n * by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement && currentElem.dataset['sentryComponent']) {\n      return currentElem.dataset['sentryComponent'];\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import type { ConsoleLevel } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in ConsoleLevel]?: (...args: any[]) => void;\n} = {};\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\nexport const logger = makeLogger();\n", "import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { consoleSandbox, logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n", "import type { ConsoleLevel } from '@sentry/types';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n", "/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { logger } from './logger';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    DEBUG_BUILD && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPojo(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n\n  try {\n    const name = (Object.getPrototypeOf(input) as { constructor: { name: string } }).constructor.name;\n    return !name || name === 'Object';\n  } catch {\n    return true;\n  }\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n", "// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix Geisendörfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParserFn } from '@sentry/types';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\n// eslint-disable-next-line complexity\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || '<anonymous>';\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename && filename.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: parseInt(lineMatch[3], 10) || undefined,\n        colno: parseInt(lineMatch[4], 10) || undefined,\n        in_app: filenameIsInApp(filename, isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n", "import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { filenameIsInApp, node } from './node-stack-trace';\n\nexport { filenameIsInApp };\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n", "import { DEBUG_BUILD } from '../debug-build';\nimport { logger } from '../logger';\nimport { getFunctionName } from '../stacktrace';\n\nexport type InstrumentHandlerType = 'console' | 'dom' | 'fetch' | 'history' | 'xhr' | 'error' | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '@sentry/types';\n\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../logger';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log && log.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  const crypto = gbl.crypto || gbl.msCrypto;\n\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto && crypto.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto && crypto.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n", "// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataDom } from '@sentry/types';\n\nimport { uuid4 } from '../misc';\nimport { addNonEnumerableProperty, fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype SentryWrappedTarget = HTMLElement & { _sentryId?: string };\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\nconst DEBOUNCE_DURATION = 1000;\n\nlet debounceTimerID: number | undefined;\nlet lastCapturedEventType: string | undefined;\nlet lastCapturedEventTargetId: string | undefined;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addClickKeypressInstrumentationHandler(handler: (data: HandlerDataDom) => void): void {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nexport function instrumentDOM(): void {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event: Event): boolean {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || (event.target as SentryWrappedTarget)._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType: string, target: SentryWrappedTarget | null): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n\n  if (!target || !target.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(\n  handler: (data: HandlerDataDom) => void,\n  globalListener: boolean = false,\n): (event: Event) => void {\n  return (event: Event & { _sentryCaptured?: true }): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData: HandlerDataDom = { event, name, global: globalListener };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\n\nfunction getEventTarget(event: Event): SentryWrappedTarget | null {\n  try {\n    return event.target as SentryWrappedTarget | null;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\n", "import { DEBUG_BUILD } from './debug-build';\nimport { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\ndeclare const EdgeRuntime: string | undefined;\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataFetch } from '@sentry/types';\n\nimport { fill } from '../object';\nimport { supportsNativeFetch } from '../supports';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentFetch);\n}\n\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        (response: Response) => {\n          const finishedHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          };\n\n          triggerHandlers('fetch', finishedHandlerData);\n          return response;\n        },\n        (error: Error) => {\n          const erroredHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          };\n\n          triggerHandlers('fetch', erroredHandlerData);\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n", "import type { HandlerDataError } from '@sentry/types';\n\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { HandlerDataUnhandledRejection } from '@sentry/types';\n\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  GLOBAL_OBJ.onunhandledrejection = function (e: any): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n", "// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n// Copyright (c) 2010-2016 Google, Inc. http://angularjs.org\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { getGlobalObject } from '../worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (WINDOW as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n", "// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataHistory } from '@sentry/types';\n\nimport { fill } from '../object';\nimport { supportsHistory } from '../supports';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nlet lastHref: string | undefined;\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addHistoryInstrumentationHandler(handler: (data: HandlerDataHistory) => void): void {\n  const type = 'history';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentHistory);\n}\n\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    const handlerData: HandlerDataHistory = { from, to };\n    triggerHandlers('history', handlerData);\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        const handlerData: HandlerDataHistory = { from, to };\n        triggerHandlers('history', handlerData);\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n", "// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataXhr, SentryWrappedXMLHttpRequest, WrappedFunction } from '@sentry/types';\n\nimport { isString } from '../is';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v3__';\n\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addXhrInstrumentationHandler(handler: (data: HandlerDataXhr) => void): void {\n  const type = 'xhr';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentXHR);\n}\n\n/** Exported only for tests. */\nexport function instrumentXHR(): void {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!(WINDOW as any).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const startTimestamp = Date.now();\n\n      // open() should always be called with two or more arguments\n      // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n      const method = isString(args[0]) ? args[0].toUpperCase() : undefined;\n      const url = parseUrl(args[1]);\n\n      if (!method || !url) {\n        return originalOpen.apply(this, args);\n      }\n\n      this[SENTRY_XHR_DATA_KEY] = {\n        method,\n        url,\n        request_headers: {},\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          const handlerData: HandlerDataXhr = {\n            args: [method, url],\n            endTimestamp: Date.now(),\n            startTimestamp,\n            xhr: this,\n          };\n          triggerHandlers('xhr', handlerData);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs;\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo && isString(header) && isString(value)) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n\n      if (!sentryXhrData) {\n        return originalSend.apply(this, args);\n      }\n\n      if (args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      const handlerData: HandlerDataXhr = {\n        args: [sentryXhrData.method, sentryXhrData.url],\n        startTimestamp: Date.now(),\n        xhr: this,\n      };\n      triggerHandlers('xhr', handlerData);\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nfunction parseUrl(url: string | unknown): string | undefined {\n  if (isString(url)) {\n    return url;\n  }\n\n  try {\n    // url can be a string or URL\n    // but since URL is not available in IE11, we do not check for it,\n    // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n    // If that fails, we just return undefined\n    return (url as URL).toString();\n  } catch {} // eslint-disable-line no-empty\n\n  return undefined;\n}\n", "// TODO(v8): Consider moving this file (or at least parts of it) into the browser package. The registered handlers are mostly non-generic and we risk leaking runtime specific code into generic packages.\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { logger } from './../logger';\nimport type {\n  InstrumentHandlerCallback as _InstrumentHandlerCallback,\n  InstrumentHandlerType as _InstrumentHandlerType,\n} from './_handlers';\nimport { resetInstrumentationHandlers } from './_handlers';\nimport { addConsoleInstrumentationHandler } from './console';\nimport { addClickKeypressInstrumentationHandler } from './dom';\nimport { addFetchInstrumentationHandler } from './fetch';\nimport { addGlobalErrorInstrumentationHandler } from './globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from './globalUnhandledRejection';\nimport { addHistoryInstrumentationHandler } from './history';\nimport { SENTRY_XHR_DATA_KEY, addXhrInstrumentationHandler } from './xhr';\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n * @deprecated Use the proper function per instrumentation type instead!\n */\nexport function addInstrumentationHandler(type: _InstrumentHandlerType, callback: _InstrumentHandlerCallback): void {\n  switch (type) {\n    case 'console':\n      return addConsoleInstrumentationHandler(callback);\n    case 'dom':\n      return addClickKeypressInstrumentationHandler(callback);\n    case 'xhr':\n      return addXhrInstrumentationHandler(callback);\n    case 'fetch':\n      return addFetchInstrumentationHandler(callback);\n    case 'history':\n      return addHistoryInstrumentationHandler(callback);\n    case 'error':\n      return addGlobalErrorInstrumentationHandler(callback);\n    case 'unhandledrejection':\n      return addGlobalUnhandledRejectionInstrumentationHandler(callback);\n    default:\n      DEBUG_BUILD && logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * @deprecated Use the specific handler data types from @sentry/types instead, e.g. HandlerDataFetch, HandlerDataConsole, ...\n */\ntype InstrumentHandlerCallback = _InstrumentHandlerCallback;\n\n/**\n * @deprecated Use the specific handler functions instead, e.g. addConsoleInstrumentationHandler, ...\n */\ntype InstrumentHandlerType = _InstrumentHandlerType;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type { InstrumentHandlerCallback, InstrumentHandlerType };\n\nexport {\n  addConsoleInstrumentationHandler,\n  addClickKeypressInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  addFetchInstrumentationHandler,\n  addHistoryInstrumentationHandler,\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  SENTRY_XHR_DATA_KEY,\n  // Only exported for tests\n  resetInstrumentationHandlers,\n};\n", "/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // @ts-expect-error __SENTRY_SDK_SOURCE__ is injected by rollup during build process\n  return __SENTRY_SDK_SOURCE__;\n}\n", "/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n", "import { isNodeEnv } from './node';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Returns true if we are in the browser.\n */\nexport function isBrowser(): boolean {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!isNodeEnv() || isElectronNodeRenderer());\n}\n\ntype ElectronProcess = { type?: string };\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer(): boolean {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    (GLOBAL_OBJ as any).process !== undefined && ((GLOBAL_OBJ as any).process as ElectronProcess).type === 'renderer'\n  );\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n", "import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent, isVueViewModel } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/**\n * @deprecated This export will be removed in v8.\n */\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n", "// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n", "/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n", "import { SentryError } from './error';\nimport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n", "/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nexport function parseCookie(str: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n", "type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        // TODO: Use new URL global if it exists\n        .replace(/(:80)$/, '')\n        .replace(/(:443)$/, '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n", "import type {\n  Event,\n  ExtractedNodeRequestData,\n  PolymorphicRequest,\n  Transaction,\n  TransactionSource,\n  WebFetchHeaders,\n  WebFetchRequest,\n} from '@sentry/types';\n\nimport { parseCookie } from './cookie';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isPlainObject, isString } from './is';\nimport { logger } from './logger';\nimport { normalize } from './normalize';\nimport { stripUrlQueryAndFragment } from './url';\n\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true,\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nexport const DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\ntype InjectedNodeDeps = {\n  cookie: {\n    parse: (cookieStr: string) => Record<string, string>;\n  };\n  url: {\n    parse: (urlStr: string) => {\n      query: string | null;\n    };\n  };\n};\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport type AddRequestDataToEventOptions = {\n  /** Flags controlling whether each type of data should be added to the event */\n  include?: {\n    ip?: boolean;\n    request?: boolean | Array<(typeof DEFAULT_REQUEST_INCLUDES)[number]>;\n    transaction?: boolean | TransactionNamingScheme;\n    user?: boolean | Array<(typeof DEFAULT_USER_INCLUDES)[number]>;\n  };\n\n  /** Injected platform-specific dependencies */\n  deps?: {\n    cookie: {\n      parse: (cookieStr: string) => Record<string, string>;\n    };\n    url: {\n      parse: (urlStr: string) => {\n        query: string | null;\n      };\n    };\n  };\n};\n\nexport type TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nexport function addRequestDataToTransaction(\n  transaction: Transaction | undefined,\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): void {\n  if (!transaction) return;\n  // eslint-disable-next-line deprecation/deprecation\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    const [name, source] = extractPathForTransaction(req, { path: true, method: true });\n    transaction.updateName(name);\n    // TODO: SEMANTIC_ATTRIBUTE_SENTRY_SOURCE is in core, align this once we merge utils & core\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setMetadata({ source });\n  }\n  transaction.setAttribute('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setAttribute('baseUrl', req.baseUrl);\n  }\n  // TODO: We need to rewrite this to a flat format?\n  // eslint-disable-next-line deprecation/deprecation\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nexport function extractPathForTransaction(\n  req: PolymorphicRequest,\n  options: { path?: boolean; method?: boolean; customRoute?: string } = {},\n): [string, TransactionSource] {\n  const method = req.method && req.method.toUpperCase();\n\n  let path = '';\n  let source: TransactionSource = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n\n  return [name, source];\n}\n\n/** JSDoc */\nfunction extractTransaction(req: PolymorphicRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractPathForTransaction(req, { path: true })[0];\n    }\n    case 'handler': {\n      return (req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name) || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      // if exist _reconstructedRoute return that path instead of route.path\n      const customRoute = req._reconstructedRoute ? req._reconstructedRoute : undefined;\n      return extractPathForTransaction(req, { path: true, method: true, customRoute })[0];\n    }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: unknown;\n  },\n  keys: boolean | string[],\n): { [key: string]: unknown } {\n  const extractedUser: { [key: string]: unknown } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nexport function extractRequestData(\n  req: PolymorphicRequest,\n  options?: {\n    include?: string[];\n    deps?: InjectedNodeDeps;\n  },\n): ExtractedNodeRequestData {\n  const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = (req.headers || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  // Express 4 mistakenly strips off port number from req.host / req.hostname so we can't rely on them\n  // See: https://github.com/expressjs/express/issues/3047#issuecomment-236653223\n  // Also: https://github.com/getsentry/sentry-javascript/issues/1917\n  const host = headers.host || req.hostname || req.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || (req.socket && req.socket.encrypted) ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers': {\n        requestData.headers = headers;\n\n        // Remove the Cookie header in case cookie data should not be included in the event\n        if (!include.includes('cookies')) {\n          delete (requestData.headers as { cookie?: string }).cookie;\n        }\n\n        break;\n      }\n      case 'method': {\n        requestData.method = method;\n        break;\n      }\n      case 'url': {\n        requestData.url = absoluteUrl;\n        break;\n      }\n      case 'cookies': {\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n        requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || (headers.cookie && parseCookie(headers.cookie)) || {};\n        break;\n      }\n      case 'query_string': {\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa, nextjs: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = extractQueryParams(req, deps);\n        break;\n      }\n      case 'data': {\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   express, koa, nextjs: req.body\n        //\n        //   when using node by itself, you have to read the incoming stream(see\n        //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n        //   where they're going to store the final result, so they'll have to capture this data themselves\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      }\n      default: {\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: unknown })[key];\n        }\n      }\n    }\n  });\n\n  return requestData;\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n */\nexport function addRequestDataToEvent(\n  event: Event,\n  req: PolymorphicRequest,\n  options?: AddRequestDataToEventOptions,\n): Event {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include),\n  };\n\n  if (include.request) {\n    const extractedRequestData = Array.isArray(include.request)\n      ? extractRequestData(req, { include: include.request, deps: options && options.deps })\n      : extractRequestData(req, { deps: options && options.deps });\n\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (include.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    const ip = req.ip || (req.socket && req.socket.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n\n  return event;\n}\n\nfunction extractQueryParams(\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): string | Record<string, unknown> | undefined {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n\n  try {\n    return (\n      req.query ||\n      (typeof URL !== 'undefined' && new URL(originalUrl).search.slice(1)) ||\n      // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n      (deps && deps.url && deps.url.parse(originalUrl).query) ||\n      undefined\n    );\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\n// TODO(v8): Make this function return undefined when the extraction fails.\nexport function winterCGHeadersToDict(winterCGHeaders: WebFetchHeaders): Record<string, string> {\n  const headers: Record<string, string> = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch (e) {\n    DEBUG_BUILD &&\n      logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nexport function winterCGRequestToRequestData(req: WebFetchRequest): PolymorphicRequest {\n  const headers = winterCGHeadersToDict(req.headers);\n  return {\n    method: req.method,\n    url: req.url,\n    headers,\n  };\n}\n", "/* eslint-disable deprecation/deprecation */\nimport type { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n", "import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  if (!performance || !performance.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n", "import type { DynamicSamplingContext } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject: Readonly<Record<string, string>> = {};\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      for (const key of Object.keys(currBaggageObject)) {\n        acc[key] = currBaggageObject[key];\n      }\n      return acc;\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n", "import type { DynamicSamplingContext, PropagationContext, TraceparentData } from '@sentry/types';\n\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { uuid4 } from './misc';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create tracing context from incoming headers.\n */\nexport function tracingContextFromHeaders(\n  sentryTrace: Parameters<typeof extractTraceparentData>[0],\n  baggage: Parameters<typeof baggageHeaderToDynamicSamplingContext>[0],\n): {\n  traceparentData: ReturnType<typeof extractTraceparentData>;\n  dynamicSamplingContext: ReturnType<typeof baggageHeaderToDynamicSamplingContext>;\n  propagationContext: PropagationContext;\n} {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n\n  const propagationContext: PropagationContext = {\n    traceId: traceId || uuid4(),\n    spanId: uuid4().substring(16),\n    sampled: parentSampled,\n  };\n\n  if (parentSpanId) {\n    propagationContext.parentSpanId = parentSpanId;\n  }\n\n  if (dynamicSamplingContext) {\n    propagationContext.dsc = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  return {\n    traceparentData,\n    dynamicSamplingContext,\n    propagationContext,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string = uuid4(),\n  spanId: string = uuid4().substring(16),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n", "import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  // TODO: This is a temporary workaround until we have a proper data category for metrics\n  statsd: 'unknown',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n", "import type { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n", "import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n", "import type { Integration } from '@sentry/types';\n\nexport type UserIntegrationsFunction = (integrations: Integration[]) => Integration[];\nexport type UserIntegrations = Integration[] | UserIntegrationsFunction;\nexport type IntegrationWithExclusionOption = Integration & {\n  /**\n   * Allow the user to exclude this integration by not returning it from a function provided as the `integrations` option\n   * in `Sentry.init()`. Meant to be used with default integrations, the idea being that if a user has actively filtered\n   * an integration out, we should be able to respect that choice if we wish.\n   */\n  allowExclusionByUser?: boolean;\n};\n\ntype ForcedIntegrationOptions = {\n  [keyPath: string]: unknown;\n};\n\n/**\n * Recursively traverses an object to update an existing nested key.\n * Note: The provided key path must include existing properties,\n * the function will not create objects while traversing.\n *\n * @param obj An object to update\n * @param value The value to update the nested key with\n * @param keyPath The path to the key to update ex. fizz.buzz.foo\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setNestedKey(obj: Record<string, any>, keyPath: string, value: unknown): void {\n  // Ex. foo.bar.zoop will extract foo and bar.zoop\n  const match = keyPath.match(/([a-z_]+)\\.(.*)/i);\n  // The match will be null when there's no more recursing to do, i.e., when we've reached the right level of the object\n  if (match === null) {\n    obj[keyPath] = value;\n  } else {\n    // `match[1]` is the initial segment of the path, and `match[2]` is the remainder of the path\n    const innerObj = obj[match[1]];\n    setNestedKey(innerObj, match[2], value);\n  }\n}\n\n/**\n * Enforces inclusion of a given integration with specified options in an integration array originally determined by the\n * user, by either including the given default instance or by patching an existing user instance with the given options.\n *\n * Ideally this would happen when integrations are set up, but there isn't currently a mechanism there for merging\n * options from a default integration instance with those from a user-provided instance of the same integration, only\n * for allowing the user to override a default instance entirely. (TODO: Fix that.)\n *\n * @param defaultIntegrationInstance An instance of the integration with the correct options already set\n * @param userIntegrations Integrations defined by the user.\n * @param forcedOptions Options with which to patch an existing user-derived instance on the integration.\n * @returns A final integrations array.\n */\nexport function addOrUpdateIntegration<T extends UserIntegrations>(\n  defaultIntegrationInstance: Integration,\n  userIntegrations: T,\n  forcedOptions: ForcedIntegrationOptions = {},\n): T {\n  return (\n    Array.isArray(userIntegrations)\n      ? addOrUpdateIntegrationInArray(defaultIntegrationInstance, userIntegrations, forcedOptions)\n      : addOrUpdateIntegrationInFunction(\n          defaultIntegrationInstance,\n          // Somehow TS can't figure out that not being an array makes this necessarily a function\n          userIntegrations as UserIntegrationsFunction,\n          forcedOptions,\n        )\n  ) as T;\n}\n\nfunction addOrUpdateIntegrationInArray(\n  defaultIntegrationInstance: Integration,\n  userIntegrations: Integration[],\n  forcedOptions: ForcedIntegrationOptions,\n): Integration[] {\n  const userInstance = userIntegrations.find(integration => integration.name === defaultIntegrationInstance.name);\n\n  if (userInstance) {\n    for (const [keyPath, value] of Object.entries(forcedOptions)) {\n      setNestedKey(userInstance, keyPath, value);\n    }\n\n    return userIntegrations;\n  }\n\n  return [...userIntegrations, defaultIntegrationInstance];\n}\n\nfunction addOrUpdateIntegrationInFunction(\n  defaultIntegrationInstance: IntegrationWithExclusionOption,\n  userIntegrationsFunc: UserIntegrationsFunction,\n  forcedOptions: ForcedIntegrationOptions,\n): UserIntegrationsFunction {\n  const wrapper: UserIntegrationsFunction = defaultIntegrations => {\n    const userFinalIntegrations = userIntegrationsFunc(defaultIntegrations);\n\n    // There are instances where we want the user to be able to prevent an integration from appearing at all, which they\n    // would do by providing a function which filters out the integration in question. If that's happened in one of\n    // those cases, don't add our default back in.\n    if (defaultIntegrationInstance.allowExclusionByUser) {\n      const userFinalInstance = userFinalIntegrations.find(\n        integration => integration.name === defaultIntegrationInstance.name,\n      );\n      if (!userFinalInstance) {\n        return userFinalIntegrations;\n      }\n    }\n\n    return addOrUpdateIntegrationInArray(defaultIntegrationInstance, userFinalIntegrations, forcedOptions);\n  };\n\n  return wrapper;\n}\n", "/**\n * Creates a cache that evicts keys in fifo order\n * @param size {Number}\n */\nexport function makeFifoCache<Key extends string, Value>(\n  size: number,\n): {\n  get: (key: Key) => Value | undefined;\n  add: (key: Key, value: Value) => void;\n  delete: (key: Key) => boolean;\n  clear: () => void;\n  size: () => number;\n} {\n  // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.\n  let evictionOrder: Key[] = [];\n  let cache: Record<string, Value> = {};\n\n  return {\n    add(key: Key, value: Value) {\n      while (evictionOrder.length >= size) {\n        // shift is O(n) but this is small size and only happens if we are\n        // exceeding the cache size so it should be fine.\n        const evictCandidate = evictionOrder.shift();\n\n        if (evictCandidate !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete cache[evictCandidate];\n        }\n      }\n\n      // in case we have a collision, delete the old key.\n      if (cache[key]) {\n        this.delete(key);\n      }\n\n      evictionOrder.push(key);\n      cache[key] = value;\n    },\n    clear() {\n      cache = {};\n      evictionOrder = [];\n    },\n    get(key: Key): Value | undefined {\n      return cache[key];\n    },\n    size() {\n      return evictionOrder.length;\n    },\n    // Delete cache key and return true if it existed, false otherwise.\n    delete(key: Key): boolean {\n      if (!cache[key]) {\n        return false;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete cache[key];\n\n      for (let i = 0; i < evictionOrder.length; i++) {\n        if (evictionOrder[i] === key) {\n          evictionOrder.splice(i, 1);\n          break;\n        }\n      }\n\n      return true;\n    },\n  };\n}\n", "import type {\n  Client,\n  Event,\n  EventHint,\n  Exception,\n  Extras,\n  Hub,\n  Mechanism,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\n\nimport { isError, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\nfunction getMessageForObject(exception: object): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  } else {\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    return `Object captured as exception with keys: ${extractExceptionKeysForMessage(\n      exception as Record<string, unknown>,\n    )}`;\n  }\n}\n\n/**\n * Builds and Event from a Exception\n *\n * TODO(v8): Remove getHub fallback\n * @hidden\n */\nexport function eventFromUnknownInput(\n  getHubOrClient: (() => Hub) | Client | undefined,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const client =\n    typeof getHubOrClient === 'function'\n      ? // eslint-disable-next-line deprecation/deprecation\n        getHubOrClient().getClient()\n      : getHubOrClient;\n\n  let ex: unknown = exception;\n  const providedMechanism: Mechanism | undefined =\n    hint && hint.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  let extras: Extras | undefined;\n\n  if (!isError(exception)) {\n    if (isPlainObject(exception)) {\n      const normalizeDepth = client && client.getOptions().normalizeDepth;\n      extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n      const message = getMessageForObject(exception);\n      ex = (hint && hint.syntheticException) || new Error(message);\n      (ex as Error).message = message;\n    } else {\n      // This handles when someone does: `throw \"something awesome\";`\n      // We use synthesized Error here so we can extract a (rough) stack trace.\n      ex = (hint && hint.syntheticException) || new Error(exception as string);\n      (ex as Error).message = exception as string;\n    }\n    mechanism.synthetic = true;\n  }\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex as Error)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint && hint.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint && hint.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n", "import type { ParameterizedString } from '@sentry/types';\n\n/**\n * Tagged template function which returns paramaterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": \"My raw message with interpreted strings like %s\",\n * \"__sentry_template_values__\": [\"this\"]\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns String with template information in __sentry_template_string__ and __sentry_template_values__ properties\n */\nexport function parameterize(strings: TemplateStringsArray, ...values: string[]): ParameterizedString {\n  const formatted = new String(String.raw(strings, ...values)) as ParameterizedString;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n", "import type { StackFrame } from '@sentry/types';\n\nimport { dropUndefinedKeys } from './object';\nimport { filenameIsInApp } from './stacktrace';\n\ntype WatchdogReturn = {\n  /** Resets the watchdog timer */\n  poll: () => void;\n  /** Enables or disables the watchdog timer */\n  enabled: (state: boolean) => void;\n};\n\ntype CreateTimerImpl = () => { getTimeMs: () => number; reset: () => void };\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nexport function watchdogTimer(\n  createTimer: CreateTimerImpl,\n  pollInterval: number,\n  anrThreshold: number,\n  callback: () => void,\n): WatchdogReturn {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: (state: boolean) => {\n      enabled = state;\n    },\n  };\n}\n\n// types copied from inspector.d.ts\ninterface Location {\n  scriptId: string;\n  lineNumber: number;\n  columnNumber?: number;\n}\n\ninterface CallFrame {\n  functionName: string;\n  location: Location;\n  url: string;\n}\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nexport function callFrameToStackFrame(\n  frame: CallFrame,\n  url: string | undefined,\n  getModuleFromFilename: (filename: string | undefined) => string | undefined,\n): StackFrame {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n\n  return dropUndefinedKeys({\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || '?',\n    colno,\n    lineno,\n    in_app: filename ? filenameIsInApp(filename) : undefined,\n  });\n}\n", "/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nexport function _nullishCoalesce(lhs: unknown, rhsFn: () => unknown): unknown {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { _nullishCoalesce } from './_nullishCoalesce';\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nexport async function _asyncNullishCoalesce(lhs: unknown, rhsFn: () => unknown): Promise<unknown> {\n  return _nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport type { GenericFunction } from './types';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, for situations in which at least one part of the expression is async.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nexport async function _asyncOptionalChain(ops: unknown[]): Promise<unknown> {\n  let lastAccessLHS: unknown = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i] as string;\n    const fn = ops[i + 1] as (intermediateValue: unknown) => Promise<unknown>;\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = await fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = await fn((...args: unknown[]) => (value as GenericFunction).call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version:\n// async function _asyncOptionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = await fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = await fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { _asyncOptionalChain } from './_asyncOptionalChain';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nexport async function _asyncOptionalChainDelete(ops: unknown[]): Promise<boolean> {\n  const result = (await _asyncOptionalChain(ops)) as Promise<boolean | null>;\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : (result as Promise<boolean>);\n}\n\n// Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport type { GenericFunction } from './types';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nexport function _optionalChain(ops: unknown[]): unknown {\n  let lastAccessLHS: unknown = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i] as string;\n    const fn = ops[i + 1] as (intermediateValue: unknown) => unknown;\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args: unknown[]) => (value as GenericFunction).call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n", "// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { _optionalChain } from './_optionalChain';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nexport function _optionalChainDelete(ops: unknown[]): boolean {\n  const result = _optionalChain(ops) as boolean | null;\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// function _optionalChainDelete(ops) {\n//   const result = _optionalChain(ops);\n//   // by checking for loose equality to `null`, we catch both `null` and `undefined`\n//   return result == null ? true : result;\n// }\n", "// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 12+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n", "Object.defineProperty(exports, '__esModule', { value: true });\n\nconst aggregateErrors = require('./aggregate-errors.js');\nconst browser = require('./browser.js');\nconst dsn = require('./dsn.js');\nconst error = require('./error.js');\nconst worldwide = require('./worldwide.js');\nconst index = require('./instrument/index.js');\nconst is = require('./is.js');\nconst isBrowser = require('./isBrowser.js');\nconst logger = require('./logger.js');\nconst memo = require('./memo.js');\nconst misc = require('./misc.js');\nconst node = require('./node.js');\nconst normalize = require('./normalize.js');\nconst object = require('./object.js');\nconst path = require('./path.js');\nconst promisebuffer = require('./promisebuffer.js');\nconst requestdata = require('./requestdata.js');\nconst severity = require('./severity.js');\nconst stacktrace = require('./stacktrace.js');\nconst string = require('./string.js');\nconst supports = require('./supports.js');\nconst syncpromise = require('./syncpromise.js');\nconst time = require('./time.js');\nconst tracing = require('./tracing.js');\nconst env = require('./env.js');\nconst envelope = require('./envelope.js');\nconst clientreport = require('./clientreport.js');\nconst ratelimit = require('./ratelimit.js');\nconst baggage = require('./baggage.js');\nconst url = require('./url.js');\nconst userIntegrations = require('./userIntegrations.js');\nconst cache = require('./cache.js');\nconst eventbuilder = require('./eventbuilder.js');\nconst parameterize = require('./parameterize.js');\nconst anr = require('./anr.js');\nconst lru = require('./lru.js');\nconst _asyncNullishCoalesce = require('./buildPolyfills/_asyncNullishCoalesce.js');\nconst _asyncOptionalChain = require('./buildPolyfills/_asyncOptionalChain.js');\nconst _asyncOptionalChainDelete = require('./buildPolyfills/_asyncOptionalChainDelete.js');\nconst _nullishCoalesce = require('./buildPolyfills/_nullishCoalesce.js');\nconst _optionalChain = require('./buildPolyfills/_optionalChain.js');\nconst _optionalChainDelete = require('./buildPolyfills/_optionalChainDelete.js');\nconst console = require('./instrument/console.js');\nconst dom = require('./instrument/dom.js');\nconst xhr = require('./instrument/xhr.js');\nconst fetch = require('./instrument/fetch.js');\nconst history = require('./instrument/history.js');\nconst globalError = require('./instrument/globalError.js');\nconst globalUnhandledRejection = require('./instrument/globalUnhandledRejection.js');\nconst _handlers = require('./instrument/_handlers.js');\nconst nodeStackTrace = require('./node-stack-trace.js');\nconst escapeStringForRegex = require('./vendor/escapeStringForRegex.js');\nconst supportsHistory = require('./vendor/supportsHistory.js');\n\n\n\nexports.applyAggregateErrorsToEvent = aggregateErrors.applyAggregateErrorsToEvent;\nexports.getComponentName = browser.getComponentName;\nexports.getDomElement = browser.getDomElement;\nexports.getLocationHref = browser.getLocationHref;\nexports.htmlTreeAsString = browser.htmlTreeAsString;\nexports.dsnFromString = dsn.dsnFromString;\nexports.dsnToString = dsn.dsnToString;\nexports.makeDsn = dsn.makeDsn;\nexports.SentryError = error.SentryError;\nexports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;\nexports.getGlobalObject = worldwide.getGlobalObject;\nexports.getGlobalSingleton = worldwide.getGlobalSingleton;\nexports.addInstrumentationHandler = index.addInstrumentationHandler;\nexports.isDOMError = is.isDOMError;\nexports.isDOMException = is.isDOMException;\nexports.isElement = is.isElement;\nexports.isError = is.isError;\nexports.isErrorEvent = is.isErrorEvent;\nexports.isEvent = is.isEvent;\nexports.isInstanceOf = is.isInstanceOf;\nexports.isNaN = is.isNaN;\nexports.isParameterizedString = is.isParameterizedString;\nexports.isPlainObject = is.isPlainObject;\nexports.isPrimitive = is.isPrimitive;\nexports.isRegExp = is.isRegExp;\nexports.isString = is.isString;\nexports.isSyntheticEvent = is.isSyntheticEvent;\nexports.isThenable = is.isThenable;\nexports.isVueViewModel = is.isVueViewModel;\nexports.isBrowser = isBrowser.isBrowser;\nexports.CONSOLE_LEVELS = logger.CONSOLE_LEVELS;\nexports.consoleSandbox = logger.consoleSandbox;\nexports.logger = logger.logger;\nexports.originalConsoleMethods = logger.originalConsoleMethods;\nexports.memoBuilder = memo.memoBuilder;\nexports.addContextToFrame = misc.addContextToFrame;\nexports.addExceptionMechanism = misc.addExceptionMechanism;\nexports.addExceptionTypeValue = misc.addExceptionTypeValue;\nexports.arrayify = misc.arrayify;\nexports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;\nexports.getEventDescription = misc.getEventDescription;\nexports.parseSemver = misc.parseSemver;\nexports.uuid4 = misc.uuid4;\nexports.dynamicRequire = node.dynamicRequire;\nexports.isNodeEnv = node.isNodeEnv;\nexports.loadModule = node.loadModule;\nexports.normalize = normalize.normalize;\nexports.normalizeToSize = normalize.normalizeToSize;\nexports.normalizeUrlToBase = normalize.normalizeUrlToBase;\nexports.walk = normalize.walk;\nexports.addNonEnumerableProperty = object.addNonEnumerableProperty;\nexports.convertToPlainObject = object.convertToPlainObject;\nexports.dropUndefinedKeys = object.dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;\nexports.fill = object.fill;\nexports.getOriginalFunction = object.getOriginalFunction;\nexports.markFunctionWrapped = object.markFunctionWrapped;\nexports.objectify = object.objectify;\nexports.urlEncode = object.urlEncode;\nexports.basename = path.basename;\nexports.dirname = path.dirname;\nexports.isAbsolute = path.isAbsolute;\nexports.join = path.join;\nexports.normalizePath = path.normalizePath;\nexports.relative = path.relative;\nexports.resolve = path.resolve;\nexports.makePromiseBuffer = promisebuffer.makePromiseBuffer;\nexports.DEFAULT_USER_INCLUDES = requestdata.DEFAULT_USER_INCLUDES;\nexports.addRequestDataToEvent = requestdata.addRequestDataToEvent;\nexports.addRequestDataToTransaction = requestdata.addRequestDataToTransaction;\nexports.extractPathForTransaction = requestdata.extractPathForTransaction;\nexports.extractRequestData = requestdata.extractRequestData;\nexports.winterCGHeadersToDict = requestdata.winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = requestdata.winterCGRequestToRequestData;\nexports.severityFromString = severity.severityFromString;\nexports.severityLevelFromString = severity.severityLevelFromString;\nexports.validSeverityLevels = severity.validSeverityLevels;\nexports.createStackParser = stacktrace.createStackParser;\nexports.getFunctionName = stacktrace.getFunctionName;\nexports.nodeStackLineParser = stacktrace.nodeStackLineParser;\nexports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;\nexports.isMatchingPattern = string.isMatchingPattern;\nexports.safeJoin = string.safeJoin;\nexports.snipLine = string.snipLine;\nexports.stringMatchesSomePattern = string.stringMatchesSomePattern;\nexports.truncate = string.truncate;\nexports.isNativeFetch = supports.isNativeFetch;\nexports.supportsDOMError = supports.supportsDOMError;\nexports.supportsDOMException = supports.supportsDOMException;\nexports.supportsErrorEvent = supports.supportsErrorEvent;\nexports.supportsFetch = supports.supportsFetch;\nexports.supportsNativeFetch = supports.supportsNativeFetch;\nexports.supportsReferrerPolicy = supports.supportsReferrerPolicy;\nexports.supportsReportingObserver = supports.supportsReportingObserver;\nexports.SyncPromise = syncpromise.SyncPromise;\nexports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;\nexports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;\nObject.defineProperty(exports, '_browserPerformanceTimeOriginMode', {\n\tenumerable: true,\n\tget: () => time._browserPerformanceTimeOriginMode\n});\nexports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = time.dateTimestampInSeconds;\nexports.timestampInSeconds = time.timestampInSeconds;\nexports.timestampWithMs = time.timestampWithMs;\nexports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;\nexports.extractTraceparentData = tracing.extractTraceparentData;\nexports.generateSentryTraceHeader = tracing.generateSentryTraceHeader;\nexports.tracingContextFromHeaders = tracing.tracingContextFromHeaders;\nexports.getSDKSource = env.getSDKSource;\nexports.isBrowserBundle = env.isBrowserBundle;\nexports.addItemToEnvelope = envelope.addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = envelope.createAttachmentEnvelopeItem;\nexports.createEnvelope = envelope.createEnvelope;\nexports.createEventEnvelopeHeaders = envelope.createEventEnvelopeHeaders;\nexports.envelopeContainsItemType = envelope.envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelope.envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = envelope.forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = envelope.getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = envelope.parseEnvelope;\nexports.serializeEnvelope = envelope.serializeEnvelope;\nexports.createClientReportEnvelope = clientreport.createClientReportEnvelope;\nexports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;\nexports.disabledUntil = ratelimit.disabledUntil;\nexports.isRateLimited = ratelimit.isRateLimited;\nexports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;\nexports.updateRateLimits = ratelimit.updateRateLimits;\nexports.BAGGAGE_HEADER_NAME = baggage.BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;\nexports.getNumberOfUrlSegments = url.getNumberOfUrlSegments;\nexports.getSanitizedUrlString = url.getSanitizedUrlString;\nexports.parseUrl = url.parseUrl;\nexports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;\nexports.addOrUpdateIntegration = userIntegrations.addOrUpdateIntegration;\nexports.makeFifoCache = cache.makeFifoCache;\nexports.eventFromMessage = eventbuilder.eventFromMessage;\nexports.eventFromUnknownInput = eventbuilder.eventFromUnknownInput;\nexports.exceptionFromError = eventbuilder.exceptionFromError;\nexports.parseStackFrames = eventbuilder.parseStackFrames;\nexports.parameterize = parameterize.parameterize;\nexports.callFrameToStackFrame = anr.callFrameToStackFrame;\nexports.watchdogTimer = anr.watchdogTimer;\nexports.LRUMap = lru.LRUMap;\nexports._asyncNullishCoalesce = _asyncNullishCoalesce._asyncNullishCoalesce;\nexports._asyncOptionalChain = _asyncOptionalChain._asyncOptionalChain;\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete._asyncOptionalChainDelete;\nexports._nullishCoalesce = _nullishCoalesce._nullishCoalesce;\nexports._optionalChain = _optionalChain._optionalChain;\nexports._optionalChainDelete = _optionalChainDelete._optionalChainDelete;\nexports.addConsoleInstrumentationHandler = console.addConsoleInstrumentationHandler;\nexports.addClickKeypressInstrumentationHandler = dom.addClickKeypressInstrumentationHandler;\nexports.SENTRY_XHR_DATA_KEY = xhr.SENTRY_XHR_DATA_KEY;\nexports.addXhrInstrumentationHandler = xhr.addXhrInstrumentationHandler;\nexports.addFetchInstrumentationHandler = fetch.addFetchInstrumentationHandler;\nexports.addHistoryInstrumentationHandler = history.addHistoryInstrumentationHandler;\nexports.addGlobalErrorInstrumentationHandler = globalError.addGlobalErrorInstrumentationHandler;\nexports.addGlobalUnhandledRejectionInstrumentationHandler = globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler;\nexports.resetInstrumentationHandlers = _handlers.resetInstrumentationHandlers;\nexports.filenameIsInApp = nodeStackTrace.filenameIsInApp;\nexports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;\nexports.supportsHistory = supportsHistory.supportsHistory;\n//# sourceMappingURL=index.js.map\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "export const DEFAULT_ENVIRONMENT = 'production';\n", "import type { Event, EventHint, EventProcessor } from '@sentry/types';\nimport { SyncPromise, getGlobalSingleton, isThenable, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\n\n/**\n * Returns the global event processors.\n * @deprecated Global event processors will be removed in v8.\n */\nexport function getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @deprecated Use `addEventProcessor` instead. Global event processors will be removed in v8.\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  // eslint-disable-next-line deprecation/deprecation\n  getGlobalEventProcessors().push(callback);\n}\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  return new SyncPromise<Event | null>((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) as Event | null;\n\n      DEBUG_BUILD && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n", "import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n", "import type { Span, SpanJSON, SpanTimeInput, TraceContext } from '@sentry/types';\nimport { dropUndefinedKeys, generateSentryTraceHeader, timestampInSeconds } from '@sentry/utils';\nimport type { Span as SpanClass } from '../tracing/span';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, tags, origin } = spanToJSON(span);\n\n  return dropUndefinedKeys({\n    data,\n    op,\n    parent_span_id,\n    span_id,\n    status,\n    tags,\n    trace_id,\n    origin,\n  });\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n * Convert a span time input intp a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n * Note that all fields returned here are optional and need to be guarded against.\n *\n * Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n * This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n * And `spanToJSON` needs the Span class from `span.ts` to check here.\n * TODO v8: When we remove the deprecated stuff from `span.ts`, we can remove the circular dependency again.\n */\nexport function spanToJSON(span: Span): Partial<SpanJSON> {\n  if (spanIsSpanClass(span)) {\n    return span.getSpanJSON();\n  }\n\n  // Fallback: We also check for `.toJSON()` here...\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof span.toJSON === 'function') {\n    // eslint-disable-next-line deprecation/deprecation\n    return span.toJSON();\n  }\n\n  return {};\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSpanClass(span: Span): span is SpanClass {\n  return typeof (span as SpanClass).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  // eslint-disable-next-line no-bitwise\n  return Boolean(traceFlags & TRACE_FLAG_SAMPLED);\n}\n", "import type {\n  CaptureContext,\n  Client,\n  ClientOptions,\n  Event,\n  EventHint,\n  Scope as ScopeInterface,\n  ScopeContext,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\nimport { GLOBAL_OBJ, addExceptionMechanism, dateTimestampInSeconds, normalize, truncate, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalEventProcessors, notifyEventProcessors } from '../eventProcessors';\nimport { Scope, getGlobalScope } from '../scope';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\nimport { spanToJSON } from './spanUtils';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client && client.getEventProcessors ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Hub.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  // TODO (v8): Update this order to be: Global > Client > Scope\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // eslint-disable-next-line deprecation/deprecation\n    ...getGlobalEventProcessors(),\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  if (!('environment' in event)) {\n    event.environment = 'environment' in options ? environment : DEFAULT_ENVIRONMENT;\n  }\n\n  if (event.release === undefined && release !== undefined) {\n    event.release = release;\n  }\n\n  if (event.dist === undefined && dist !== undefined) {\n    event.dist = dist;\n  }\n\n  if (event.message) {\n    event.message = truncate(event.message, maxValueLength);\n  }\n\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = truncate(exception.value, maxValueLength);\n  }\n\n  const request = event.request;\n  if (request && request.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\nconst debugIdStackParserCache = new WeakMap<StackParser, Map<string, StackFrame[]>>();\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n\n  if (!debugIdMap) {\n    return;\n  }\n\n  let debugIdStackFramesCache: Map<string, StackFrame[]>;\n  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map<string, StackFrame[]>();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = Object.keys(debugIdMap).reduce<Record<string, string>>((acc, debugIdStackTrace) => {\n    let parsedStack: StackFrame[];\n    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n\n    for (let i = parsedStack.length - 1; i >= 0; i--) {\n      const stackFrame = parsedStack[i];\n      if (stackFrame.filename) {\n        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event!.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.keys(filenameDebugIdMap).forEach(filename => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id: filenameDebugIdMap[filename],\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      const data = spanToJSON(span).data;\n\n      if (data) {\n        // This is a bit weird, as we generally have `Span` instances here, but to be safe we do not assume so\n        // eslint-disable-next-line deprecation/deprecation\n        span.data = normalize(data, depth, maxBreadth);\n      }\n\n      return span;\n    });\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(\n  hint: CaptureContext | EventHint,\n): hint is ScopeInterface | ((scope: ScopeInterface) => ScopeInterface) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'requestSession',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n", "import type {\n  Breadcrumb,\n  BreadcrumbHint,\n  CaptureContext,\n  CheckIn,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  FinishedCheckIn,\n  MonitorConfig,\n  Primitive,\n  Scope as ScopeInterface,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Span,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { GLOBAL_OBJ, isThenable, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Hub } from './hub';\nimport { runWithAsyncContext } from './hub';\nimport { getCurrentHub, getIsolationScope } from './hub';\nimport type { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exception: any,\n  hint?: ExclusiveEventHintOrCaptureContext,\n): string {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param exception The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n *\n * @deprecated Use getCurrentScope() directly.\n */\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): ReturnType<Hub['addBreadcrumb']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().addBreadcrumb(breadcrumb, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: ScopeInterface | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: ScopeInterface | undefined, callback: (scope: Scope) => T]\n): T {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n    if (!scope) {\n      // eslint-disable-next-line deprecation/deprecation\n      return hub.withScope(callback);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    return hub.withScope(() => {\n      // eslint-disable-next-line deprecation/deprecation\n      hub.getStackTop().scope = scope as Scope;\n      return callback(scope as Scope);\n    });\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return hub.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * @param callback The callback in which the passed isolation scope is active. (Note: In environments without async\n * context strategy, the currently active isolation scope may change within execution of the callback.)\n * @returns The same value that `callback` returns.\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return runWithAsyncContext(() => {\n    return callback(getIsolationScope());\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback.\n *\n * @param span Spans started in the context of the provided callback will be children of this span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span, callback: (scope: Scope) => T): T {\n  return withScope(scope => {\n    // eslint-disable-next-line deprecation/deprecation\n    scope.setSpan(span);\n    return callback(scope);\n  });\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n *\n * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): ReturnType<Hub['startTransaction']> {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().startTransaction({ ...context }, customSamplingContext);\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  let maybePromiseResult: T;\n  try {\n    maybePromiseResult = callback();\n  } catch (e) {\n    finishCheckIn('error');\n    throw e;\n  }\n\n  if (isThenable(maybePromiseResult)) {\n    Promise.resolve(maybePromiseResult).then(\n      () => {\n        finishCheckIn('ok');\n      },\n      () => {\n        finishCheckIn('error');\n      },\n    );\n  } else {\n    finishCheckIn('ok');\n  }\n\n  return maybePromiseResult;\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n * @deprecated This function will be removed in the next major version of the Sentry SDK.\n */\nexport function lastEventId(): string | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getClient<C>();\n}\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getScope();\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    release,\n    environment,\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession && currentSession.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n  const client = getClient();\n  // TODO (v8): Remove currentScope and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session && client && client.captureSession) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n", "import type { Span } from '@sentry/types';\n\n/**\n * Returns the root span of a given span.\n *\n * As long as we use `Transaction`s internally, the returned root span\n * will be a `Transaction` but be aware that this might change in the future.\n *\n * If the given span has no root span or transaction, `undefined` is returned.\n */\nexport function getRootSpan(span: Span): Span | undefined {\n  // TODO (v8): Remove this check and just return span\n  // eslint-disable-next-line deprecation/deprecation\n  return span.transaction;\n}\n", "import type { Client, DynamicSamplingContext, Scope, Span, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient, getCurrentScope } from '../exports';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport { spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(\n  trace_id: string,\n  client: Client,\n  scope?: Scope,\n): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n  // TODO(v8): Remove segment from User\n  // eslint-disable-next-line deprecation/deprecation\n  const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id,\n  }) as DynamicSamplingContext;\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * A Span with a frozen dynamic sampling context.\n */\ntype TransactionWithV7FrozenDsc = Transaction & { _frozenDynamicSamplingContext?: DynamicSamplingContext };\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  // passing emit=false here to only emit later once the DSC is actually populated\n  const dsc = getDynamicSamplingContextFromClient(spanToJSON(span).trace_id || '', client, getCurrentScope());\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  const txn = getRootSpan(span) as TransactionWithV7FrozenDsc | undefined;\n  if (!txn) {\n    return dsc;\n  }\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  // For now we need to avoid breaking users who directly created a txn with a DSC, where this field is still set.\n  // @see Transaction class constructor\n  const v7FrozenDsc = txn && txn._frozenDynamicSamplingContext;\n  if (v7FrozenDsc) {\n    return v7FrozenDsc;\n  }\n\n  // TODO (v8): Replace txn.metadata with txn.attributes[]\n  // We can't do this yet because attributes aren't always set yet.\n  // eslint-disable-next-line deprecation/deprecation\n  const { sampleRate: maybeSampleRate, source } = txn.metadata;\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const jsonSpan = spanToJSON(txn);\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  if (source && source !== 'url') {\n    dsc.transaction = jsonSpan.description;\n  }\n\n  dsc.sampled = String(spanIsSampled(txn));\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n", "import type { Breadcrumb, Event, PropagationContext, ScopeData, Span } from '@sentry/types';\nimport { arrayify, dropUndefinedKeys } from '@sentry/utils';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport { getRootSpan } from './getRootSpan';\nimport { spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata, propagationContext } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata, propagationContext);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    // eslint-disable-next-line deprecation/deprecation\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n  mergeAndOverwriteScopeData(data, 'sdkProcessingMetadata', sdkProcessingMetadata);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    // eslint-disable-next-line deprecation/deprecation\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  if (mergeVal && Object.keys(mergeVal).length) {\n    // Clone object\n    data[prop] = { ...data[prop] };\n    for (const key in mergeVal) {\n      if (Object.prototype.hasOwnProperty.call(mergeVal, key)) {\n        data[prop][key] = mergeVal[key];\n      }\n    }\n  }\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    // eslint-disable-next-line deprecation/deprecation\n    transactionName,\n  } = data;\n\n  const cleanedExtra = dropUndefinedKeys(extra);\n  if (cleanedExtra && Object.keys(cleanedExtra).length) {\n    event.extra = { ...cleanedExtra, ...event.extra };\n  }\n\n  const cleanedTags = dropUndefinedKeys(tags);\n  if (cleanedTags && Object.keys(cleanedTags).length) {\n    event.tags = { ...cleanedTags, ...event.tags };\n  }\n\n  const cleanedUser = dropUndefinedKeys(user);\n  if (cleanedUser && Object.keys(cleanedUser).length) {\n    event.user = { ...cleanedUser, ...event.user };\n  }\n\n  const cleanedContexts = dropUndefinedKeys(contexts);\n  if (cleanedContexts && Object.keys(cleanedContexts).length) {\n    event.contexts = { ...cleanedContexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  if (transactionName) {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(\n  event: Event,\n  sdkProcessingMetadata: ScopeData['sdkProcessingMetadata'],\n  propagationContext: PropagationContext,\n): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n    propagationContext: propagationContext,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = { trace: spanToTraceContext(span), ...event.contexts };\n  const rootSpan = getRootSpan(span);\n  if (rootSpan) {\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n      ...event.sdkProcessingMetadata,\n    };\n    const transactionName = spanToJSON(rootSpan).description;\n    if (transactionName) {\n      event.tags = { transaction: transactionName, ...event.tags };\n    }\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (event.fingerprint && !event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n", "/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Client,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  PropagationContext,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  ScopeData,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, isPlainObject, logger, uuid4 } from '@sentry/utils';\n\nimport { getGlobalEventProcessors, notifyEventProcessors } from './eventProcessors';\nimport { updateSession } from './session';\nimport { applyScopeDataToEvent } from './utils/applyScopeDataToEvent';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * The global scope is kept in this module.\n * When accessing this via `getGlobalScope()` we'll make sure to set one if none is currently present.\n */\nlet globalScope: ScopeInterface | undefined;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /**\n   * Transaction Name\n   */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = generatePropagationContext();\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */\n  public static clone(scope?: Scope): Scope {\n    return scope ? scope.clone() : new Scope();\n  }\n\n  /**\n   * Clone this scope instance.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._span = this._span;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n\n    return newScope;\n  }\n\n  /** Update the client on the scope. */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   *\n   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.\n   */\n  public getClient(): Client | undefined {\n    return this._client;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      segment: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope for future events.\n   * @deprecated Use extra or tags instead.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the Span on the scope.\n   * @param span Span\n   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Returns the `Span` if there is one.\n   * @deprecated Use `getActiveSpan()` instead.\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Returns the `Transaction` attached to the scope (if there is one).\n   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this._span;\n    // Cannot replace with getRootSpan because getRootSpan returns a span, not a transaction\n    // Also, this method will be removed anyway.\n    // eslint-disable-next-line deprecation/deprecation\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n      if (captureContext._propagationContext) {\n        this._propagationContext = captureContext._propagationContext;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n      if (captureContext.propagationContext) {\n        this._propagationContext = captureContext.propagationContext;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    this._propagationContext = generatePropagationContext();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `getScopeData()` instead.\n   */\n  public getAttachments(): Attachment[] {\n    const data = this.getScopeData();\n\n    return data.attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  public getScopeData(): ScopeData {\n    const {\n      _breadcrumbs,\n      _attachments,\n      _contexts,\n      _tags,\n      _extra,\n      _user,\n      _level,\n      _fingerprint,\n      _eventProcessors,\n      _propagationContext,\n      _sdkProcessingMetadata,\n      _transactionName,\n      _span,\n    } = this;\n\n    return {\n      breadcrumbs: _breadcrumbs,\n      attachments: _attachments,\n      contexts: _contexts,\n      tags: _tags,\n      extra: _extra,\n      user: _user,\n      level: _level,\n      fingerprint: _fingerprint || [],\n      eventProcessors: _eventProcessors,\n      propagationContext: _propagationContext,\n      sdkProcessingMetadata: _sdkProcessingMetadata,\n      transactionName: _transactionName,\n      span: _span,\n    };\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   * @deprecated Use `applyScopeDataToEvent()` directly\n   */\n  public applyToEvent(\n    event: Event,\n    hint: EventHint = {},\n    additionalEventProcessors: EventProcessor[] = [],\n  ): PromiseLike<Event | null> {\n    applyScopeDataToEvent(event, this.getScopeData());\n\n    // TODO (v8): Update this order to be: Global > Client > Scope\n    const eventProcessors: EventProcessor[] = [\n      ...additionalEventProcessors,\n      // eslint-disable-next-line deprecation/deprecation\n      ...getGlobalEventProcessors(),\n      ...this._eventProcessors,\n    ];\n\n    return notifyEventProcessors(eventProcessors, event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optinal additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @param message The message to capture.\n   * @param level An optional severity level to report the message with.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Captures a manually created event for this scope and sends it to Sentry.\n   *\n   * @param exception The event to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): ScopeInterface {\n  if (!globalScope) {\n    globalScope = new Scope();\n  }\n\n  return globalScope;\n}\n\n/**\n * This is mainly needed for tests.\n * DO NOT USE this, as this is an internal API and subject to change.\n * @hidden\n */\nexport function setGlobalScope(scope: ScopeInterface | undefined): void {\n  globalScope = scope;\n}\n\nfunction generatePropagationContext(): PropagationContext {\n  return {\n    traceId: uuid4(),\n    spanId: uuid4().substring(16),\n  };\n}\n", "export const SDK_VERSION = '7.94.1';\n", "/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isThenable,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport { SDK_VERSION } from './version';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = parseFloat(SDK_VERSION);\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  private _isolationScope: Scope;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(\n    client?: Client,\n    scope?: Scope,\n    isolationScope?: Scope,\n    private readonly _version: number = API_VERSION,\n  ) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n      assignedScope.setClient(client);\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n      assignedIsolationScope.setClient(client);\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    this._stack = [{ scope: assignedScope }];\n\n    if (client) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.bindClient(client);\n    }\n\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   *\n   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.\n   */\n  public bindClient(client?: Client): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const top = this.getStackTop();\n    top.client = client;\n    top.scope.setClient(client);\n    // eslint-disable-next-line deprecation/deprecation\n    if (client && client.setupIntegrations) {\n      // eslint-disable-next-line deprecation/deprecation\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.getScope().clone();\n    // eslint-disable-next-line deprecation/deprecation\n    this.getStack().push({\n      // eslint-disable-next-line deprecation/deprecation\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public popScope(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.getStack().length <= 1) return false;\n    // eslint-disable-next-line deprecation/deprecation\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.withScope()` instead.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          return res;\n        },\n        e => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          throw e;\n        },\n      );\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    this.popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.getClient()` instead.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   *\n   * @deprecated Use `Sentry.getCurrentScope()` instead.\n   */\n  public getScope(): Scope {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * @deprecated Use `Sentry.getIsolationScope()` instead.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the scope stack for domains or the process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureException()` instead.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use  `Sentry.captureMessage()` instead.\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureEvent()` instead.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureEvent(event, { ...hint, event_id: eventId });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.addBreadcrumb()` instead.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    // TODO(v8): I know this comment doesn't make much sense because the hub will be deprecated but I still wanted to\n    // write it down. In theory, we would have to add the breadcrumbs to the isolation scope here, however, that would\n    // duplicate all of the breadcrumbs. There was the possibility of adding breadcrumbs to both, the isolation scope\n    // and the normal scope, and deduplicating it down the line in the event processing pipeline. However, that would\n    // have been very fragile, because the breadcrumb objects would have needed to keep their identity all throughout\n    // the event processing pipeline.\n    // In the new implementation, the top level `Sentry.addBreadcrumb()` should ONLY write to the isolation scope.\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setUser()` instead.\n   */\n  public setUser(user: User | null): void {\n    // TODO(v8): The top level `Sentry.setUser()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setUser(user);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTags()` instead.\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    // TODO(v8): The top level `Sentry.setTags()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTags(tags);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtras()` instead.\n   */\n  public setExtras(extras: Extras): void {\n    // TODO(v8): The top level `Sentry.setExtras()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtras(extras);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTag()` instead.\n   */\n  public setTag(key: string, value: Primitive): void {\n    // TODO(v8): The top level `Sentry.setTag()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTag(key, value);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtra()` instead.\n   */\n  public setExtra(key: string, extra: Extra): void {\n    // TODO(v8): The top level `Sentry.setExtra()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtra(key, extra);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setContext()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    // TODO(v8): The top level `Sentry.setContext()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setContext(name, context);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `getScope()` directly.\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      // eslint-disable-next-line deprecation/deprecation\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n   *\n   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n   * new child span within the transaction or any span, call the respective `.startChild()` method.\n   *\n   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n   *\n   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n   * finished child spans will be sent to Sentry.\n   *\n   * @param context Properties of the new `Transaction`.\n   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n   * default values). See {@link Options.tracesSampler}.\n   *\n   * @returns The transaction which was just started\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (DEBUG_BUILD && !result) {\n      // eslint-disable-next-line deprecation/deprecation\n      const client = this.getClient();\n      if (!client) {\n        logger.warn(\n          \"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\",\n        );\n      } else {\n        logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top level `captureSession` instead.\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      // eslint-disable-next-line deprecation/deprecation\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `endSession` instead.\n   */\n  public endSession(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `startSession` instead.\n   */\n  public startSession(context?: SessionContext): Session {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   *\n   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function\n   * only unnecessarily increased API surface but only wrapped accessing the option.\n   */\n  public shouldSendDefaultPii(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    DEBUG_BUILD && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n *\n * @deprecated Use `setCurrentClient()` instead.\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current exection context,\n * meaning that it will remain stable for the same Hub.\n */\nexport function getIsolationScope(): Scope {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getIsolationScope();\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n\n  if (\n    !hasHubOnCarrier(registry) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(registry).isOlderThan(API_VERSION)\n  ) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (\n    !hasHubOnCarrier(carrier) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(carrier).isOlderThan(API_VERSION)\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = parent.getClient();\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = parent.getScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const isolationScope = parent.getIsolationScope();\n    setHubOnCarrier(carrier, new Hub(client, scope.clone(), isolationScope.clone()));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n", "import type { Transaction } from '@sentry/types';\nimport { extractTraceparentData as _extractTraceparentData } from '@sentry/utils';\n\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\n\n/**\n * Grabs active transaction off scope.\n *\n * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n */\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = maybeHub || getCurrentHub();\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = hub.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  return scope.getTransaction() as T | undefined;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n *\n * @deprecated Import this function from `@sentry/utils` instead\n */\nexport const extractTraceparentData = _extractTraceparentData;\n", "import {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  logger,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\nlet errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n", "/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Use this attribute to represent the sample rate used for a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n", "/* eslint-disable max-lines */\nimport type {\n  Instrumenter,\n  Primitive,\n  Span as SpanInterface,\n  SpanAttributeValue,\n  SpanAttributes,\n  SpanContext,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n  TraceContext,\n  Transaction,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP } from '../semanticAttributes';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport {\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTraceContext,\n  spanToTraceHeader,\n} from '../utils/spanUtils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n    this.spans = [];\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      // eslint-disable-next-line deprecation/deprecation\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Tags for the span.\n   * @deprecated Use `getSpanAttributes(span)` instead.\n   */\n  public tags: { [key: string]: Primitive };\n\n  /**\n   * Data for the span.\n   * @deprecated Use `getSpanAttributes(span)` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any };\n\n  /**\n   * List of spans that were finalized\n   *\n   * @deprecated This property will no longer be public. Span recording will be handled internally.\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `Sentry.getRootSpan()` instead\n   */\n  public transaction?: Transaction;\n\n  /**\n   * The instrumenter that created this span.\n   *\n   * TODO (v8): This can probably be replaced by an `instanceOf` check of the span class.\n   *            the instrumenter can only be sentry or otel so we can check the span instance\n   *            to verify which one it is and remove this field entirely.\n   *\n   * @deprecated This field will be removed.\n   */\n  public instrumenter: Instrumenter;\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   */\n  public origin?: SpanOrigin;\n\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _sampled: boolean | undefined;\n  protected _name?: string;\n  protected _attributes: SpanAttributes;\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatusType | string;\n\n  private _logMessage?: string;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SpanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags ? { ...spanContext.tags } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data ? { ...spanContext.data } : {};\n    this._attributes = spanContext.attributes ? { ...spanContext.attributes } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.instrumenter = spanContext.instrumenter || 'sentry';\n    this.origin = spanContext.origin || 'manual';\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, spanContext.op);\n    }\n    if (spanContext.status) {\n      this._status = spanContext.status;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n  }\n\n  // This rule conflicts with another eslint rule :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * An alias for `description` of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name || '';\n  }\n\n  /**\n   * Update the name of the span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set name(name: string) {\n    this.updateName(name);\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get description(): string | undefined {\n    return this._name;\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set description(description: string | undefined) {\n    this._name = description;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated Use `spanContext().traceId` instead.\n   */\n  public get traceId(): string {\n    return this._traceId;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated You cannot update the traceId of a span after span creation.\n   */\n  public set traceId(traceId: string) {\n    this._traceId = traceId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated Use `spanContext().spanId` instead.\n   */\n  public get spanId(): string {\n    return this._spanId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated You cannot update the spanId of a span after span creation.\n   */\n  public set spanId(spanId: string) {\n    this._spanId = spanId;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated Use `isRecording()` instead.\n   */\n  public get sampled(): boolean | undefined {\n    return this._sampled;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated You cannot update the sampling decision of a span after span creation.\n   */\n  public set sampled(sampled: boolean | undefined) {\n    this._sampled = sampled;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `getSpanAttributes(span)` instead.\n   */\n  public get attributes(): SpanAttributes {\n    return this._attributes;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `setAttributes()` instead.\n   */\n  public set attributes(attributes: SpanAttributes) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get startTimestamp(): number {\n    return this._startTime;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated In v8, you will not be able to update the span start time after creation.\n   */\n  public set startTimestamp(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get endTimestamp(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Set the end time via `span.end()` instead.\n   */\n  public set endTimestamp(endTime: number | undefined) {\n    this._endTime = endTime;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `spanToJSON().status` instead to get the status.\n   */\n  public get status(): SpanStatusType | string | undefined {\n    return this._status;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `.setStatus()` instead to set or update the status.\n   */\n  public set status(status: SpanStatusType | string | undefined) {\n    this._status = status;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `spanToJSON().op` to read the op instead.\n   */\n  public get op(): string | undefined {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `startSpan()` functions to set or `span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'op')\n   *             to update the span instead.\n   */\n  public set op(op: string | undefined) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, op);\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * Also the `sampled` decision will be inherited.\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this._spanId,\n      sampled: this._sampled,\n      traceId: this._traceId,\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.spanRecorder = this.spanRecorder;\n    // eslint-disable-next-line deprecation/deprecation\n    if (childSpan.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    const rootSpan = getRootSpan(this);\n    // TODO: still set span.transaction here until we have a more permanent solution\n    // Probably similarly to the weakmap we hold in node-experimental\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.transaction = rootSpan as Transaction;\n\n    if (DEBUG_BUILD && rootSpan) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = spanToJSON(childSpan).description || '< unknown name >';\n      const idStr = rootSpan.spanContext().spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      logger.log(logMessage);\n      this._logMessage = logMessage;\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * Sets the tag attribute on the current span.\n   *\n   * Can also be used to unset a tag, by passing `undefined`.\n   *\n   * @param key Tag key\n   * @param value Tag value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  public setTag(key: string, value: Primitive): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setData(key: string, value: any): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): void {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): void {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setTag('http.status_code', String(httpStatus));\n    // eslint-disable-next-line deprecation/deprecation\n    this.setData('http.response.status_code', httpStatus);\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @deprecated Use `.updateName()` instead.\n   */\n  public setName(name: string): void {\n    this.updateName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).status === 'ok'` instead.\n   */\n  public isSuccess(): boolean {\n    return this._status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `.end()` instead.\n   */\n  public finish(endTimestamp?: number): void {\n    return this.end(endTimestamp);\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    const rootSpan = getRootSpan(this);\n    if (\n      DEBUG_BUILD &&\n      // Don't call this for transactions\n      rootSpan &&\n      rootSpan.spanContext().spanId !== this._spanId\n    ) {\n      const logMessage = this._logMessage;\n      if (logMessage) {\n        logger.log((logMessage as string).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public toTraceparent(): string {\n    return spanToTraceHeader(this);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON()` or access the fields directly instead.\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      endTimestamp: this._endTime,\n      // eslint-disable-next-line deprecation/deprecation\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this._sampled,\n      spanId: this._spanId,\n      startTimestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      traceId: this._traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Update the fields directly instead.\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data || {};\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n    this._endTime = spanContext.endTimestamp;\n    // eslint-disable-next-line deprecation/deprecation\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this._sampled = spanContext.sampled;\n    this._spanId = spanContext.spanId || this._spanId;\n    this._startTime = spanContext.startTimestamp || this._startTime;\n    this._status = spanContext.status;\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags || {};\n    this._traceId = spanContext.traceId || this._traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceContext()` util function instead.\n   */\n  public getTraceContext(): TraceContext {\n    return spanToTraceContext(this);\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined,\n      parent_span_id: this.parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this.origin,\n    });\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * Convert the object to JSON.\n   * @deprecated Use `spanToJSON(span)` instead.\n   */\n  public toJSON(): SpanJSON {\n    return this.getSpanJSON();\n  }\n\n  /**\n   * Get the merged data for this span.\n   * For now, this combines `data` and `attributes` together,\n   * until eventually we can ingest `attributes` directly.\n   */\n  private _getData():\n    | {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [key: string]: any;\n      }\n    | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    const { data, _attributes: attributes } = this;\n\n    const hasData = Object.keys(data).length > 0;\n    const hasAttributes = Object.keys(attributes).length > 0;\n\n    if (!hasData && !hasAttributes) {\n      return undefined;\n    }\n\n    if (hasData && hasAttributes) {\n      return {\n        ...data,\n        ...attributes,\n      };\n    }\n\n    return hasData ? data : attributes;\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n", "import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  MeasurementUnit,\n  Measurements,\n  SpanTimeInput,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionEvent,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport { spanTimeInputToSeconds, spanToJSON, spanToTraceContext } from '../utils/spanUtils';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  /**\n   * The reference to the current hub.\n   */\n  public _hub: Hub;\n\n  protected _name: string;\n\n  private _measurements: Measurements;\n\n  private _contexts: Contexts;\n\n  private _trimEnd?: boolean;\n\n  // DO NOT yet remove this property, it is used in a hack for v7 backwards compatibility.\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined;\n\n  private _metadata: Partial<TransactionMetadata>;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   *\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n    this._measurements = {};\n    this._contexts = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this._metadata = {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.metadata,\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    // TODO (v8): Replace this with another way to set the root span\n    // eslint-disable-next-line deprecation/deprecation\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this._metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  // This sadly conflicts with the getter/setter ordering :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * Getter for `name` property.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n  public set name(newName: string) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Get the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public get metadata(): TransactionMetadata {\n    // We merge attributes in for backwards compatibility\n    return {\n      // Defaults\n      // eslint-disable-next-line deprecation/deprecation\n      source: 'custom',\n      spanMetadata: {},\n\n      // Legacy metadata\n      ...this._metadata,\n\n      // From attributes\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] && {\n        source: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionMetadata['source'],\n      }),\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] && {\n        sampleRate: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] as TransactionMetadata['sampleRate'],\n      }),\n    };\n  }\n\n  /**\n   * Update the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public set metadata(metadata: TransactionMetadata) {\n    this._metadata = metadata;\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `.updateName()` and `.setAttribute()` instead.\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n  }\n\n  /** @inheritdoc */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set the context of a transaction event.\n   * @deprecated Use either `.setAttribute()`, or set the context on the scope before creating the transaction.\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top-level `setMeasurement()` instead.\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * Store metadata on this transaction.\n   * @deprecated Use attributes or store data on the scope instead.\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this._metadata = { ...this._metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public end(endTimestamp?: SpanTimeInput): string | undefined {\n    const timestampInS = spanTimeInputToSeconds(endTimestamp);\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this._name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n\n    this._name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   *\n   * @deprecated Use top-level `getDynamicSamplingContextFromSpan` instead.\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    return getDynamicSamplingContextFromSpan(this);\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  protected _finishTransaction(endTimestamp?: number): TransactionEvent | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this._endTime !== undefined) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const finishedSpans = this.spanRecorder\n      ? // eslint-disable-next-line deprecation/deprecation\n        this.spanRecorder.spans.filter(span => span !== this && spanToJSON(span).timestamp)\n      : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      const endTimes = finishedSpans.map(span => spanToJSON(span).timestamp).filter(Boolean) as number[];\n      this._endTime = endTimes.reduce((prev, current) => {\n        return prev > current ? prev : current;\n      });\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { metadata } = this;\n    // eslint-disable-next-line deprecation/deprecation\n    const { source } = metadata;\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this),\n      },\n      // TODO: Pass spans serialized via `spanToJSON()` here instead in v8.\n      spans: finishedSpans,\n      start_timestamp: this._startTime,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n      },\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this._name}.`);\n\n    return transaction;\n  }\n}\n", "/* eslint-disable max-lines */\nimport type { SpanTimeInput, TransactionContext } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport type { Span } from './span';\nimport { SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  heartbeatInterval: 5000,\n};\n\nconst FINISH_REASON_TAG = 'finishReason';\n\nconst IDLE_TRANSACTION_FINISH_REASONS = [\n  'heartbeatFailed',\n  'idleTimeout',\n  'documentHidden',\n  'finalTimeout',\n  'externalFinish',\n  'cancelled',\n];\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string,\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanContext().spanId !== this.transactionSpanId) {\n      // We patch span.end() to pop an activity after setting an endTimestamp.\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalEnd = span.end;\n      span.end = (...rest: unknown[]) => {\n        this._popActivity(span.spanContext().spanId);\n        return originalEnd.apply(span, rest);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (spanToJSON(span).timestamp === undefined) {\n        this._pushActivity(span.spanContext().spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean>;\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean;\n\n  // Idle timeout was canceled and we should finish the transaction with the last span end.\n  private _idleTimeoutCanceledPermanently: boolean;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[];\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  private _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  private _finishReason: (typeof IDLE_TRANSACTION_FINISH_REASONS)[number];\n\n  private _autoFinishAllowed: boolean;\n\n  /**\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */\n    private readonly _idleTimeout: number = TRACING_DEFAULTS.idleTimeout,\n    /**\n     * The final value in ms that a transaction cannot exceed\n     */\n    private readonly _finalTimeout: number = TRACING_DEFAULTS.finalTimeout,\n    private readonly _heartbeatInterval: number = TRACING_DEFAULTS.heartbeatInterval,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n    /**\n     * When set to `true`, will disable the idle timeout (`_idleTimeout` option) and heartbeat mechanisms (`_heartbeatInterval`\n     * option) until the `sendAutoFinishSignal()` method is called. The final timeout mechanism (`_finalTimeout` option)\n     * will not be affected by this option, meaning the transaction will definitely be finished when the final timeout is\n     * reached, no matter what this option is configured to.\n     *\n     * Defaults to `false`.\n     */\n    delayAutoFinishUntilSignal: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    this.activities = {};\n    this._heartbeatCounter = 0;\n    this._finished = false;\n    this._idleTimeoutCanceledPermanently = false;\n    this._beforeFinishCallbacks = [];\n    this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[4];\n    this._autoFinishAllowed = !delayAutoFinishUntilSignal;\n\n    if (_onScope) {\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      DEBUG_BUILD && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanContext().spanId}`);\n      // eslint-disable-next-line deprecation/deprecation\n      _idleHub.getScope().setSpan(this);\n    }\n\n    if (!delayAutoFinishUntilSignal) {\n      this._restartIdleTimeout();\n    }\n\n    setTimeout(() => {\n      if (!this._finished) {\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];\n        this.end();\n      }\n    }, this._finalTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public end(endTimestamp?: SpanTimeInput): string | undefined {\n    const endTimestampInS = spanTimeInputToSeconds(endTimestamp);\n\n    this._finished = true;\n    this.activities = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.op === 'ui.action.click') {\n      this.setAttribute(FINISH_REASON_TAG, this._finishReason);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.spanRecorder) {\n      DEBUG_BUILD &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestampInS * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestampInS);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanContext().spanId === this.spanContext().spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!spanToJSON(span).timestamp) {\n          span.setStatus('cancelled');\n          span.end(endTimestampInS);\n          DEBUG_BUILD &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const { start_timestamp: startTime, timestamp: endTime } = spanToJSON(span);\n        const spanStartedBeforeTransactionFinish = startTime && startTime < endTimestampInS;\n\n        // Add a delta with idle timeout so that we prevent false positives\n        const timeoutWithMarginOfError = (this._finalTimeout + this._idleTimeout) / 1000;\n        const spanEndedBeforeFinalTimeout = endTime && startTime && endTime - startTime < timeoutWithMarginOfError;\n\n        if (DEBUG_BUILD) {\n          const stringifiedSpan = JSON.stringify(span, undefined, 2);\n          if (!spanStartedBeforeTransactionFinish) {\n            logger.log('[Tracing] discarding Span since it happened after Transaction was finished', stringifiedSpan);\n          } else if (!spanEndedBeforeFinalTimeout) {\n            logger.log('[Tracing] discarding Span since it finished after Transaction final timeout', stringifiedSpan);\n          }\n        }\n\n        return spanStartedBeforeTransactionFinish && spanEndedBeforeFinalTimeout;\n      });\n\n      DEBUG_BUILD && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      DEBUG_BUILD && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      // eslint-disable-next-line deprecation/deprecation\n      const scope = this._idleHub.getScope();\n      // eslint-disable-next-line deprecation/deprecation\n      if (scope.getTransaction() === this) {\n        // eslint-disable-next-line deprecation/deprecation\n        scope.setSpan(undefined);\n      }\n    }\n\n    return super.end(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets executed before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanContext().spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      DEBUG_BUILD && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   * @param restartOnChildSpanChange Default is `true`.\n   *                                 If set to false the transaction will end\n   *                                 with the last child span.\n   */\n  public cancelIdleTimeout(\n    endTimestamp?: Parameters<IdleTransaction['end']>[0],\n    {\n      restartOnChildSpanChange,\n    }: {\n      restartOnChildSpanChange?: boolean;\n    } = {\n      restartOnChildSpanChange: true,\n    },\n  ): void {\n    this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;\n    if (this._idleTimeoutID) {\n      clearTimeout(this._idleTimeoutID);\n      this._idleTimeoutID = undefined;\n\n      if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n        this.end(endTimestamp);\n      }\n    }\n  }\n\n  /**\n   * Temporary method used to externally set the transaction's `finishReason`\n   *\n   * ** WARNING**\n   * This is for the purpose of experimentation only and will be removed in the near future, do not use!\n   *\n   * @internal\n   *\n   */\n  public setFinishReason(reason: string): void {\n    this._finishReason = reason;\n  }\n\n  /**\n   * Permits the IdleTransaction to automatically end itself via the idle timeout and heartbeat mechanisms when the `delayAutoFinishUntilSignal` option was set to `true`.\n   */\n  public sendAutoFinishSignal(): void {\n    if (!this._autoFinishAllowed) {\n      DEBUG_BUILD && logger.log('[Tracing] Received finish signal for idle transaction.');\n      this._restartIdleTimeout();\n      this._autoFinishAllowed = true;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  private _restartIdleTimeout(endTimestamp?: Parameters<IdleTransaction['end']>[0]): void {\n    this.cancelIdleTimeout();\n    this._idleTimeoutID = setTimeout(() => {\n      if (!this._finished && Object.keys(this.activities).length === 0) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];\n        this.end(endTimestamp);\n      }\n    }, this._idleTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    this.cancelIdleTimeout(undefined, { restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently });\n    DEBUG_BUILD && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      DEBUG_BUILD && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const endTimestamp = timestampInSeconds();\n      if (this._idleTimeoutCanceledPermanently) {\n        if (this._autoFinishAllowed) {\n          this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n          this.end(endTimestamp);\n        }\n      } else {\n        // We need to add the timeout here to have the real endtimestamp of the transaction\n        // Remember timestampInSeconds is in seconds, timeout is in ms\n        this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);\n      }\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter++;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      if (this._autoFinishAllowed) {\n        DEBUG_BUILD && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];\n        this.end();\n      }\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    DEBUG_BUILD && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, this._heartbeatInterval);\n  }\n}\n", "import type { Options } from '@sentry/types';\n\nimport { getClient } from '../exports';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const client = getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\n", "import type { Options, SamplingContext } from '@sentry/types';\nimport { isNaN, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { spanToJSON } from '../utils/spanUtils';\nimport type { Transaction } from './transaction';\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * This method muttes the given `transaction` and will set the `sampled` value on it.\n * It returns the same transaction, for convenience.\n */\nexport function sampleTransaction<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  // eslint-disable-next-line deprecation/deprecation\n  if (transaction.sampled !== undefined) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(transaction.sampled));\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  // eslint-disable-next-line deprecation/deprecation\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  // eslint-disable-next-line deprecation/deprecation\n  if (!transaction.sampled) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  DEBUG_BUILD &&\n    // eslint-disable-next-line deprecation/deprecation\n    logger.log(`[Tracing] starting ${transaction.op} transaction - ${spanToJSON(transaction).description}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n", "import type { ClientOptions, CustomSamplingContext, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getMainCarrier } from '../hub';\nimport { spanToTraceHeader } from '../utils/spanUtils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { sampleTransaction } from './sampling';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = this.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const span = scope.getSpan();\n\n  return span\n    ? {\n        'sentry-trace': spanToTraceHeader(span),\n      }\n    : {};\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    DEBUG_BUILD &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    // eslint-disable-next-line deprecation/deprecation\n    transactionContext.sampled = false;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sampleTransaction(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n  delayAutoFinishUntilSignal: boolean = false,\n): IdleTransaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new IdleTransaction(\n    transactionContext,\n    hub,\n    idleTimeout,\n    finalTimeout,\n    heartbeatInterval,\n    onScope,\n    delayAutoFinishUntilSignal,\n  );\n  transaction = sampleTransaction(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nexport function addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n\n  registerErrorInstrumentation();\n}\n", "/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n", "import { isThenable } from '@sentry/utils';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(\n  fn: Fn,\n  onError: (error: unknown) => void,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally: () => void = () => {},\n): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n", "import type {\n  Instrumenter,\n  Primitive,\n  Scope,\n  Span,\n  SpanTimeInput,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport type { SpanAttributes } from '@sentry/types';\nimport type { SpanOrigin } from '@sentry/types';\nimport type { TransactionSource } from '@sentry/types';\nimport { dropUndefinedKeys, logger, tracingContextFromHeaders } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getCurrentScope, withScope } from '../exports';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\n\ninterface StartSpanOptions extends TransactionContext {\n  /** A manually specified start time for the created `Span` object. */\n  startTime?: SpanTimeInput;\n\n  /** If defined, start this span off this scope instead off the current scope. */\n  scope?: Scope;\n\n  /** The name of the span. */\n  name: string;\n\n  /** An op for the span. This is a categorization for spans. */\n  op?: string;\n\n  /** The origin of the span - if it comes from auto instrumenation or manual instrumentation. */\n  origin?: SpanOrigin;\n\n  /** Attributes for the span. */\n  attributes?: SpanAttributes;\n\n  // All remaining fields are deprecated\n\n  /**\n   * @deprecated Manually set the end timestamp instead.\n   */\n  trimEnd?: boolean;\n\n  /**\n   * @deprecated This cannot be set manually anymore.\n   */\n  parentSampled?: boolean;\n\n  /**\n   * @deprecated Use attributes or set data on scopes instead.\n   */\n  metadata?: Partial<TransactionMetadata>;\n\n  /**\n   * The name thingy.\n   * @deprecated Use `name` instead.\n   */\n  description?: string;\n\n  /**\n   * @deprecated Use `span.setStatus()` instead.\n   */\n  status?: string;\n\n  /**\n   * @deprecated Use `scope` instead.\n   */\n  parentSpanId?: string;\n\n  /**\n   * @deprecated You cannot manually set the span to sampled anymore.\n   */\n  sampled?: boolean;\n\n  /**\n   * @deprecated You cannot manually set the spanId anymore.\n   */\n  spanId?: string;\n\n  /**\n   * @deprecated You cannot manually set the traceId anymore.\n   */\n  traceId?: string;\n\n  /**\n   * @deprecated Use an attribute instead.\n   */\n  source?: TransactionSource;\n\n  /**\n   * @deprecated Use attributes or set tags on the scope instead.\n   */\n  tags?: { [key: string]: Primitive };\n\n  /**\n   * @deprecated Use attributes instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data?: { [key: string]: any };\n\n  /**\n   * @deprecated Use `startTime` instead.\n   */\n  startTimestamp?: number;\n\n  /**\n   * @deprecated Use `span.end()` instead.\n   */\n  endTimestamp?: number;\n\n  /**\n   * @deprecated You cannot set the instrumenter manually anymore.\n   */\n  instrumenter?: Instrumenter;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n *\n * @deprecated Use `startSpan` instead.\n */\nexport function trace<T>(\n  context: TransactionContext,\n  callback: (span?: Span) => T,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onError: (error: unknown, span?: Span) => void = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  afterFinish: () => void = () => {},\n): T {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const scope = getCurrentScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const parentSpan = scope.getSpan();\n\n  const ctx = normalizeContext(context);\n  const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(activeSpan);\n\n  return handleCallbackErrors(\n    () => callback(activeSpan),\n    error => {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(error, activeSpan);\n    },\n    () => {\n      activeSpan && activeSpan.end();\n      // eslint-disable-next-line deprecation/deprecation\n      scope.setSpan(parentSpan);\n      afterFinish();\n    },\n  );\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpan<T>(context: StartSpanOptions, callback: (span: Span | undefined) => T): T {\n  const ctx = normalizeContext(context);\n\n  return withScope(context.scope, scope => {\n    // eslint-disable-next-line deprecation/deprecation\n    const hub = getCurrentHub();\n    // eslint-disable-next-line deprecation/deprecation\n    const parentSpan = scope.getSpan();\n\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    // eslint-disable-next-line deprecation/deprecation\n    scope.setSpan(activeSpan);\n\n    return handleCallbackErrors(\n      () => callback(activeSpan),\n      () => {\n        // Only update the span status if it hasn't been changed yet\n        if (activeSpan) {\n          const { status } = spanToJSON(activeSpan);\n          if (!status || status === 'ok') {\n            activeSpan.setStatus('internal_error');\n          }\n        }\n      },\n      () => activeSpan && activeSpan.end(),\n    );\n  });\n}\n\n/**\n * @deprecated Use {@link startSpan} instead.\n */\nexport const startActiveSpan = startSpan;\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpanManual<T>(\n  context: StartSpanOptions,\n  callback: (span: Span | undefined, finish: () => void) => T,\n): T {\n  const ctx = normalizeContext(context);\n\n  return withScope(context.scope, scope => {\n    // eslint-disable-next-line deprecation/deprecation\n    const hub = getCurrentHub();\n    // eslint-disable-next-line deprecation/deprecation\n    const parentSpan = scope.getSpan();\n\n    const activeSpan = createChildSpanOrTransaction(hub, parentSpan, ctx);\n    // eslint-disable-next-line deprecation/deprecation\n    scope.setSpan(activeSpan);\n\n    function finishAndSetSpan(): void {\n      activeSpan && activeSpan.end();\n    }\n\n    return handleCallbackErrors(\n      () => callback(activeSpan, finishAndSetSpan),\n      () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        if (activeSpan && activeSpan.isRecording()) {\n          const { status } = spanToJSON(activeSpan);\n          if (!status || status === 'ok') {\n            activeSpan.setStatus('internal_error');\n          }\n        }\n      },\n    );\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startInactiveSpan(context: StartSpanOptions): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const ctx = normalizeContext(context);\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const parentSpan = context.scope\n    ? // eslint-disable-next-line deprecation/deprecation\n      context.scope.getSpan()\n    : getActiveSpan();\n  return parentSpan\n    ? // eslint-disable-next-line deprecation/deprecation\n      parentSpan.startChild(ctx)\n    : // eslint-disable-next-line deprecation/deprecation\n      hub.startTransaction(ctx);\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentScope().getSpan();\n}\n\nexport function continueTrace({\n  sentryTrace,\n  baggage,\n}: {\n  sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n  baggage: Parameters<typeof tracingContextFromHeaders>[1];\n}): Partial<TransactionContext>;\nexport function continueTrace<V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback: (transactionContext: Partial<TransactionContext>) => V,\n): V;\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers,\n * or in the browser from `<meta name=\"sentry-trace\">` and `<meta name=\"baggage\">` HTML tags.\n *\n * The callback receives a transactionContext that may be used for `startTransaction` or `startSpan`.\n */\nexport function continueTrace<V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback?: (transactionContext: Partial<TransactionContext>) => V,\n): V | Partial<TransactionContext> {\n  const currentScope = getCurrentScope();\n\n  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n    sentryTrace,\n    baggage,\n  );\n\n  currentScope.setPropagationContext(propagationContext);\n\n  if (DEBUG_BUILD && traceparentData) {\n    logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n  }\n\n  const transactionContext: Partial<TransactionContext> = {\n    ...traceparentData,\n    metadata: dropUndefinedKeys({\n      dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n    }),\n  };\n\n  if (!callback) {\n    return transactionContext;\n  }\n\n  return callback(transactionContext);\n}\n\nfunction createChildSpanOrTransaction(\n  hub: Hub,\n  parentSpan: Span | undefined,\n  ctx: TransactionContext,\n): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n  return parentSpan\n    ? // eslint-disable-next-line deprecation/deprecation\n      parentSpan.startChild(ctx)\n    : // eslint-disable-next-line deprecation/deprecation\n      hub.startTransaction(ctx);\n}\n\n/**\n * This converts StartSpanOptions to TransactionContext.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n *\n * Eventually the StartSpanOptions will be more aligned with OpenTelemetry.\n */\nfunction normalizeContext(context: StartSpanOptions): TransactionContext {\n  if (context.startTime) {\n    const ctx: TransactionContext & { startTime?: SpanTimeInput } = { ...context };\n    ctx.startTimestamp = spanTimeInputToSeconds(context.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return context;\n}\n", "import type { MeasurementUnit } from '@sentry/types';\n\nimport { getActiveTransaction } from './utils';\n\n/**\n * Adds a measurement to the current active transaction.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const transaction = getActiveTransaction();\n  if (transaction) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setMeasurement(name, value, unit);\n  }\n}\n", "import type {\n  DsnComponents,\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport {\n  createEnvelope,\n  createEventEnvelopeHeaders,\n  dsnToString,\n  getSdkMetadataForEnvelopeHeader,\n} from '@sentry/utils';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjut a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [{ type: eventType }, event];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n", "import type {\n  AggregationCounts,\n  Client,\n  RequestSessionStatus,\n  SessionAggregates,\n  SessionFlusherLike,\n} from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { getCurrentScope } from './exports';\n\ntype ReleaseHealthAttributes = {\n  environment?: string;\n  release: string;\n};\n\n/**\n * @inheritdoc\n */\nexport class SessionFlusher implements SessionFlusherLike {\n  public readonly flushTimeout: number;\n  private _pendingAggregates: Record<number, AggregationCounts>;\n  private _sessionAttrs: ReleaseHealthAttributes;\n  private _intervalId: ReturnType<typeof setInterval>;\n  private _isEnabled: boolean;\n  private _client: Client;\n\n  public constructor(client: Client, attrs: ReleaseHealthAttributes) {\n    this._client = client;\n    this.flushTimeout = 60;\n    this._pendingAggregates = {};\n    this._isEnabled = true;\n\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  public flush(): void {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  public getSessionAggregates(): SessionAggregates {\n    const aggregates: AggregationCounts[] = Object.keys(this._pendingAggregates).map((key: string) => {\n      return this._pendingAggregates[parseInt(key)];\n    });\n\n    const sessionAggregates: SessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates,\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  public close(): void {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  public incrementSessionStatusCount(): void {\n    if (!this._isEnabled) {\n      return;\n    }\n    const scope = getCurrentScope();\n    const requestSession = scope.getRequestSession();\n\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      scope.setRequestSession(undefined);\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  private _incrementSessionStatusCount(status: RequestSessionStatus, date: Date): number {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    const aggregationCounts: AggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\n", "import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n", "import type {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  IntegrationFnResult,\n  Options,\n} from '@sentry/types';\nimport { arrayify, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { addGlobalEventProcessor } from './eventProcessors';\nimport { getClient } from './exports';\nimport { getCurrentHub } from './hub';\n\ndeclare module '@sentry/types' {\n  interface Integration {\n    isDefaultInstance?: boolean;\n  }\n}\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach(currentInstance => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.keys(integrationsByName).map(k => integrationsByName[k]);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Pick<Options, 'defaultIntegrations' | 'integrations'>): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = findIndex(finalIntegrations, integration => integration.name === 'Debug');\n  if (debugIndex !== -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1) {\n    // eslint-disable-next-line deprecation/deprecation\n    integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (client.on && typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (client.addEventProcessor && typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current hub's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client || !client.addIntegration) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex<T>(arr: T[], callback: (item: T) => boolean): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i]) === true) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Convert a new integration function to the legacy class syntax.\n * In v8, we can remove this and instead export the integration functions directly.\n *\n * @deprecated This will be removed in v8!\n */\nexport function convertIntegrationFnToClass<Fn extends IntegrationFn>(\n  name: string,\n  fn: Fn,\n): IntegrationClass<Integration> {\n  return Object.assign(\n    function ConvertedIntegration(...args: Parameters<Fn>): Integration {\n      return fn(...args);\n    },\n    { id: name },\n  ) as unknown as IntegrationClass<Integration>;\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => IntegrationFnResult {\n  return fn;\n}\n", "export const COUNTER_METRIC_TYPE = 'c' as const;\nexport const GAUGE_METRIC_TYPE = 'g' as const;\nexport const SET_METRIC_TYPE = 's' as const;\nexport const DISTRIBUTION_METRIC_TYPE = 'd' as const;\n\n/**\n * Normalization regex for metric names and metric tag names.\n *\n * This enforces that names and tag keys only contain alphanumeric characters,\n * underscores, forward slashes, periods, and dashes.\n *\n * See: https://develop.sentry.dev/sdk/metrics/#normalization\n */\nexport const NAME_AND_TAG_KEY_NORMALIZATION_REGEX = /[^a-zA-Z0-9_/.-]+/g;\n\n/**\n * Normalization regex for metric tag values.\n *\n * This enforces that values only contain words, digits, or the following\n * special characters: _:/@.{}[\\]$-\n *\n * See: https://develop.sentry.dev/sdk/metrics/#normalization\n */\nexport const TAG_VALUE_NORMALIZATION_REGEX = /[^\\w\\d_:/@.{}[\\]$-]+/g;\n\n/**\n * This does not match spec in https://develop.sentry.dev/sdk/metrics\n * but was chosen to optimize for the most common case in browser environments.\n */\nexport const DEFAULT_BROWSER_FLUSH_INTERVAL = 5000;\n\n/**\n * SDKs are required to bucket into 10 second intervals (rollup in seconds)\n * which is the current lower bound of metric accuracy.\n */\nexport const DEFAULT_FLUSH_INTERVAL = 10000;\n\n/**\n * The maximum number of metrics that should be stored in memory.\n */\nexport const MAX_WEIGHT = 10000;\n", "import type { MeasurementUnit, MetricBucketItem, Primitive } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { NAME_AND_TAG_KEY_NORMALIZATION_REGEX, TAG_VALUE_NORMALIZATION_REGEX } from './constants';\nimport type { MetricType } from './types';\n\n/**\n * Generate bucket key from metric properties.\n */\nexport function getBucketKey(\n  metricType: MetricType,\n  name: string,\n  unit: MeasurementUnit,\n  tags: Record<string, string>,\n): string {\n  const stringifiedTags = Object.entries(dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nexport function simpleHash(s: string): number {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nexport function serializeMetricBuckets(metricBucketItems: MetricBucketItem[]): string {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/**\n * Sanitizes tags.\n */\nexport function sanitizeTags(unsanitizedTags: Record<string, Primitive>): Record<string, string> {\n  const tags: Record<string, string> = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = key.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n      tags[sanitizedKey] = String(unsanitizedTags[key]).replace(TAG_VALUE_NORMALIZATION_REGEX, '_');\n    }\n  }\n  return tags;\n}\n", "import type { DsnComponents, MetricBucketItem, SdkMetadata, StatsdEnvelope, StatsdItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\nimport { serializeMetricBuckets } from './utils';\n\n/**\n * Create envelope from a metric aggregate.\n */\nexport function createMetricEnvelope(\n  metricBucketItems: Array<MetricBucketItem>,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): StatsdEnvelope {\n  const headers: StatsdEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return createEnvelope<StatsdEnvelope>(headers, [item]);\n}\n\nfunction createMetricEnvelopeItem(metricBucketItems: MetricBucketItem[]): StatsdItem {\n  const payload = serializeMetricBuckets(metricBucketItems);\n  const metricHeaders: StatsdItem[0] = {\n    type: 'statsd',\n    length: payload.length,\n  };\n  return [metricHeaders, payload];\n}\n", "/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  DynamicSamplingContext,\n  Envelope,\n  ErrorEvent,\n  Event,\n  EventDropReason,\n  EventHint,\n  EventProcessor,\n  FeedbackEvent,\n  Integration,\n  IntegrationClass,\n  MetricBucketItem,\n  MetricsAggregator,\n  Outcome,\n  ParameterizedString,\n  PropagationContext,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionEvent,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport {\n  SentryError,\n  SyncPromise,\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  isParameterizedString,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport { getClient } from './exports';\nimport { getIsolationScope } from './hub';\nimport type { IntegrationIndex } from './integration';\nimport { setupIntegration, setupIntegrations } from './integration';\nimport { createMetricEnvelope } from './metrics/envelope';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport { getDynamicSamplingContextFromClient } from './tracing/dynamicSamplingContext';\nimport { prepareEvent } from './utils/prepareEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /**\n   * A reference to a metrics aggregator\n   *\n   * @experimental Note this is alpha API. It may experience breaking changes in the future.\n   */\n  public metricsAggregator?: MetricsAggregator;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._integrationsInitialized = false;\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!(typeof session.release === 'string')) {\n      DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      if (this.metricsAggregator) {\n        this.metricsAggregator.flush();\n      }\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      if (this.metricsAggregator) {\n        this.metricsAggregator.close();\n      }\n      return result;\n    });\n  }\n\n  /** Get all installed event processors. */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /** @inheritDoc */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * This is an internal function to setup all integrations that should run on the client.\n   * @deprecated Use `client.init()` instead.\n   */\n  public setupIntegrations(forceInitialize?: boolean): void {\n    if ((forceInitialize && !this._integrationsInitialized) || (this._isEnabled() && !this._integrationsInitialized)) {\n      this._setupIntegrations();\n    }\n  }\n\n  /** @inheritdoc */\n  public init(): void {\n    if (this._isEnabled()) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   * @deprecated Use `getIntegrationByName()` instead.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this.getIntegrationByName(integrationId);\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Returns the client's instance of the given integration class, it any.\n   * @deprecated Use `getIntegrationByName()` instead.\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addIntegration(integration: Integration): void {\n    setupIntegration(this, integration, this._integrations);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(\n        env,\n        createAttachmentEnvelopeItem(\n          attachment,\n          this._options.transportOptions && this._options.transportOptions.textEncoder,\n        ),\n      );\n    }\n\n    const promise = this._sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(env);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, _event?: Event): void {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureAggregateMetrics(metricBucketItems: Array<MetricBucketItem>): void {\n    DEBUG_BUILD && logger.log(`Flushing aggregated metrics, number of metrics: ${metricBucketItems.length}`);\n    const metricsEnvelope = createMetricEnvelope(\n      metricBucketItems,\n      this._dsn,\n      this._options._metadata,\n      this._options.tunnel,\n    );\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(metricsEnvelope);\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n  /* eslint-disable @typescript-eslint/unified-signatures */\n\n  /** @inheritdoc */\n  public on(hook: 'startTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'finishTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse | void) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'otelSpanEnd', callback: (otelSpan: unknown, mutableOptions: { drop: boolean }) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay: boolean }) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: string, callback: unknown): void {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-expect-error We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n  public emit(hook: 'startTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'finishTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse | void): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'otelSpanEnd', otelSpan: unknown, mutableOptions: { drop: boolean }): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay: boolean }): void;\n\n  /** @inheritdoc */\n  public emit(hook: string, ...rest: unknown[]): void {\n    if (this._hooks[hook]) {\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    this._integrations = setupIntegrations(this, this._options.integrations);\n    // TODO v8: We don't need this flag anymore\n    this._integrationsInitialized = true;\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    scope?: Scope,\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    return prepareEvent(options, event, hint, scope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      // If a trace context is not set on the event, we use the propagationContext set on the event to\n      // generate a trace context. If the propagationContext does not have a dynamic sampling context, we\n      // also generate one for it.\n      const { propagationContext } = evt.sdkProcessingMetadata || {};\n      const trace = evt.contexts && evt.contexts.trace;\n      if (!trace && propagationContext) {\n        const { traceId: trace_id, spanId, parentSpanId, dsc } = propagationContext as PropagationContext;\n        evt.contexts = {\n          trace: {\n            trace_id,\n            span_id: spanId,\n            parent_span_id: parentSpanId,\n          },\n          ...evt.contexts,\n        };\n\n        const dynamicSamplingContext = dsc ? dsc : getDynamicSamplingContextFromClient(trace_id, this, scope);\n\n        evt.sdkProcessingMetadata = {\n          dynamicSamplingContext,\n          ...evt.sdkProcessingMetadata,\n        };\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory: DataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> | void {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      DEBUG_BUILD && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/**\n * Add an event processor to the current client.\n * This event processor will run for all events processed by this client.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  const client = getClient();\n\n  if (!client || !client.addEventProcessor) {\n    return;\n  }\n\n  client.addEventProcessor(callback);\n}\n", "import type {\n  CheckInEnvelope,\n  CheckInItem,\n  DsnComponents,\n  DynamicSamplingContext,\n  SdkMetadata,\n  SerializedCheckIn,\n} from '@sentry/types';\nimport { createEnvelope, dropUndefinedKeys, dsnToString } from '@sentry/utils';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dropUndefinedKeys(dynamicSamplingContext) as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n", "import type { MetricInstance } from '@sentry/types';\nimport { COUNTER_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, GAUGE_METRIC_TYPE, SET_METRIC_TYPE } from './constants';\nimport { simpleHash } from './utils';\n\n/**\n * A metric instance representing a counter.\n */\nexport class CounterMetric implements MetricInstance {\n  public constructor(private _value: number) {}\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return 1;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nexport class GaugeMetric implements MetricInstance {\n  private _last: number;\n  private _min: number;\n  private _max: number;\n  private _sum: number;\n  private _count: number;\n\n  public constructor(value: number) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return 5;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nexport class DistributionMetric implements MetricInstance {\n  private _value: number[];\n\n  public constructor(first: number) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n  public add(value: number): void {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nexport class SetMetric implements MetricInstance {\n  private _value: Set<number | string>;\n\n  public constructor(public first: number | string) {\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n  public get weight(): number {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n  public add(value: number | string): void {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return Array.from(this._value)\n      .map(val => (typeof val === 'string' ? simpleHash(val) : val))\n      .join(':');\n  }\n}\n\nexport const METRIC_MAP = {\n  [COUNTER_METRIC_TYPE]: CounterMetric,\n  [GAUGE_METRIC_TYPE]: GaugeMetric,\n  [DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [SET_METRIC_TYPE]: SetMetric,\n};\n", "import type {\n  Client,\n  ClientOptions,\n  MeasurementUnit,\n  MetricsAggregator as MetricsAggregatorBase,\n  Primitive,\n} from '@sentry/types';\nimport { timestampInSeconds } from '@sentry/utils';\nimport { DEFAULT_FLUSH_INTERVAL, MAX_WEIGHT, NAME_AND_TAG_KEY_NORMALIZATION_REGEX } from './constants';\nimport { METRIC_MAP } from './instance';\nimport type { MetricBucket, MetricType } from './types';\nimport { getBucketKey, sanitizeTags } from './utils';\n\n/**\n * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n */\nexport class MetricsAggregator implements MetricsAggregatorBase {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n  private _buckets: MetricBucket;\n\n  // Different metrics have different weights. We use this to limit the number of metrics\n  // that we store in memory.\n  private _bucketsTotalWeight;\n\n  private readonly _interval: ReturnType<typeof setInterval>;\n\n  // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n  // That shift is determined once per startup to create jittering.\n  private readonly _flushShift: number;\n\n  // An SDK is required to perform force flushing ahead of scheduled time if the memory\n  // pressure is too high. There is no rule for this other than that SDKs should be tracking\n  // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n  // distribution is a float per emission).\n  //\n  // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n  private _forceFlush: boolean;\n\n  public constructor(private readonly _client: Client<ClientOptions>) {\n    this._buckets = new Map();\n    this._bucketsTotalWeight = 0;\n    this._interval = setInterval(() => this._flush(), DEFAULT_FLUSH_INTERVAL);\n    this._flushShift = Math.floor((Math.random() * DEFAULT_FLUSH_INTERVAL) / 1000);\n    this._forceFlush = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(\n    metricType: MetricType,\n    unsanitizedName: string,\n    value: number | string,\n    unit: MeasurementUnit = 'none',\n    unsanitizedTags: Record<string, Primitive> = {},\n    maybeFloatTimestamp = timestampInSeconds(),\n  ): void {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = unsanitizedName.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n    const tags = sanitizeTags(unsanitizedTags);\n\n    const bucketKey = getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags,\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // We need to keep track of the total weight of the buckets so that we can\n    // flush them when we exceed the max weight.\n    this._bucketsTotalWeight += bucketItem.metric.weight;\n\n    if (this._bucketsTotalWeight >= MAX_WEIGHT) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flushes the current metrics to the transport via the transport.\n   */\n  public flush(): void {\n    this._forceFlush = true;\n    this._flush();\n  }\n\n  /**\n   * Shuts down metrics aggregator and clears all metrics.\n   */\n  public close(): void {\n    this._forceFlush = true;\n    clearInterval(this._interval);\n    this._flush();\n  }\n\n  /**\n   * Flushes the buckets according to the internal state of the aggregator.\n   * If it is a force flush, which happens on shutdown, it will flush all buckets.\n   * Otherwise, it will only flush buckets that are older than the flush interval,\n   * and according to the flush shift.\n   *\n   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n   */\n  private _flush(): void {\n    // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n    // running at the same time.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n    // This path eliminates the need for checking for timestamps since we're forcing a flush.\n    // Remember to reset the flag, or it will always flush all metrics.\n    if (this._forceFlush) {\n      this._forceFlush = false;\n      this._bucketsTotalWeight = 0;\n      this._captureMetrics(this._buckets);\n      this._buckets.clear();\n      return;\n    }\n    const cutoffSeconds = Math.floor(timestampInSeconds()) - DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n    // TODO(@anonrig): Optimization opportunity.\n    // Convert this map to an array and store key in the bucketItem.\n    const flushedBuckets: MetricBucket = new Map();\n    for (const [key, bucket] of this._buckets) {\n      if (bucket.timestamp <= cutoffSeconds) {\n        flushedBuckets.set(key, bucket);\n        this._bucketsTotalWeight -= bucket.metric.weight;\n      }\n    }\n\n    for (const [key] of flushedBuckets) {\n      this._buckets.delete(key);\n    }\n\n    this._captureMetrics(flushedBuckets);\n  }\n\n  /**\n   * Only captures a subset of the buckets passed to this function.\n   * @param flushedBuckets\n   */\n  private _captureMetrics(flushedBuckets: MetricBucket): void {\n    if (flushedBuckets.size > 0 && this._client.captureAggregateMetrics) {\n      // TODO(@anonrig): Optimization opportunity.\n      // This copy operation can be avoided if we store the key in the bucketItem.\n      const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n      this._client.captureAggregateMetrics(buckets);\n    }\n  }\n}\n", "import type {\n  BaseTransportOptions,\n  CheckIn,\n  ClientOptions,\n  DynamicSamplingContext,\n  Event,\n  EventHint,\n  MonitorConfig,\n  ParameterizedString,\n  SerializedCheckIn,\n  Severity,\n  SeverityLevel,\n  TraceContext,\n} from '@sentry/types';\nimport { eventFromMessage, eventFromUnknownInput, logger, resolvedSyncPromise, uuid4 } from '@sentry/utils';\n\nimport { BaseClient } from './baseclient';\nimport { createCheckInEnvelope } from './checkin';\nimport { DEBUG_BUILD } from './debug-build';\nimport { getClient } from './exports';\nimport { MetricsAggregator } from './metrics/aggregator';\nimport type { Scope } from './scope';\nimport { SessionFlusher } from './sessionflusher';\nimport {\n  addTracingExtensions,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n} from './tracing';\nimport { getRootSpan } from './utils/getRootSpan';\nimport { spanToTraceContext } from './utils/spanUtils';\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends BaseClient<O> {\n  protected _sessionFlusher: SessionFlusher | undefined;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    addTracingExtensions();\n\n    super(options);\n\n    if (options._experiments && options._experiments['metricsAggregator']) {\n      this.metricsAggregator = new MetricsAggregator(this);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return resolvedSyncPromise(eventFromUnknownInput(getClient(), this._options.stackParser, exception, hint));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n    // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n    // sent to the Server only when the `requestHandler` middleware is used\n    if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n      const requestSession = scope.getRequestSession();\n\n      // Necessary checks to ensure this is code block is executed only within a request\n      // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\n      if (requestSession && requestSession.status === 'ok') {\n        requestSession.status = 'errored';\n      }\n    }\n\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // Check if the flag `autoSessionTracking` is enabled, and if `_sessionFlusher` exists because it is initialised only\n    // when the `requestHandler` middleware is used, and hence the expectation is to have SessionAggregates payload\n    // sent to the Server only when the `requestHandler` middleware is used\n    if (this._options.autoSessionTracking && this._sessionFlusher && scope) {\n      const eventType = event.type || 'exception';\n      const isException =\n        eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;\n\n      // If the event is of type Exception, then a request session should be captured\n      if (isException) {\n        const requestSession = scope.getRequestSession();\n\n        // Ensure that this is happening within the bounds of a request, and make sure not to override\n        // Session Status if Errored / Crashed\n        if (requestSession && requestSession.status === 'ok') {\n          requestSession.status = 'errored';\n        }\n      }\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   *\n   * @inheritdoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    if (this._sessionFlusher) {\n      this._sessionFlusher.close();\n    }\n    return super.close(timeout);\n  }\n\n  /** Method that initialises an instance of SessionFlusher on Client */\n  public initSessionFlusher(): void {\n    const { release, environment } = this._options;\n    if (!release) {\n      DEBUG_BUILD && logger.warn('Cannot initialise an instance of SessionFlusher if no release is provided!');\n    } else {\n      this._sessionFlusher = new SessionFlusher(this, {\n        release,\n        environment,\n      });\n    }\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture checkin.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = this._getTraceInfoFromScope(scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\n   * appropriate session aggregates bucket\n   */\n  protected _captureRequestSession(): void {\n    if (!this._sessionFlusher) {\n      DEBUG_BUILD && logger.warn('Discarded request mode session because autoSessionTracking option was disabled');\n    } else {\n      this._sessionFlusher.incrementSessionStatusCount();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    scope?: Scope,\n    isolationScope?: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: (event.contexts || {}).runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, scope, isolationScope);\n  }\n\n  /** Extract trace information from scope */\n  private _getTraceInfoFromScope(\n    scope: Scope | undefined,\n  ): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const span = scope.getSpan();\n    if (span) {\n      const samplingContext = getRootSpan(span) ? getDynamicSamplingContextFromSpan(span) : undefined;\n      return [samplingContext, spanToTraceContext(span)];\n    }\n\n    const { traceId, spanId, parentSpanId, dsc } = scope.getPropagationContext();\n    const traceContext: TraceContext = {\n      trace_id: traceId,\n      span_id: spanId,\n      parent_span_id: parentSpanId,\n    };\n    if (dsc) {\n      return [dsc, traceContext];\n    }\n\n    return [getDynamicSamplingContextFromClient(traceId, this, scope), traceContext];\n  }\n}\n", "import type { Client, ClientOptions } from '@sentry/types';\nimport { consoleSandbox, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { getCurrentScope } from './exports';\nimport { getCurrentHub } from './hub';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  initializeClient(client);\n}\n\n/**\n * Make the given client the current client.\n */\nexport function setCurrentClient(client: Client): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  // eslint-disable-next-line deprecation/deprecation\n  const top = hub.getStackTop();\n  top.client = client;\n  top.scope.setClient(client);\n}\n\n/**\n * Initialize the client for the current scope.\n * Make sure to call this after `setCurrentClient()`.\n */\nfunction initializeClient(client: Client): void {\n  if (client.init) {\n    client.init();\n    // TODO v8: Remove this fallback\n    // eslint-disable-next-line deprecation/deprecation\n  } else if (client.setupIntegrations) {\n    // eslint-disable-next-line deprecation/deprecation\n    client.setupIntegrations();\n  }\n}\n", "import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  SentryError,\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n", "import type { Envelope, InternalBaseTransportOptions, Transport, TransportMakeRequestResponse } from '@sentry/types';\nimport { envelopeContainsItemType, logger, parseRetryAfterHeader } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\nexport const MIN_DELAY = 100; // 100 ms\nexport const START_DELAY = 5_000; // 5 seconds\nconst MAX_DELAY = 3.6e6; // 1 hour\n\nfunction log(msg: string, error?: Error): void {\n  DEBUG_BUILD && logger.info(`[Offline]: ${msg}`, error);\n}\n\nexport interface OfflineStore {\n  insert(env: Envelope): Promise<void>;\n  pop(): Promise<Envelope | undefined>;\n}\n\nexport type CreateOfflineStore = (options: OfflineTransportOptions) => OfflineStore;\n\nexport interface OfflineTransportOptions extends InternalBaseTransportOptions {\n  /**\n   * A function that creates the offline store instance.\n   */\n  createStore?: CreateOfflineStore;\n\n  /**\n   * Flush the offline store shortly after startup.\n   *\n   * Defaults: false\n   */\n  flushAtStartup?: boolean;\n\n  /**\n   * Called before an event is stored.\n   *\n   * Return false to drop the envelope rather than store it.\n   *\n   * @param envelope The envelope that failed to send.\n   * @param error The error that occurred.\n   * @param retryDelay The current retry delay in milliseconds.\n   */\n  shouldStore?: (envelope: Envelope, error: Error, retryDelay: number) => boolean | Promise<boolean>;\n}\n\ntype Timer = number | { unref?: () => void };\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nexport function makeOfflineTransport<TO>(\n  createTransport: (options: TO) => Transport,\n): (options: TO & OfflineTransportOptions) => Transport {\n  return options => {\n    const transport = createTransport(options);\n    const store = options.createStore ? options.createStore(options) : undefined;\n\n    let retryDelay = START_DELAY;\n    let flushTimer: Timer | undefined;\n\n    function shouldQueue(env: Envelope, error: Error, retryDelay: number): boolean | Promise<boolean> {\n      // We don't queue Session Replay envelopes because they are:\n      // - Ordered and Replay relies on the response status to know when they're successfully sent.\n      // - Likely to fill the queue quickly and block other events from being sent.\n      // We also want to drop client reports because they can be generated when we retry sending events while offline.\n      if (envelopeContainsItemType(env, ['replay_event', 'replay_recording', 'client_report'])) {\n        return false;\n      }\n\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n\n      return true;\n    }\n\n    function flushIn(delay: number): void {\n      if (!store) {\n        return;\n      }\n\n      if (flushTimer) {\n        clearTimeout(flushTimer as ReturnType<typeof setTimeout>);\n      }\n\n      flushTimer = setTimeout(async () => {\n        flushTimer = undefined;\n\n        const found = await store.pop();\n        if (found) {\n          log('Attempting to send previously queued event');\n          void send(found).catch(e => {\n            log('Failed to retry sending', e);\n          });\n        }\n      }, delay) as Timer;\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n\n    function flushWithBackOff(): void {\n      if (flushTimer) {\n        return;\n      }\n\n      flushIn(retryDelay);\n\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n\n    async function send(envelope: Envelope): Promise<void | TransportMakeRequestResponse> {\n      try {\n        const result = await transport.send(envelope);\n\n        let delay = MIN_DELAY;\n\n        if (result) {\n          // If there's a retry-after header, use that as the next delay.\n          if (result.headers && result.headers['retry-after']) {\n            delay = parseRetryAfterHeader(result.headers['retry-after']);\n          } // If we have a server error, return now so we don't flush the queue.\n          else if ((result.statusCode || 0) >= 400) {\n            return result;\n          }\n        }\n\n        flushIn(delay);\n        retryDelay = START_DELAY;\n        return result;\n      } catch (e) {\n        if (store && (await shouldQueue(envelope, e as Error, retryDelay))) {\n          await store.insert(envelope);\n          flushWithBackOff();\n          log('Error sending. Event queued', e as Error);\n          return {};\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n\n    return {\n      send,\n      flush: t => transport.flush(t),\n    };\n  };\n}\n", "import type {\n  BaseTransportOptions,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventItem,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport { dsnFromString, forEachEnvelopeItem } from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from '../api';\n\ninterface MatchParam {\n  /** The envelope to be sent */\n  envelope: Envelope;\n  /**\n   * A function that returns an event from the envelope if one exists. You can optionally pass an array of envelope item\n   * types to filter by - only envelopes matching the given types will be multiplexed.\n   * Allowed values are: 'event', 'transaction', 'profile', 'replay_event'\n   *\n   * @param types Defaults to ['event']\n   */\n  getEvent(types?: EnvelopeItemType[]): Event | undefined;\n}\n\ntype RouteTo = { dsn: string; release: string };\ntype Matcher = (param: MatchParam) => (string | RouteTo)[];\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nexport function eventFromEnvelope(env: Envelope, types: EnvelopeItemType[]): Event | undefined {\n  let event: Event | undefined;\n\n  forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  release: string,\n): (options: TO) => Transport {\n  return options => {\n    const transport = createTransport(options);\n\n    return {\n      send: async (envelope: Envelope): Promise<void | TransportMakeRequestResponse> => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      },\n      flush: timeout => transport.flush(timeout),\n    };\n  };\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nexport function makeMultiplexedTransport<TO extends BaseTransportOptions>(\n  createTransport: (options: TO) => Transport,\n  matcher: Matcher,\n): (options: TO) => Transport {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports: Record<string, Transport> = {};\n\n    function getTransport(dsn: string, release: string | undefined): Transport | undefined {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn}:${release}` : dsn;\n\n      if (!otherTransports[key]) {\n        const validatedDsn = dsnFromString(dsn);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn);\n\n        otherTransports[key] = release\n          ? makeOverrideReleaseTransport(createTransport, release)({ ...options, url })\n          : createTransport({ ...options, url });\n      }\n\n      return otherTransports[key];\n    }\n\n    async function send(envelope: Envelope): Promise<void | TransportMakeRequestResponse> {\n      function getEvent(types?: EnvelopeItemType[]): Event | undefined {\n        const eventTypes: EnvelopeItemType[] = types && types.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n\n      const transports = matcher({ envelope, getEvent })\n        .map(result => {\n          if (typeof result === 'string') {\n            return getTransport(result, undefined);\n          } else {\n            return getTransport(result.dsn, result.release);\n          }\n        })\n        .filter((t): t is Transport => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      if (transports.length === 0) {\n        transports.push(fallbackTransport);\n      }\n\n      const results = await Promise.all(transports.map(transport => transport.send(envelope)));\n\n      return results[0];\n    }\n\n    async function flush(timeout: number | undefined): Promise<boolean> {\n      const allTransports = [...Object.keys(otherTransports).map(dsn => otherTransports[dsn]), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n\n    return {\n      send,\n      flush,\n    };\n  };\n}\n", "import type { Client, DsnComponents, Hub } from '@sentry/types';\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n *\n * TODO(v8): Remove Hub fallback type\n */\nexport function isSentryRequestUrl(url: string, hubOrClient: Hub | Client | undefined): boolean {\n  const client =\n    hubOrClient && isHub(hubOrClient)\n      ? // eslint-disable-next-line deprecation/deprecation\n        hubOrClient.getClient()\n      : hubOrClient;\n  const dsn = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url: string, tunnel: string | undefined): boolean {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url: string, dsn: DsnComponents | undefined): boolean {\n  return dsn ? url.includes(dsn.host) : false;\n}\n\nfunction removeTrailingSlash(str: string): string {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n\nfunction isHub(hubOrClient: Hub | Client | undefined): hubOrClient is Hub {\n  // eslint-disable-next-line deprecation/deprecation\n  return (hubOrClient as Hub).getClient !== undefined;\n}\n", "import type { Event, StackParser } from '@sentry/types';\nimport { GLOBAL_OBJ } from '@sentry/utils';\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map<string, any>();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set<string>();\n\nfunction ensureMetadataStacksAreParsed(parser: StackParser): void {\n  if (!GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n\n  for (const stack of Object.keys(GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = GLOBAL_OBJ._sentryModuleMetadata[stack];\n\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadataForUrl(parser: StackParser, filename: string): any | undefined {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nexport function addMetadataToStackFrames(parser: StackParser, event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename) {\n          continue;\n        }\n\n        const metadata = getMetadataForUrl(parser, frame.filename);\n\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nexport function stripMetadataFromStackFrames(event: Event): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n", "import type { Client, Event, EventHint, EventItem, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { forEachEnvelopeItem } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\n\nconst INTEGRATION_NAME = 'ModuleMetadata';\n\nconst _moduleMetadataIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof client.on !== 'function') {\n        return;\n      }\n\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n    },\n\n    processEvent(event, _hint, client) {\n      const stackParser = client.getOptions().stackParser;\n      addMetadataToStackFrames(stackParser, event);\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const moduleMetadataIntegration = defineIntegration(_moduleMetadataIntegration);\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n *\n * @deprecated Use `moduleMetadataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const ModuleMetadata = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  moduleMetadataIntegration,\n) as IntegrationClass<\n  Integration & {\n    setup: (client: Client) => void;\n    processEvent: (event: Event, hint: EventHint, client: Client) => Event;\n  }\n>;\n", "import type {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  Transaction,\n} from '@sentry/types';\nimport type { AddRequestDataToEventOptions, TransactionNamingScheme } from '@sentry/utils';\nimport { addRequestDataToEvent, extractPathForTransaction } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\nimport { spanToJSON } from '../utils/spanUtils';\n\nexport type RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event\n   */\n  include?: {\n    cookies?: boolean;\n    data?: boolean;\n    headers?: boolean;\n    ip?: boolean;\n    query_string?: boolean;\n    url?: boolean;\n    user?:\n      | boolean\n      | {\n          id?: boolean;\n          username?: boolean;\n          email?: boolean;\n        };\n  };\n\n  /** Whether to identify transactions by parameterized path, parameterized path with method, or handler name */\n  transactionNamingScheme?: TransactionNamingScheme;\n};\n\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true,\n    },\n  },\n  transactionNamingScheme: 'methodPath',\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const _addRequestData = addRequestDataToEvent;\n  const _options: Required<RequestDataIntegrationOptions> = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      // @ts-expect-error It's mad because `method` isn't a known `include` key. (It's only here and not set by default in\n      // `addRequestDataToEvent` for legacy reasons. TODO (v8): Change that.)\n      method: true,\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user:\n        options.include && typeof options.include.user === 'boolean'\n          ? options.include.user\n          : {\n              ...DEFAULT_OPTIONS.include.user,\n              // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n              ...((options.include || {}).user as Record<string, boolean>),\n            },\n    },\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be clened up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n      const { transactionNamingScheme } = _options;\n\n      const { sdkProcessingMetadata = {} } = event;\n      const req = sdkProcessingMetadata.request;\n\n      if (!req) {\n        return event;\n      }\n\n      // The Express request handler takes a similar `include` option to that which can be passed to this integration.\n      // If passed there, we store it in `sdkProcessingMetadata`. TODO(v8): Force express and GCP people to use this\n      // integration, so that all of this passing and conversion isn't necessary\n      const addRequestDataOptions =\n        sdkProcessingMetadata.requestDataOptionsFromExpressHandler ||\n        sdkProcessingMetadata.requestDataOptionsFromGCPWrapper ||\n        convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n\n      const processedEvent = _addRequestData(event, req, addRequestDataOptions);\n\n      // Transaction events already have the right `transaction` value\n      if (event.type === 'transaction' || transactionNamingScheme === 'handler') {\n        return processedEvent;\n      }\n\n      // In all other cases, use the request's associated transaction (if any) to overwrite the event's `transaction`\n      // value with a high-quality one\n      const reqWithTransaction = req as { _sentryTransaction?: Transaction };\n      const transaction = reqWithTransaction._sentryTransaction;\n      if (transaction) {\n        const name = spanToJSON(transaction).description || '';\n\n        // TODO (v8): Remove the nextjs check and just base it on `transactionNamingScheme` for all SDKs. (We have to\n        // keep it the way it is for the moment, because changing the names of transactions in Sentry has the potential\n        // to break things like alert rules.)\n        const shouldIncludeMethodInTransactionName =\n          getSDKName(client) === 'sentry.javascript.nextjs'\n            ? name.startsWith('/api')\n            : transactionNamingScheme !== 'path';\n\n        const [transactionValue] = extractPathForTransaction(req, {\n          path: true,\n          method: shouldIncludeMethodInTransactionName,\n          customRoute: name,\n        });\n\n        processedEvent.transaction = transactionValue;\n      }\n\n      return processedEvent;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/integrations`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n * @deprecated Use `requestDataIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const RequestData = convertIntegrationFnToClass(INTEGRATION_NAME, requestDataIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event, hint: EventHint, client: Client) => Event }\n> & {\n  new (options?: {\n    /**\n     * Controls what data is pulled from the request and added to the event\n     */\n    include?: {\n      cookies?: boolean;\n      data?: boolean;\n      headers?: boolean;\n      ip?: boolean;\n      query_string?: boolean;\n      url?: boolean;\n      user?:\n        | boolean\n        | {\n            id?: boolean;\n            username?: boolean;\n            email?: boolean;\n          };\n    };\n\n    /** Whether to identify transactions by parameterized path, parameterized path with method, or handler name */\n    transactionNamingScheme?: TransactionNamingScheme;\n  }): Integration;\n};\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(\n  integrationOptions: Required<RequestDataIntegrationOptions>,\n): AddRequestDataToEventOptions {\n  const {\n    transactionNamingScheme,\n    include: { ip, user, ...requestOptions },\n  } = integrationOptions;\n\n  const requestIncludeKeys: string[] = [];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys: string[] = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme,\n    },\n  };\n}\n\nfunction getSDKName(client: Client): string | undefined {\n  try {\n    // For a long chain like this, it's fewer bytes to combine a try-catch with assuming everything is there than to\n    // write out a long chain of `a && a.b && a.b.c && ...`\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return client.getOptions()._metadata!.sdk!.name;\n  } catch (err) {\n    // In theory we should never get here\n    return undefined;\n  }\n}\n", "import type { Client, Event, EventHint, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\nimport { getEventDescription, logger, stringMatchesSomePattern } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\nconst DEFAULT_IGNORE_TRANSACTIONS = [\n  /^.*\\/healthcheck$/,\n  /^.*\\/healthy$/,\n  /^.*\\/live$/,\n  /^.*\\/ready$/,\n  /^.*\\/heartbeat$/,\n  /^.*\\/health$/,\n  /^.*\\/healthz$/,\n];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n  disableTransactionDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'InboundFilters';\nconst _inboundFiltersIntegration = ((options: Partial<InboundFiltersOptions> = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      const clientOptions = client.getOptions();\n      const mergedOptions = _mergeOptions(options, clientOptions);\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const inboundFiltersIntegration = defineIntegration(_inboundFiltersIntegration);\n\n/**\n * Inbound filters configurable by the user.\n * @deprecated Use `inboundFiltersIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const InboundFilters = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  inboundFiltersIntegration,\n) as IntegrationClass<Integration & { preprocessEvent: (event: Event, hint: EventHint, client: Client) => void }> & {\n  new (\n    options?: Partial<{\n      allowUrls: Array<string | RegExp>;\n      denyUrls: Array<string | RegExp>;\n      ignoreErrors: Array<string | RegExp>;\n      ignoreTransactions: Array<string | RegExp>;\n      ignoreInternal: boolean;\n      disableErrorDefaults: boolean;\n      disableTransactionDefaults: boolean;\n    }>,\n  ): Integration;\n};\n\nfunction _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [\n      ...(internalOptions.ignoreTransactions || []),\n      ...(clientOptions.ignoreTransactions || []),\n      ...(internalOptions.disableTransactionDefaults ? [] : DEFAULT_IGNORE_TRANSACTIONS),\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    DEBUG_BUILD &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  let lastException;\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    lastException = event.exception.values[event.exception.values.length - 1];\n  } catch (e) {\n    // try catching to save bundle size checking existence of variables\n  }\n\n  if (lastException) {\n    if (lastException.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  }\n\n  if (DEBUG_BUILD && possibleMessages.length === 0) {\n    logger.error(`Could not extract message for event ${getEventDescription(event)}`);\n  }\n\n  return possibleMessages;\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-expect-error can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-expect-error we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n", "import type { Integration, IntegrationClass, IntegrationFn, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n          const context = getOriginalFunction(this) || this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n * @deprecated Use `functionToStringIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const FunctionToString = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  functionToStringIntegration,\n) as IntegrationClass<Integration & { setupOnce: () => void }>;\n", "import type { Client, Event, EventHint, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { applyAggregateErrorsToEvent, exceptionFromError } from '@sentry/utils';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(\n        exceptionFromError,\n        options.stackParser,\n        options.maxValueLength,\n        key,\n        limit,\n        event,\n        hint,\n      );\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n\n/**\n * Adds SDK info to an event.\n * @deprecated Use `linkedErrorsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const LinkedErrors = convertIntegrationFnToClass(INTEGRATION_NAME, linkedErrorsIntegration) as IntegrationClass<\n  Integration & { preprocessEvent: (event: Event, hint: EventHint, client: Client) => void }\n> & { new (options?: { key?: string; limit?: number }): Integration };\n", "import type {\n  Client,\n  ClientOptions,\n  MeasurementUnit,\n  MetricBucketItem,\n  MetricsAggregator,\n  Primitive,\n} from '@sentry/types';\nimport { timestampInSeconds } from '@sentry/utils';\nimport { DEFAULT_BROWSER_FLUSH_INTERVAL, NAME_AND_TAG_KEY_NORMALIZATION_REGEX } from './constants';\nimport { METRIC_MAP } from './instance';\nimport type { MetricBucket, MetricType } from './types';\nimport { getBucketKey, sanitizeTags } from './utils';\n\n/**\n * A simple metrics aggregator that aggregates metrics in memory and flushes them periodically.\n * Default flush interval is 5 seconds.\n *\n * @experimental This API is experimental and might change in the future.\n */\nexport class BrowserMetricsAggregator implements MetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n  private _buckets: MetricBucket;\n  private readonly _interval: ReturnType<typeof setInterval>;\n\n  public constructor(private readonly _client: Client<ClientOptions>) {\n    this._buckets = new Map();\n    this._interval = setInterval(() => this.flush(), DEFAULT_BROWSER_FLUSH_INTERVAL);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(\n    metricType: MetricType,\n    unsanitizedName: string,\n    value: number | string,\n    unit: MeasurementUnit | undefined = 'none',\n    unsanitizedTags: Record<string, Primitive> | undefined = {},\n    maybeFloatTimestamp: number | undefined = timestampInSeconds(),\n  ): void {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = unsanitizedName.replace(NAME_AND_TAG_KEY_NORMALIZATION_REGEX, '_');\n    const tags = sanitizeTags(unsanitizedTags);\n\n    const bucketKey = getBucketKey(metricType, name, unit, tags);\n    const bucketItem: MetricBucketItem | undefined = this._buckets.get(bucketKey);\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      this._buckets.set(bucketKey, {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(): void {\n    // short circuit if buckets are empty.\n    if (this._buckets.size === 0) {\n      return;\n    }\n    if (this._client.captureAggregateMetrics) {\n      // TODO(@anonrig): Use Object.values() when we support ES6+\n      const metricBuckets = Array.from(this._buckets).map(([, bucketItem]) => bucketItem);\n      this._client.captureAggregateMetrics(metricBuckets);\n    }\n    this._buckets.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(): void {\n    clearInterval(this._interval);\n    this.flush();\n  }\n}\n", "import type { Client, ClientOptions, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport type { BaseClient } from '../baseclient';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\nimport { BrowserMetricsAggregator } from './browser-aggregator';\n\nconst INTEGRATION_NAME = 'MetricsAggregator';\n\nconst _metricsAggregatorIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client: BaseClient<ClientOptions>) {\n      client.metricsAggregator = new BrowserMetricsAggregator(client);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const metricsAggregatorIntegration = defineIntegration(_metricsAggregatorIntegration);\n\n/**\n * Enables Sentry metrics monitoring.\n *\n * @experimental This API is experimental and might having breaking changes in the future.\n * @deprecated Use `metricsAggegratorIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const MetricsAggregator = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  metricsAggregatorIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }>;\n", "import type { ClientOptions, MeasurementUnit, Primitive } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport type { BaseClient } from '../baseclient';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getClient, getCurrentScope } from '../exports';\nimport { spanToJSON } from '../utils/spanUtils';\nimport { COUNTER_METRIC_TYPE, DISTRIBUTION_METRIC_TYPE, GAUGE_METRIC_TYPE, SET_METRIC_TYPE } from './constants';\nimport { MetricsAggregator, metricsAggregatorIntegration } from './integration';\nimport type { MetricType } from './types';\n\ninterface MetricData {\n  unit?: MeasurementUnit;\n  tags?: Record<string, Primitive>;\n  timestamp?: number;\n}\n\nfunction addToMetricsAggregator(\n  metricType: MetricType,\n  name: string,\n  value: number | string,\n  data: MetricData | undefined = {},\n): void {\n  const client = getClient<BaseClient<ClientOptions>>();\n  const scope = getCurrentScope();\n  if (client) {\n    if (!client.metricsAggregator) {\n      DEBUG_BUILD &&\n        logger.warn('No metrics aggregator enabled. Please add the MetricsAggregator integration to use metrics APIs');\n      return;\n    }\n    const { unit, tags, timestamp } = data;\n    const { release, environment } = client.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    const transaction = scope.getTransaction();\n    const metricTags: Record<string, string> = {};\n    if (release) {\n      metricTags.release = release;\n    }\n    if (environment) {\n      metricTags.environment = environment;\n    }\n    if (transaction) {\n      metricTags.transaction = spanToJSON(transaction).description || '';\n    }\n\n    DEBUG_BUILD && logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n    client.metricsAggregator.add(metricType, name, value, unit, { ...metricTags, ...tags }, timestamp);\n  }\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function increment(name: string, value: number = 1, data?: MetricData): void {\n  addToMetricsAggregator(COUNTER_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function distribution(name: string, value: number, data?: MetricData): void {\n  addToMetricsAggregator(DISTRIBUTION_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function set(name: string, value: number | string, data?: MetricData): void {\n  addToMetricsAggregator(SET_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nexport function gauge(name: string, value: number, data?: MetricData): void {\n  addToMetricsAggregator(GAUGE_METRIC_TYPE, name, value, data);\n}\n\nexport const metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  /** @deprecated Use `metrics.metricsAggregratorIntegration()` instead. */\n  // eslint-disable-next-line deprecation/deprecation\n  MetricsAggregator,\n  metricsAggregatorIntegration,\n};\n", "export type { ClientClass } from './sdk';\nexport type { AsyncContextStrategy, Carrier, Layer, RunWithAsyncContextOptions } from './hub';\nexport type { OfflineStore, OfflineTransportOptions } from './transports/offline';\nexport type { ServerRuntimeClientOptions } from './server-runtime-client';\nexport type { RequestDataIntegrationOptions } from './integrations/requestdata';\n\nexport * from './tracing';\nexport * from './semanticAttributes';\nexport { createEventEnvelope, createSessionEnvelope } from './envelope';\nexport {\n  addBreadcrumb,\n  captureCheckIn,\n  withMonitor,\n  captureException,\n  captureEvent,\n  captureMessage,\n  close,\n  // eslint-disable-next-line deprecation/deprecation\n  configureScope,\n  flush,\n  // eslint-disable-next-line deprecation/deprecation\n  lastEventId,\n  // eslint-disable-next-line deprecation/deprecation\n  startTransaction,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  withScope,\n  withIsolationScope,\n  getClient,\n  getCurrentScope,\n  startSession,\n  endSession,\n  captureSession,\n  withActiveSpan,\n} from './exports';\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub,\n  getIsolationScope,\n  getHubFromCarrier,\n  Hub,\n  // eslint-disable-next-line deprecation/deprecation\n  makeMain,\n  getMainCarrier,\n  runWithAsyncContext,\n  setHubOnCarrier,\n  ensureHubOnCarrier,\n  setAsyncContextStrategy,\n} from './hub';\nexport { makeSession, closeSession, updateSession } from './session';\nexport { SessionFlusher } from './sessionflusher';\nexport { Scope, getGlobalScope, setGlobalScope } from './scope';\nexport {\n  notifyEventProcessors,\n  // eslint-disable-next-line deprecation/deprecation\n  addGlobalEventProcessor,\n} from './eventProcessors';\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint } from './api';\nexport { BaseClient, addEventProcessor } from './baseclient';\nexport { ServerRuntimeClient } from './server-runtime-client';\nexport { initAndBind, setCurrentClient } from './sdk';\nexport { createTransport } from './transports/base';\nexport { makeOfflineTransport } from './transports/offline';\nexport { makeMultiplexedTransport } from './transports/multiplexed';\nexport { SDK_VERSION } from './version';\nexport {\n  getIntegrationsToSetup,\n  addIntegration,\n  defineIntegration,\n  // eslint-disable-next-line deprecation/deprecation\n  convertIntegrationFnToClass,\n} from './integration';\nexport { applyScopeDataToEvent, mergeScopeData } from './utils/applyScopeDataToEvent';\nexport { prepareEvent } from './utils/prepareEvent';\nexport { createCheckInEnvelope } from './checkin';\nexport { hasTracingEnabled } from './utils/hasTracingEnabled';\nexport { isSentryRequestUrl } from './utils/isSentryRequestUrl';\nexport { handleCallbackErrors } from './utils/handleCallbackErrors';\nexport {\n  spanToTraceHeader,\n  spanToJSON,\n  spanIsSampled,\n} from './utils/spanUtils';\nexport { getRootSpan } from './utils/getRootSpan';\nexport { DEFAULT_ENVIRONMENT } from './constants';\n/* eslint-disable deprecation/deprecation */\nexport { ModuleMetadata } from './integrations/metadata';\nexport { RequestData } from './integrations/requestdata';\nexport { InboundFilters } from './integrations/inboundfilters';\nexport { FunctionToString } from './integrations/functiontostring';\nexport { LinkedErrors } from './integrations/linkederrors';\n/* eslint-enable deprecation/deprecation */\nimport * as INTEGRATIONS from './integrations';\nexport { functionToStringIntegration } from './integrations/functiontostring';\nexport { inboundFiltersIntegration } from './integrations/inboundfilters';\nexport { linkedErrorsIntegration } from './integrations/linkederrors';\nexport { moduleMetadataIntegration } from './integrations/metadata';\nexport { requestDataIntegration } from './integrations/requestdata';\nexport { metrics } from './metrics/exports';\n\n/** @deprecated Import the integration function directly, e.g. `inboundFiltersIntegration()` instead of `new Integrations.InboundFilter(). */\nconst Integrations = INTEGRATIONS;\n\n// eslint-disable-next-line deprecation/deprecation\nexport { Integrations };\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import type { Hub } from '@sentry/types';\n\n/**\n * Check if Sentry auto-instrumentation should be disabled.\n *\n * @param getCurrentHub A method to fetch the current hub\n * @returns boolean\n */\nexport function shouldDisableAutoInstrumentation(getCurrentHub: () => Hub): boolean {\n  // eslint-disable-next-line deprecation/deprecation\n  const clientOptions = getCurrentHub().getClient()?.getOptions();\n  const instrumenter = clientOptions?.instrumenter || 'sentry';\n\n  return instrumenter !== 'sentry';\n}\n", "/* eslint-disable max-lines */\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, spanToJSON } from '@sentry/core';\nimport type { Hub, Integration, PolymorphicRequest, Transaction } from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  extractPathForTransaction,\n  getNumberOfUrlSegments,\n  isRegExp,\n  logger,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe'\n  | 'use';\n\ntype Router = {\n  [method in Method]: (...args: any) => any; // eslint-disable-line @typescript-eslint/no-explicit-any\n};\n\n/* Extend the PolymorphicRequest type with a patched parameter to build a reconstructed route */\ntype PatchedRequest = PolymorphicRequest & { _reconstructedRoute?: string; _hasParameters?: boolean };\n\n/* Types used for patching the express router prototype */\ntype ExpressRouter = Router & {\n  _router?: ExpressRouter;\n  stack?: Layer[];\n  lazyrouter?: () => void;\n  settings?: unknown;\n  process_params: (\n    layer: Layer,\n    called: unknown,\n    req: PatchedRequest,\n    res: ExpressResponse,\n    done: () => void,\n  ) => unknown;\n};\n\ntype Layer = {\n  match: (path: string) => boolean;\n  handle_request: (req: PatchedRequest, res: ExpressResponse, next: () => void) => void;\n  route?: { path: RouteType | RouteType[] };\n  path?: string;\n  regexp?: RegExp;\n  keys?: { name: string | number; offset: number; optional: boolean }[];\n};\n\ntype RouteType = string | RegExp;\n\ninterface ExpressResponse {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  /**\n   * Express App instance\n   */\n  private readonly _router?: Router;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Router; router?: Router; methods?: Method[] } = {}) {\n    this.name = Express.id;\n    this._router = options.router || options.app;\n    this._methods = (Array.isArray(options.methods) ? options.methods : []).concat('use');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: unknown, getCurrentHub: () => Hub): void {\n    if (!this._router) {\n      DEBUG_BUILD && logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Express Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    instrumentMiddlewares(this._router, this._methods);\n    instrumentRouter(this._router as ExpressRouter);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n *\n * They all internally delegate to the `router[method]` of the given application instance.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\nfunction wrap(fn: Function, method: Method): (...args: any[]) => void {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function (this: NodeJS.Global, req: unknown, res: ExpressResponse & SentryTracingResponse): void {\n        const transaction = res.__sentry_transaction;\n        if (transaction) {\n          // eslint-disable-next-line deprecation/deprecation\n          const span = transaction.startChild({\n            description: fn.name,\n            op: `middleware.express.${method}`,\n            origin: 'auto.middleware.express',\n          });\n          res.once('finish', () => {\n            span.end();\n          });\n        }\n        return fn.call(this, req, res);\n      };\n    }\n    case 3: {\n      return function (\n        this: NodeJS.Global,\n        req: unknown,\n        res: ExpressResponse & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        // eslint-disable-next-line deprecation/deprecation\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.express.${method}`,\n          origin: 'auto.middleware.express',\n        });\n        fn.call(this, req, res, function (this: NodeJS.Global, ...args: unknown[]): void {\n          span?.end();\n          next.call(this, ...args);\n        });\n      };\n    }\n    case 4: {\n      return function (\n        this: NodeJS.Global,\n        err: Error,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: () => void,\n      ): void {\n        const transaction = res.__sentry_transaction;\n        // eslint-disable-next-line deprecation/deprecation\n        const span = transaction?.startChild({\n          description: fn.name,\n          op: `middleware.express.${method}`,\n          origin: 'auto.middleware.express',\n        });\n        fn.call(this, err, req, res, function (this: NodeJS.Global, ...args: unknown[]): void {\n          span?.end();\n          next.call(this, ...args);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Takes all the function arguments passed to the original `app` or `router` method, eg. `app.use` or `router.use`\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapMiddlewareArgs(args: unknown[], method: Method): unknown[] {\n  return args.map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg, method);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a, method);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original router to utilize our tracing functionality\n */\nfunction patchMiddleware(router: Router, method: Method): Router {\n  const originalCallback = router[method];\n\n  router[method] = function (...args: unknown[]): void {\n    return originalCallback.call(this, ...wrapMiddlewareArgs(args, method));\n  };\n\n  return router;\n}\n\n/**\n * Patches original router methods\n */\nfunction instrumentMiddlewares(router: Router, methods: Method[] = []): void {\n  methods.forEach((method: Method) => patchMiddleware(router, method));\n}\n\n/**\n * Patches the prototype of Express.Router to accumulate the resolved route\n * if a layer instance's `match` function was called and it returned a successful match.\n *\n * @see https://github.com/expressjs/express/blob/master/lib/router/index.js\n *\n * @param appOrRouter the router instance which can either be an app (i.e. top-level) or a (nested) router.\n */\nfunction instrumentRouter(appOrRouter: ExpressRouter): void {\n  // This is how we can distinguish between app and routers\n  const isApp = 'settings' in appOrRouter;\n\n  // In case the app's top-level router hasn't been initialized yet, we have to do it now\n  if (isApp && appOrRouter._router === undefined && appOrRouter.lazyrouter) {\n    appOrRouter.lazyrouter();\n  }\n\n  const router = isApp ? appOrRouter._router : appOrRouter;\n\n  if (!router) {\n    /*\n    If we end up here, this means likely that this integration is used with Express 3 or Express 5.\n    For now, we don't support these versions (3 is very old and 5 is still in beta). To support Express 5,\n    we'd need to make more changes to the routing instrumentation because the router is no longer part of\n    the Express core package but maintained in its own package. The new router has different function\n    signatures and works slightly differently, demanding more changes than just taking the router from\n    `app.router` instead of `app._router`.\n    @see https://github.com/pillarjs/router\n\n    TODO: Proper Express 5 support\n    */\n    DEBUG_BUILD && logger.debug('Cannot instrument router for URL Parameterization (did not find a valid router).');\n    DEBUG_BUILD && logger.debug('Routing instrumentation is currently only supported in Express 4.');\n    return;\n  }\n\n  const routerProto = Object.getPrototypeOf(router) as ExpressRouter;\n\n  const originalProcessParams = routerProto.process_params;\n  routerProto.process_params = function process_params(\n    layer: Layer,\n    called: unknown,\n    req: PatchedRequest,\n    res: ExpressResponse & SentryTracingResponse,\n    done: () => unknown,\n  ) {\n    // Base case: We're in the first part of the URL (thus we start with the root '/')\n    if (!req._reconstructedRoute) {\n      req._reconstructedRoute = '';\n    }\n\n    // If the layer's partial route has params, is a regex or an array, the route is stored in layer.route.\n    const { layerRoutePath, isRegex, isArray, numExtraSegments }: LayerRoutePathInfo = getLayerRoutePathInfo(layer);\n\n    if (layerRoutePath || isRegex || isArray) {\n      req._hasParameters = true;\n    }\n\n    // Otherwise, the hardcoded path (i.e. a partial route without params) is stored in layer.path\n    let partialRoute;\n\n    if (layerRoutePath) {\n      partialRoute = layerRoutePath;\n    } else {\n      /**\n       * prevent duplicate segment in _reconstructedRoute param if router match multiple routes before final path\n       * example:\n       * original url: /api/v1/1234\n       * prevent: /api/api/v1/:userId\n       * router structure\n       * /api -> middleware\n       * /api/v1 -> middleware\n       * /1234 -> endpoint with param :userId\n       * final _reconstructedRoute is /api/v1/:userId\n       */\n      partialRoute = preventDuplicateSegments(req.originalUrl, req._reconstructedRoute, layer.path) || '';\n    }\n\n    // Normalize the partial route so that it doesn't contain leading or trailing slashes\n    // and exclude empty or '*' wildcard routes.\n    // The exclusion of '*' routes is our best effort to not \"pollute\" the transaction name\n    // with interim handlers (e.g. ones that check authentication or do other middleware stuff).\n    // We want to end up with the parameterized URL of the incoming request without any extraneous path segments.\n    const finalPartialRoute = partialRoute\n      .split('/')\n      .filter(segment => segment.length > 0 && (isRegex || isArray || !segment.includes('*')))\n      .join('/');\n\n    // If we found a valid partial URL, we append it to the reconstructed route\n    if (finalPartialRoute && finalPartialRoute.length > 0) {\n      // If the partial route is from a regex route, we append a '/' to close the regex\n      req._reconstructedRoute += `/${finalPartialRoute}${isRegex ? '/' : ''}`;\n    }\n\n    // Now we check if we are in the \"last\" part of the route. We determine this by comparing the\n    // number of URL segments from the original URL to that of our reconstructed parameterized URL.\n    // If we've reached our final destination, we update the transaction name.\n    const urlLength = getNumberOfUrlSegments(stripUrlQueryAndFragment(req.originalUrl || '')) + numExtraSegments;\n    const routeLength = getNumberOfUrlSegments(req._reconstructedRoute);\n\n    if (urlLength === routeLength) {\n      if (!req._hasParameters) {\n        if (req._reconstructedRoute !== req.originalUrl) {\n          req._reconstructedRoute = req.originalUrl ? stripUrlQueryAndFragment(req.originalUrl) : req.originalUrl;\n        }\n      }\n\n      const transaction = res.__sentry_transaction;\n      const attributes = (transaction && spanToJSON(transaction).data) || {};\n      if (transaction && attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] !== 'custom') {\n        // If the request URL is '/' or empty, the reconstructed route will be empty.\n        // Therefore, we fall back to setting the final route to '/' in this case.\n        const finalRoute = req._reconstructedRoute || '/';\n\n        const [name, source] = extractPathForTransaction(req, { path: true, method: true, customRoute: finalRoute });\n        transaction.updateName(name);\n        transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n      }\n    }\n\n    return originalProcessParams.call(this, layer, called, req, res, done);\n  };\n}\n\ntype LayerRoutePathInfo = {\n  layerRoutePath?: string;\n  isRegex: boolean;\n  isArray: boolean;\n  numExtraSegments: number;\n};\n\n/**\n * Recreate layer.route.path from layer.regexp and layer.keys.\n * Works until express.js used package path-to-regexp@0.1.7\n * or until layer.keys contain offset attribute\n *\n * @param layer the layer to extract the stringified route from\n *\n * @returns string in layer.route.path structure 'router/:pathParam' or undefined\n */\nexport const extractOriginalRoute = (\n  path?: Layer['path'],\n  regexp?: Layer['regexp'],\n  keys?: Layer['keys'],\n): string | undefined => {\n  if (!path || !regexp || !keys || Object.keys(keys).length === 0 || !keys[0]?.offset) {\n    return undefined;\n  }\n\n  const orderedKeys = keys.sort((a, b) => a.offset - b.offset);\n\n  // add d flag for getting indices from regexp result\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- regexp comes from express.js\n  const pathRegex = new RegExp(regexp, `${regexp.flags}d`);\n  /**\n   * use custom type cause of TS error with missing indices in RegExpExecArray\n   */\n  const execResult = pathRegex.exec(path) as (RegExpExecArray & { indices: [number, number][] }) | null;\n\n  if (!execResult || !execResult.indices) {\n    return undefined;\n  }\n  /**\n   * remove first match from regex cause contain whole layer.path\n   */\n  const [, ...paramIndices] = execResult.indices;\n\n  if (paramIndices.length !== orderedKeys.length) {\n    return undefined;\n  }\n  let resultPath = path;\n  let indexShift = 0;\n\n  /**\n   * iterate param matches from regexp.exec\n   */\n  paramIndices.forEach((item: [number, number] | undefined, index: number) => {\n    /** check if offsets is define because in some cases regex d flag returns undefined */\n    if (item) {\n      const [startOffset, endOffset] = item;\n      /**\n       * isolate part before param\n       */\n      const substr1 = resultPath.substring(0, startOffset - indexShift);\n      /**\n       * define paramName as replacement in format :pathParam\n       */\n      const replacement = `:${orderedKeys[index].name}`;\n\n      /**\n       * isolate part after param\n       */\n      const substr2 = resultPath.substring(endOffset - indexShift);\n\n      /**\n       * recreate original path but with param replacement\n       */\n      resultPath = substr1 + replacement + substr2;\n\n      /**\n       * calculate new index shift after resultPath was modified\n       */\n      indexShift = indexShift + (endOffset - startOffset - replacement.length);\n    }\n  });\n\n  return resultPath;\n};\n\n/**\n * Extracts and stringifies the layer's route which can either be a string with parameters (`users/:id`),\n * a RegEx (`/test/`) or an array of strings and regexes (`['/path1', /\\/path[2-5]/, /path/:id]`). Additionally\n * returns extra information about the route, such as if the route is defined as regex or as an array.\n *\n * @param layer the layer to extract the stringified route from\n *\n * @returns an object containing the stringified route, a flag determining if the route was a regex\n *          and the number of extra segments to the matched path that are additionally in the route,\n *          if the route was an array (defaults to 0).\n */\nfunction getLayerRoutePathInfo(layer: Layer): LayerRoutePathInfo {\n  let lrp = layer.route?.path;\n\n  const isRegex = isRegExp(lrp);\n  const isArray = Array.isArray(lrp);\n\n  if (!lrp) {\n    // parse node.js major version\n    // Next.js will complain if we directly use `proces.versions` here because of edge runtime.\n    const [major] = (GLOBAL_OBJ as unknown as NodeJS.Global).process.versions.node.split('.').map(Number);\n\n    // allow call extractOriginalRoute only if node version support Regex d flag, node 16+\n    if (major >= 16) {\n      /**\n       * If lrp does not exist try to recreate original layer path from route regexp\n       */\n      lrp = extractOriginalRoute(layer.path, layer.regexp, layer.keys);\n    }\n  }\n\n  if (!lrp) {\n    return { isRegex, isArray, numExtraSegments: 0 };\n  }\n\n  const numExtraSegments = isArray\n    ? Math.max(getNumberOfArrayUrlSegments(lrp as RouteType[]) - getNumberOfUrlSegments(layer.path || ''), 0)\n    : 0;\n\n  const layerRoutePath = getLayerRoutePathString(isArray, lrp);\n\n  return { layerRoutePath, isRegex, isArray, numExtraSegments };\n}\n\n/**\n * Returns the number of URL segments in an array of routes\n *\n * Example: ['/api/test', /\\/api\\/post[0-9]/, '/users/:id/details`] -> 7\n */\nfunction getNumberOfArrayUrlSegments(routesArray: RouteType[]): number {\n  return routesArray.reduce((accNumSegments: number, currentRoute: RouteType) => {\n    // array members can be a RegEx -> convert them toString\n    return accNumSegments + getNumberOfUrlSegments(currentRoute.toString());\n  }, 0);\n}\n\n/**\n * Extracts and returns the stringified version of the layers route path\n * Handles route arrays (by joining the paths together) as well as RegExp and normal\n * string values (in the latter case the toString conversion is technically unnecessary but\n * it doesn't hurt us either).\n */\nfunction getLayerRoutePathString(isArray: boolean, lrp?: RouteType | RouteType[]): string | undefined {\n  if (isArray) {\n    return (lrp as RouteType[]).map(r => r.toString()).join(',');\n  }\n  return lrp && lrp.toString();\n}\n\n/**\n * remove duplicate segment contain in layerPath against reconstructedRoute,\n * and return only unique segment that can be added into reconstructedRoute\n */\nexport function preventDuplicateSegments(\n  originalUrl?: string,\n  reconstructedRoute?: string,\n  layerPath?: string,\n): string | undefined {\n  // filter query params\n  const normalizeURL = stripUrlQueryAndFragment(originalUrl || '');\n  const originalUrlSplit = normalizeURL?.split('/').filter(v => !!v);\n  let tempCounter = 0;\n  const currentOffset = reconstructedRoute?.split('/').filter(v => !!v).length || 0;\n  const result = layerPath\n    ?.split('/')\n    .filter(segment => {\n      if (originalUrlSplit?.[currentOffset + tempCounter] === segment) {\n        tempCounter += 1;\n        return true;\n      }\n      return false;\n    })\n    .join('/');\n  return result;\n}\n", "import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PgClientQuery = (\n  config: unknown,\n  values?: unknown,\n  callback?: (err: unknown, result: unknown) => void,\n) => void | Promise<unknown>;\n\ninterface PgClient {\n  prototype: {\n    query: PgClientQuery;\n  };\n}\n\ninterface PgClientThis {\n  database?: string;\n  host?: string;\n  port?: number;\n  user?: string;\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n  /**\n   * Supply your postgres module directly, instead of having Sentry attempt automatic resolution.\n   * Use this if you (a) use a module that's not `pg`, or (b) use a bundler that breaks resolution (e.g. esbuild).\n   *\n   * Usage:\n   * ```\n   * import pg from 'pg';\n   *\n   * Sentry.init({\n   *   integrations: [new Sentry.Integrations.Postgres({ module: pg })],\n   * });\n   * ```\n   */\n  module?: PGModule;\n}\n\ntype PGModule = { Client: PgClient; native: { Client: PgClient } | null };\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements LazyLoadedIntegration<PGModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _usePgNative: boolean;\n\n  private _module?: PGModule;\n\n  public constructor(options: PgOptions = {}) {\n    this.name = Postgres.id;\n    this._usePgNative = !!options.usePgNative;\n    this._module = options.module;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): PGModule | undefined {\n    return (this._module = this._module || loadModule('pg'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      DEBUG_BUILD && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    const Client = this._usePgNative ? pkg.native?.Client : pkg.Client;\n\n    if (!Client) {\n      DEBUG_BUILD && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: PgClientQuery) {\n      return function (this: PgClientThis, config: unknown, values: unknown, callback: unknown) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = getCurrentHub().getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n\n        const data: Record<string, string | number> = {\n          'db.system': 'postgresql',\n        };\n\n        try {\n          if (this.database) {\n            data['db.name'] = this.database;\n          }\n          if (this.host) {\n            data['server.address'] = this.host;\n          }\n          if (this.port) {\n            data['server.port'] = this.port;\n          }\n          if (this.user) {\n            data['db.user'] = this.user;\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n          origin: 'auto.db.postgres',\n          data,\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.end();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.end();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.end();\n            return res;\n          });\n        }\n\n        span?.end();\n        return rv;\n      };\n    });\n  }\n}\n", "import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Span } from '@sentry/types';\nimport { fill, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface MysqlConnection {\n  prototype: {\n    connect: () => void;\n  };\n  createQuery: () => void;\n}\n\ninterface MysqlConnectionConfig {\n  host: string;\n  port: number;\n  user: string;\n}\n\n/** Tracing integration for node-mysql package */\nexport class Mysql implements LazyLoadedIntegration<MysqlConnection> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mysql';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _module?: MysqlConnection;\n\n  public constructor() {\n    this.name = Mysql.id;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): MysqlConnection | undefined {\n    return (this._module = this._module || loadModule('mysql/lib/Connection.js'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      DEBUG_BUILD && logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    }\n\n    let mySqlConfig: MysqlConnectionConfig | undefined = undefined;\n\n    try {\n      pkg.prototype.connect = new Proxy(pkg.prototype.connect, {\n        apply(wrappingTarget, thisArg: { config: MysqlConnectionConfig }, args) {\n          if (!mySqlConfig) {\n            mySqlConfig = thisArg.config;\n          }\n          return wrappingTarget.apply(thisArg, args);\n        },\n      });\n    } catch (e) {\n      DEBUG_BUILD && logger.error('Mysql Integration was unable to instrument `mysql` config.');\n    }\n\n    function spanDataFromConfig(): Record<string, string | number | undefined> {\n      if (!mySqlConfig) {\n        return {};\n      }\n      return {\n        'server.address': mySqlConfig.host,\n        'server.port': mySqlConfig.port,\n        'db.user': mySqlConfig.user,\n      };\n    }\n\n    function finishSpan(span: Span | undefined): void {\n      if (!span) {\n        return;\n      }\n\n      const data = spanDataFromConfig();\n      Object.keys(data).forEach(key => {\n        span.setAttribute(key, data[key]);\n      });\n\n      span.end();\n    }\n\n    // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n    fill(pkg, 'createQuery', function (orig: () => void) {\n      return function (this: unknown, options: unknown, values: unknown, callback: unknown) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = getCurrentHub().getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = parentSpan?.startChild({\n          description: typeof options === 'string' ? options : (options as { sql: string }).sql,\n          op: 'db',\n          origin: 'auto.db.mysql',\n          data: {\n            'db.system': 'mysql',\n          },\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err: Error, result: unknown, fields: unknown) {\n            finishSpan(span);\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err: Error, result: unknown, fields: unknown) {\n            finishSpan(span);\n            values(err, result, fields);\n          });\n        }\n\n        // streaming, no callback!\n        const query = orig.call(this, options, values) as { on: (event: string, callback: () => void) => void };\n\n        query.on('end', () => {\n          finishSpan(span);\n        });\n\n        return query;\n      };\n    });\n  }\n}\n", "import type { Hub } from '@sentry/core';\nimport type { EventProcessor, SpanContext } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\ntype Operation = (typeof OPERATIONS)[number];\nconst OPERATIONS = [\n  'aggregate', // aggregate(pipeline, options, callback)\n  'bulkWrite', // bulkWrite(operations, options, callback)\n  'countDocuments', // countDocuments(query, options, callback)\n  'createIndex', // createIndex(fieldOrSpec, options, callback)\n  'createIndexes', // createIndexes(indexSpecs, options, callback)\n  'deleteMany', // deleteMany(filter, options, callback)\n  'deleteOne', // deleteOne(filter, options, callback)\n  'distinct', // distinct(key, query, options, callback)\n  'drop', // drop(options, callback)\n  'dropIndex', // dropIndex(indexName, options, callback)\n  'dropIndexes', // dropIndexes(options, callback)\n  'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n  'find', // find(query, options, callback)\n  'findOne', // findOne(query, options, callback)\n  'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n  'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n  'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n  'indexes', // indexes(options, callback)\n  'indexExists', // indexExists(indexes, options, callback)\n  'indexInformation', // indexInformation(options, callback)\n  'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n  'insertMany', // insertMany(docs, options, callback)\n  'insertOne', // insertOne(doc, options, callback)\n  'isCapped', // isCapped(options, callback)\n  'mapReduce', // mapReduce(map, reduce, options, callback)\n  'options', // options(options, callback)\n  'parallelCollectionScan', // parallelCollectionScan(options, callback)\n  'rename', // rename(newName, options, callback)\n  'replaceOne', // replaceOne(filter, doc, options, callback)\n  'stats', // stats(options, callback)\n  'updateMany', // updateMany(filter, update, options, callback)\n  'updateOne', // updateOne(filter, update, options, callback)\n] as const;\n\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nconst OPERATION_SIGNATURES: {\n  [op in Operation]?: string[];\n} = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  find: ['query'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update'],\n};\n\ninterface MongoCollection {\n  collectionName: string;\n  dbName: string;\n  namespace: string;\n  prototype: {\n    [operation in Operation]: (...args: unknown[]) => unknown;\n  };\n}\n\ninterface MongoOptions {\n  operations?: Operation[];\n  describeOperations?: boolean | Operation[];\n  useMongoose?: boolean;\n}\n\ninterface MongoCursor {\n  once(event: 'close', listener: () => void): void;\n}\n\nfunction isCursor(maybeCursor: MongoCursor): maybeCursor is MongoCursor {\n  return maybeCursor && typeof maybeCursor === 'object' && maybeCursor.once && typeof maybeCursor.once === 'function';\n}\n\ntype MongoModule = { Collection: MongoCollection };\n\n/** Tracing integration for mongo package */\nexport class Mongo implements LazyLoadedIntegration<MongoModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mongo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _operations: Operation[];\n  private _describeOperations?: boolean | Operation[];\n  private _useMongoose: boolean;\n\n  private _module?: MongoModule;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: MongoOptions = {}) {\n    this.name = Mongo.id;\n    this._operations = Array.isArray(options.operations) ? options.operations : (OPERATIONS as unknown as Operation[]);\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n    this._useMongoose = !!options.useMongoose;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): MongoModule | undefined {\n    const moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n    return (this._module = this._module || loadModule(moduleName));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Mongo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      const moduleName = this._useMongoose ? 'mongoose' : 'mongodb';\n      DEBUG_BUILD && logger.error(`Mongo Integration was unable to require \\`${moduleName}\\` package.`);\n      return;\n    }\n\n    this._instrumentOperations(pkg.Collection, this._operations, getCurrentHub);\n  }\n\n  /**\n   * Patches original collection methods\n   */\n  private _instrumentOperations(collection: MongoCollection, operations: Operation[], getCurrentHub: () => Hub): void {\n    operations.forEach((operation: Operation) => this._patchOperation(collection, operation, getCurrentHub));\n  }\n\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  private _patchOperation(collection: MongoCollection, operation: Operation, getCurrentHub: () => Hub): void {\n    if (!(operation in collection.prototype)) return;\n\n    const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    fill(collection.prototype, operation, function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, ...args: unknown[]) {\n        const lastArg = args[args.length - 1];\n        // eslint-disable-next-line deprecation/deprecation\n        const hub = getCurrentHub();\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = hub.getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const client = hub.getClient();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n\n        const sendDefaultPii = client?.getOptions().sendDefaultPii;\n\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {\n          // eslint-disable-next-line deprecation/deprecation\n          const span = parentSpan?.startChild(getSpanContext(this, operation, args, sendDefaultPii));\n          const maybePromiseOrCursor = orig.call(this, ...args);\n\n          if (isThenable(maybePromiseOrCursor)) {\n            return maybePromiseOrCursor.then((res: unknown) => {\n              span?.end();\n              return res;\n            });\n          }\n          // If the operation returns a Cursor\n          // we need to attach a listener to it to finish the span when the cursor is closed.\n          else if (isCursor(maybePromiseOrCursor)) {\n            const cursor = maybePromiseOrCursor as MongoCursor;\n\n            try {\n              cursor.once('close', () => {\n                span?.end();\n              });\n            } catch (e) {\n              // If the cursor is already closed, `once` will throw an error. In that case, we can\n              // finish the span immediately.\n              span?.end();\n            }\n\n            return cursor;\n          } else {\n            span?.end();\n            return maybePromiseOrCursor;\n          }\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = parentSpan?.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n\n        return orig.call(this, ...args.slice(0, -1), function (err: Error, result: unknown) {\n          span?.end();\n          lastArg(err, result);\n        });\n      };\n    });\n  }\n\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  private _getSpanContextFromOperationArguments(\n    collection: MongoCollection,\n    operation: Operation,\n    args: unknown[],\n    sendDefaultPii: boolean | undefined = false,\n  ): SpanContext {\n    const data: { [key: string]: string } = {\n      'db.system': 'mongodb',\n      'db.name': collection.dbName,\n      'db.operation': operation,\n      'db.mongodb.collection': collection.collectionName,\n    };\n    const spanContext: SpanContext = {\n      op: 'db',\n      // TODO v8: Use `${collection.collectionName}.${operation}`\n      origin: 'auto.db.mongo',\n      description: operation,\n      data,\n    };\n\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    const signature = OPERATION_SIGNATURES[operation];\n    const shouldDescribe = Array.isArray(this._describeOperations)\n      ? this._describeOperations.includes(operation)\n      : this._describeOperations;\n\n    if (!signature || !shouldDescribe || !sendDefaultPii) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        const [map, reduce] = args as { name?: string }[];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (let i = 0; i < signature.length; i++) {\n          data[`db.mongodb.${signature[i]}`] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n\n    return spanContext;\n  }\n}\n", "import { getCurrentHub, startSpan } from '@sentry/core';\nimport type { Integration } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PrismaAction =\n  | 'findUnique'\n  | 'findMany'\n  | 'findFirst'\n  | 'create'\n  | 'createMany'\n  | 'update'\n  | 'updateMany'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw';\n\ninterface PrismaMiddlewareParams {\n  model?: unknown;\n  action: PrismaAction;\n  args: unknown;\n  dataPath: string[];\n  runInTransaction: boolean;\n}\n\ntype PrismaMiddleware<T = unknown> = (\n  params: PrismaMiddlewareParams,\n  next: (params: PrismaMiddlewareParams) => Promise<T>,\n) => Promise<T>;\n\ninterface PrismaClient {\n  _sentryInstrumented?: boolean;\n  _engineConfig?: {\n    activeProvider?: string;\n    clientVersion?: string;\n  };\n  $use: (cb: PrismaMiddleware) => void;\n}\n\nfunction isValidPrismaClient(possibleClient: unknown): possibleClient is PrismaClient {\n  return !!possibleClient && !!(possibleClient as PrismaClient)['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nexport class Prisma implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Prisma';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { client?: unknown } = {}) {\n    this.name = Prisma.id;\n\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      addNonEnumerableProperty(options.client as any, '_sentryInstrumented', true);\n\n      const clientData: Record<string, string | number> = {};\n      try {\n        const engineConfig = (options.client as PrismaClient)._engineConfig;\n        if (engineConfig) {\n          const { activeProvider, clientVersion } = engineConfig;\n          if (activeProvider) {\n            clientData['db.system'] = activeProvider;\n          }\n          if (clientVersion) {\n            clientData['db.prisma.version'] = clientVersion;\n          }\n        }\n      } catch (e) {\n        // ignore\n      }\n\n      options.client.$use((params, next: (params: PrismaMiddlewareParams) => Promise<unknown>) => {\n        // eslint-disable-next-line deprecation/deprecation\n        if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n          return next(params);\n        }\n\n        const action = params.action;\n        const model = params.model;\n\n        return startSpan(\n          {\n            name: model ? `${model} ${action}` : action,\n            op: 'db.prisma',\n            origin: 'auto.db.prisma',\n            data: { ...clientData, 'db.operation': action },\n          },\n          () => next(params),\n        );\n      });\n    } else {\n      DEBUG_BUILD &&\n        logger.warn('Unsupported Prisma client provided to PrismaIntegration. Provided client:', options.client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // Noop - here for backwards compatibility\n  }\n}\n", "import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype GraphQLModule = {\n  [method: string]: (...args: unknown[]) => unknown;\n};\n\n/** Tracing integration for graphql package */\nexport class GraphQL implements LazyLoadedIntegration<GraphQLModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GraphQL';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _module?: GraphQLModule;\n\n  public constructor() {\n    this.name = GraphQL.id;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): GraphQLModule | undefined {\n    return (this._module = this._module || loadModule('graphql/execution/execute.js'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('GraphQL Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      DEBUG_BUILD && logger.error('GraphQL Integration was unable to require graphql/execution package.');\n      return;\n    }\n\n    fill(pkg, 'execute', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, ...args: unknown[]) {\n        // eslint-disable-next-line deprecation/deprecation\n        const scope = getCurrentHub().getScope();\n        // eslint-disable-next-line deprecation/deprecation\n        const parentSpan = scope.getSpan();\n\n        // eslint-disable-next-line deprecation/deprecation\n        const span = parentSpan?.startChild({\n          description: 'execute',\n          op: 'graphql.execute',\n          origin: 'auto.graphql.graphql',\n        });\n\n        // eslint-disable-next-line deprecation/deprecation\n        scope?.setSpan(span);\n\n        const rv = orig.call(this, ...args);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.end();\n            // eslint-disable-next-line deprecation/deprecation\n            scope?.setSpan(parentSpan);\n\n            return res;\n          });\n        }\n\n        span?.end();\n        // eslint-disable-next-line deprecation/deprecation\n        scope?.setSpan(parentSpan);\n        return rv;\n      };\n    });\n  }\n}\n", "import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\ntype GraphQLModule = {\n  GraphQLFactory: {\n    prototype: {\n      create: (resolvers: ApolloModelResolvers[]) => unknown;\n    };\n  };\n};\n\ntype ApolloModule = {\n  ApolloServerBase: {\n    prototype: {\n      constructSchema: (config: unknown) => unknown;\n    };\n  };\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements LazyLoadedIntegration<GraphQLModule & ApolloModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private readonly _useNest: boolean;\n\n  private _module?: GraphQLModule & ApolloModule;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this.name = Apollo.id;\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): (GraphQLModule & ApolloModule) | undefined {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      DEBUG_BUILD && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        DEBUG_BUILD && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (DEBUG_BUILD) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      // eslint-disable-next-line deprecation/deprecation\n      const scope = getCurrentHub().getScope();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n      // eslint-disable-next-line deprecation/deprecation\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n        origin: 'auto.graphql.apollo',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.end();\n          return res;\n        });\n      }\n\n      span?.end();\n\n      return rv;\n    };\n  });\n}\n", "import type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire } from '@sentry/utils';\n\nexport interface LazyLoadedIntegration<T = object> extends Integration {\n  /**\n   * Loads the integration's dependency and caches it so it doesn't have to be loaded again.\n   *\n   * If this returns undefined, the dependency could not be loaded.\n   */\n  loadDependency(): T | undefined;\n}\n\nexport const lazyLoadedNodePerformanceMonitoringIntegrations: (() => LazyLoadedIntegration)[] = [\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo({ useNestjs: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './graphql') as {\n      GraphQL: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.GraphQL();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo({ mongoose: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './mysql') as {\n      Mysql: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mysql();\n  },\n  () => {\n    const integration = dynamicRequire(module, './postgres') as {\n      Postgres: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Postgres();\n  },\n];\n", "import { GLOBAL_OBJ } from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n", "import type { IdleTransaction, SpanStatusType } from '@sentry/core';\nimport { getActiveTransaction, spanToJSON } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { WINDOW } from './types';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      // eslint-disable-next-line deprecation/deprecation\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (WINDOW.document.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        const { op, status } = spanToJSON(activeTransaction);\n\n        DEBUG_BUILD &&\n          logger.log(`[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${op}`);\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          activeTransaction.setStatus(statusType);\n        }\n        // TODO: Can we rewrite this to an attribute?\n        // eslint-disable-next-line deprecation/deprecation\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metric, ReportCallback } from '../types';\n\nexport const bindReporter = (\n  callback: ReportCallback,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n", "/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { NavigationTimingPolyfillEntry } from '../types';\n\nconst getNavigationEntryFromPerformanceTiming = (): NavigationTimingPolyfillEntry => {\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  const type = WINDOW.performance.navigation.type;\n\n  const navigationEntry: { [key: string]: number | string } = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      // eslint-disable-next-line deprecation/deprecation\n      navigationEntry[key] = Math.max((timing[key as keyof PerformanceTiming] as number) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry as unknown as NavigationTimingPolyfillEntry;\n};\n\nexport const getNavigationEntry = (): PerformanceNavigationTiming | NavigationTimingPolyfillEntry | undefined => {\n  if (WINDOW.__WEB_VITALS_POLYFILL__) {\n    return (\n      WINDOW.performance &&\n      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||\n        getNavigationEntryFromPerformanceTiming())\n    );\n  } else {\n    return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\n", "/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const getActivationStart = (): number => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\nimport { getActivationStart } from './getActivationStart';\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  const navEntry = getNavigationEntry();\n  let navigationType: Metric['navigationType'] = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-') as Metric['navigationType'];\n    }\n  }\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good', // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FirstInputPolyfillEntry, NavigationTimingPolyfillEntry, PerformancePaintTiming } from '../types';\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\ninterface PerformanceEntryMap {\n  event: PerformanceEventTiming[];\n  paint: PerformancePaintTiming[];\n  'layout-shift': LayoutShift[];\n  'largest-contentful-paint': LargestContentfulPaint[];\n  'first-input': PerformanceEventTiming[] | FirstInputPolyfillEntry[];\n  navigation: PerformanceNavigationTiming[] | NavigationTimingPolyfillEntry[];\n  resource: PerformanceResourceTiming[];\n  longtask: PerformanceEntry[];\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = <K extends keyof PerformanceEntryMap>(\n  type: K,\n  callback: (entries: PerformanceEntryMap[K]) => void,\n  opts?: PerformanceObserverInit,\n): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() as PerformanceEntryMap[K]);\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) as PerformanceObserverInit,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || WINDOW.document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { CLSMetric, ReportCallback, StopListening } from './types';\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: ReportCallback): StopListening | undefined => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries: LayoutShift[]): void => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      handleEntries(po.takeRecords() as CLSMetric['entries']);\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  return WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { FIDMetric, PerformanceEventTiming, ReportCallback } from './types';\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: ReportCallback): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntry = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries: FIDMetric['entries']): void => {\n    (entries as PerformanceEventTiming[]).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() as FIDMetric['entries']);\n      po.disconnect();\n    }, true);\n  }\n};\n", "/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { LCPMetric, ReportCallback, StopListening } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nexport const onLCP = (onReport: ReportCallback): StopListening | undefined => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n", "import { getFunctionName, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { onCLS } from './web-vitals/getCLS';\nimport { onFID } from './web-vitals/getFID';\nimport { onLCP } from './web-vitals/getLCP';\nimport { observe } from './web-vitals/lib/observe';\n\ntype InstrumentHandlerTypePerformanceObserver = 'longtask' | 'event' | 'navigation' | 'paint' | 'resource';\n\ntype InstrumentHandlerTypeMetric = 'cls' | 'lcp' | 'fid';\n\n// We provide this here manually instead of relying on a global, as this is not available in non-browser environements\n// And we do not want to expose such types\ninterface PerformanceEntry {\n  readonly duration: number;\n  readonly entryType: string;\n  readonly name: string;\n  readonly startTime: number;\n  toJSON(): Record<string, unknown>;\n}\n\ninterface Metric {\n  /**\n   * The name of the metric (in acronym form).\n   */\n  name: 'CLS' | 'FCP' | 'FID' | 'INP' | 'LCP' | 'TTFB';\n\n  /**\n   * The current value of the metric.\n   */\n  value: number;\n\n  /**\n   * The rating as to whether the metric value is within the \"good\",\n   * \"needs improvement\", or \"poor\" thresholds of the metric.\n   */\n  rating: 'good' | 'needs-improvement' | 'poor';\n\n  /**\n   * The delta between the current value and the last-reported value.\n   * On the first report, `delta` and `value` will always be the same.\n   */\n  delta: number;\n\n  /**\n   * A unique ID representing this particular metric instance. This ID can\n   * be used by an analytics tool to dedupe multiple values sent for the same\n   * metric instance, or to group multiple deltas together and calculate a\n   * total. It can also be used to differentiate multiple different metric\n   * instances sent from the same page, which can happen if the page is\n   * restored from the back/forward cache (in that case new metrics object\n   * get created).\n   */\n  id: string;\n\n  /**\n   * Any performance entries relevant to the metric value calculation.\n   * The array may also be empty if the metric value was not based on any\n   * entries (e.g. a CLS value of 0 given no layout shifts).\n   */\n  entries: PerformanceEntry[];\n\n  /**\n   * The type of navigation\n   *\n   * Navigation Timing API (or `undefined` if the browser doesn't\n   * support that API). For pages that are restored from the bfcache, this\n   * value will be 'back-forward-cache'.\n   */\n  navigationType: 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender';\n}\n\ntype InstrumentHandlerType = InstrumentHandlerTypeMetric | InstrumentHandlerTypePerformanceObserver;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype InstrumentHandlerCallback = (data: any) => void;\n\ntype CleanupHandlerCallback = () => void;\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\nlet _previousCls: Metric | undefined;\nlet _previousFid: Metric | undefined;\nlet _previousLcp: Metric | undefined;\n\n/**\n * Add a callback that will be triggered when a CLS metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addClsInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('cls', callback, instrumentCls, _previousCls);\n}\n\n/**\n * Add a callback that will be triggered when a LCP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addLcpInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addFidInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n}\n\nexport function addPerformanceInstrumentationHandler(\n  type: 'event',\n  callback: (data: { entries: (PerformanceEntry & { target?: unknown | null })[] }) => void,\n): CleanupHandlerCallback;\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback;\n\n/**\n * Add a callback that will be triggered when a performance observer is triggered,\n * and receives the entries of the observer.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentPerformanceObserver(type);\n    instrumented[type] = true;\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\n/** Trigger all handlers of a given type. */\nfunction triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = handlers[type];\n\n  if (!typeHandlers || !typeHandlers.length) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nfunction instrumentCls(): void {\n  onCLS(metric => {\n    triggerHandlers('cls', {\n      metric,\n    });\n    _previousCls = metric;\n  });\n}\n\nfunction instrumentFid(): void {\n  onFID(metric => {\n    triggerHandlers('fid', {\n      metric,\n    });\n    _previousFid = metric;\n  });\n}\n\nfunction instrumentLcp(): void {\n  onLCP(metric => {\n    triggerHandlers('lcp', {\n      metric,\n    });\n    _previousLcp = metric;\n  });\n}\n\nfunction addMetricObserver(\n  type: InstrumentHandlerTypeMetric,\n  callback: InstrumentHandlerCallback,\n  instrumentFn: () => void,\n  previousValue: Metric | undefined,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n\n  if (previousValue) {\n    callback({ metric: previousValue });\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\nfunction instrumentPerformanceObserver(type: InstrumentHandlerTypePerformanceObserver): void {\n  const options: PerformanceObserverInit = {};\n\n  // Special per-type options we want to use\n  if (type === 'event') {\n    options.durationThreshold = 0;\n  }\n\n  observe(\n    type,\n    entries => {\n      triggerHandlers(type, { entries });\n    },\n    options,\n  );\n}\n\nfunction addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n// Get a callback which can be called to remove the instrumentation handler\nfunction getCleanupCallback(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): CleanupHandlerCallback {\n  return () => {\n    const typeHandlers = handlers[type];\n\n    if (!typeHandlers) {\n      return;\n    }\n\n    const index = typeHandlers.indexOf(callback);\n    if (index !== -1) {\n      typeHandlers.splice(index, 1);\n    }\n  };\n}\n", "import type { Transaction } from '@sentry/core';\nimport type { Span, SpanContext } from '@sentry/types';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n *\n * Note: this will not be possible anymore in v8,\n * unless we do some special handling for browser here...\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  // eslint-disable-next-line deprecation/deprecation\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n", "/* eslint-disable max-lines */\nimport type { IdleTransaction, Transaction } from '@sentry/core';\nimport { getActiveTransaction, setMeasurement } from '@sentry/core';\nimport type { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getComponentName, htmlTreeAsString, logger, parseUrl } from '@sentry/utils';\n\nimport { spanToJSON } from '@sentry/core';\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport {\n  addClsInstrumentationHandler,\n  addFidInstrumentationHandler,\n  addLcpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n} from '../instrument';\nimport { WINDOW } from '../types';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport type { NavigatorDeviceMemory, NavigatorNetworkInformation } from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time: number): number {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n\n    return (): void => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  });\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        const span: SpanContext = {\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          origin: 'auto.ui.browser.metrics',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        };\n\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          span.attributes = { 'ui.component_name': componentName };\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        transaction.startChild(span);\n      }\n    }\n  });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): () => void {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): () => void {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): () => void {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp: number | undefined;\n  let requestStartTimestamp: number | undefined;\n\n  const { op, start_timestamp: transactionStartTime } = spanToJSON(transaction);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (transaction.op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        _addResourceSpans(transaction, entry, entry.name as string, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number' && transactionStartTime) {\n      DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transactionStartTime) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || !transactionStartTime || timeOrigin >= transactionStartTime) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transactionStartTime) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire transaction if it contained faulty spans.\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'request',\n      startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'response',\n      startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n  }\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n  renderBlockingStatus?: string;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceUrl: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const parsedUrl = parseUrl(resourceUrl);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  setResourceEntrySizeData(data, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(data, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(data, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  if (parsedUrl.protocol) {\n    data['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n\n  if (parsedUrl.host) {\n    data['server.address'] = parsedUrl.host;\n  }\n\n  data['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceUrl.replace(WINDOW.location.origin, ''),\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  data: Record<string, unknown>,\n  entry: ResourceEntry,\n  key: keyof Pick<ResourceEntry, 'transferSize' | 'encodedBodySize' | 'decodedBodySize'>,\n  dataKey: 'http.response_transfer_size' | 'http.response_content_length' | 'http.decoded_response_content_length',\n): void {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    data[dataKey] = entryVal;\n  }\n}\n", "import {\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getRootSpan,\n  hasTracingEnabled,\n  spanToTraceHeader,\n} from '@sentry/core';\nimport type { Client, HandlerDataFetch, Scope, Span, SpanOrigin } from '@sentry/types';\nimport {\n  BAGGAGE_HEADER_NAME,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  isInstanceOf,\n} from '@sentry/utils';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        span.setHttpStatus(handlerData.response.status);\n\n        const contentLength =\n          handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n        if (contentLength) {\n          const contentLengthNum = parseInt(contentLength);\n          if (contentLengthNum > 0) {\n            span.setAttribute('http.response_content_length', contentLengthNum);\n          }\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.end();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const client = getClient();\n  const parentSpan = getActiveSpan();\n\n  const { method, url } = handlerData.fetchData;\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? // eslint-disable-next-line deprecation/deprecation\n        parentSpan.startChild({\n          data: {\n            url,\n            type: 'fetch',\n            'http.method': method,\n          },\n          description: `${method} ${url}`,\n          op: 'http.client',\n          origin: spanOrigin,\n        })\n      : undefined;\n\n  if (span) {\n    handlerData.fetchData.__span = span.spanContext().spanId;\n    spans[span.spanContext().spanId] = span;\n  }\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nexport function addTracingHeadersToFetchRequest(\n  request: string | unknown, // unknown is actually type Request but we can't export DOM types from this package,\n  client: Client,\n  scope: Scope,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  requestSpan?: Span,\n): PolymorphicRequestHeaders | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  const span = requestSpan || scope.getSpan();\n\n  const transaction = span && getRootSpan(span);\n\n  const { traceId, sampled, dsc } = scope.getPropagationContext();\n\n  const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, undefined, sampled);\n  const dynamicSamplingContext = transaction\n    ? getDynamicSamplingContextFromSpan(transaction)\n    : dsc\n      ? dsc\n      : getDynamicSamplingContextFromClient(traceId, client, scope);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n  const headers =\n    options.headers ||\n    (typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : undefined);\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n", "/* eslint-disable max-lines */\nimport {\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getRootSpan,\n  hasTracingEnabled,\n  spanToJSON,\n  spanToTraceHeader,\n} from '@sentry/core';\nimport type { HandlerDataXhr, SentryWrappedXMLHttpRequest, Span } from '@sentry/types';\nimport {\n  BAGGAGE_HEADER_NAME,\n  SENTRY_XHR_DATA_KEY,\n  addFetchInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  browserPerformanceTimeOrigin,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport { instrumentFetchRequest } from '../common/fetch';\nimport { addPerformanceInstrumentationHandler } from './instrument';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * @deprecated Use the top-level `tracePropagationTargets` option in `Sentry.init` instead.\n   * This option will be removed in v8.\n   *\n   * Default: ['localhost', /^\\//] @see {DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * If true, Sentry will capture http timings and add them to the corresponding http spans.\n   *\n   * Default: true\n   */\n  enableHTTPTimings: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  const {\n    traceFetch,\n    traceXHR,\n    // eslint-disable-next-line deprecation/deprecation\n    tracePropagationTargets,\n    // eslint-disable-next-line deprecation/deprecation\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addFetchInstrumentationHandler(handlerData => {\n      const createdSpan = instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addXhrInstrumentationHandler(handlerData => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\nfunction isPerformanceResourceTiming(entry: PerformanceEntry): entry is PerformanceResourceTiming {\n  return (\n    entry.entryType === 'resource' &&\n    'initiatorType' in entry &&\n    typeof (entry as PerformanceResourceTiming).nextHopProtocol === 'string' &&\n    (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest')\n  );\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span: Span): void {\n  const { url } = spanToJSON(span).data || {};\n\n  if (!url || typeof url !== 'string') {\n    return;\n  }\n\n  const cleanup = addPerformanceInstrumentationHandler('resource', ({ entries }) => {\n    entries.forEach(entry => {\n      if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setAttribute(...data));\n        // In the next tick, clean this handler up\n        // We have to wait here because otherwise this cleans itself up before it is fully done\n        setTimeout(cleanup);\n      }\n    });\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nexport function extractNetworkProtocol(nextHopProtocol: string): { name: string; version: string } {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/');\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1];\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time: number = 0): number {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming: PerformanceResourceTiming): [string, string | number][] {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData: [string, string | number][] = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\n// eslint-disable-next-line complexity\nexport function xhrCallback(\n  handlerData: HandlerDataXhr,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): Span | undefined {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!hasTracingEnabled() || !xhr || xhr.__sentry_own_request__ || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span && sentryXhrData.status_code !== undefined) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.end();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const parentSpan = getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? // eslint-disable-next-line deprecation/deprecation\n        parentSpan.startChild({\n          data: {\n            type: 'xhr',\n            'http.method': sentryXhrData.method,\n            url: sentryXhrData.url,\n          },\n          description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n          op: 'http.client',\n          origin: 'auto.http.browser',\n        })\n      : undefined;\n\n  if (span) {\n    xhr.__sentry_xhr_span_id__ = span.spanContext().spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n  }\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n    if (span) {\n      const transaction = span && getRootSpan(span);\n      const dynamicSamplingContext = transaction && getDynamicSamplingContextFromSpan(transaction);\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, spanToTraceHeader(span), sentryBaggageHeader);\n    } else {\n      const client = getClient();\n      const { traceId, sampled, dsc } = scope.getPropagationContext();\n      const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n      const dynamicSamplingContext =\n        dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n    }\n  }\n\n  return span;\n}\n\nfunction setHeaderOnXhr(\n  xhr: SentryWrappedXMLHttpRequest,\n  sentryTraceHeader: string,\n  sentryBaggageHeader: string | undefined,\n): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader!('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader!(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n", "import type { Transaction, TransactionContext } from '@sentry/types';\nimport { addHistoryInstrumentationHandler, browserPerformanceTimeOrigin, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { WINDOW } from './types';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!WINDOW || !WINDOW.location) {\n    DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = WINDOW.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      origin: 'auto.pageload.browser',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addHistoryInstrumentationHandler(({ to, from }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.end();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          origin: 'auto.navigation.browser',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n", "/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  TRACING_DEFAULTS,\n  addTracingExtensions,\n  getActiveTransaction,\n  spanIsSampled,\n  startIdleTransaction,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { getDomElement, logger, tracingContextFromHeaders } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  private _hasSetTracePropagationTargets: boolean;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n    this._hasSetTracePropagationTargets = false;\n\n    addTracingExtensions();\n\n    if (DEBUG_BUILD) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    // eslint-disable-next-line deprecation/deprecation\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (DEBUG_BUILD && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const hub = this._getCurrentHub();\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTrace = isPageloadTransaction ? getMetaContent('sentry-trace') : '';\n    const baggage = isPageloadTransaction ? getMetaContent('baggage') : '';\n    const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n      sentryTrace,\n      baggage,\n    );\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceparentData,\n      metadata: {\n        // eslint-disable-next-line deprecation/deprecation\n        ...context.metadata,\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    // eslint-disable-next-line deprecation/deprecation\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? // eslint-disable-next-line deprecation/deprecation\n          { ...finalContext.metadata, source: 'custom' }\n        : // eslint-disable-next-line deprecation/deprecation\n          finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const sourceFromData = context.data && context.data[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    // eslint-disable-next-line deprecation/deprecation\n    const sourceFromMetadata = finalContext.metadata && finalContext.metadata.source;\n\n    this._latestRouteSource = sourceFromData || sourceFromMetadata;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (finalContext.sampled === false) {\n      DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n      isPageloadTransaction, // should wait for finish signal if it's a pageload transaction\n    );\n\n    if (isPageloadTransaction) {\n      WINDOW.document.addEventListener('readystatechange', () => {\n        if (['interactive', 'complete'].includes(WINDOW.document.readyState)) {\n          idleTransaction.sendAutoFinishSignal();\n        }\n      });\n\n      if (['interactive', 'complete'].includes(WINDOW.document.readyState)) {\n        idleTransaction.sendAutoFinishSignal();\n      }\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = hub.getScope();\n\n    // If it's a pageload and there is a meta tag set\n    // use the traceparentData as the propagation context\n    if (isPageloadTransaction && traceparentData) {\n      scope.setPropagationContext(propagationContext);\n    } else {\n      // Navigation transactions should set a new propagation context based on the\n      // created idle transaction.\n      scope.setPropagationContext({\n        traceId: idleTransaction.spanContext().traceId,\n        spanId: idleTransaction.spanContext().spanId,\n        parentSpanId: idleTransaction.parentSpanId,\n        sampled: spanIsSampled(idleTransaction),\n      });\n    }\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      // eslint-disable-next-line deprecation/deprecation\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        DEBUG_BUILD &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.end();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        data: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | undefined {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n", "import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n", "Object.defineProperty(exports, '__esModule', { value: true });\n\nconst core = require('@sentry/core');\nconst utils = require('@sentry/utils');\nconst express = require('./node/integrations/express.js');\nconst postgres = require('./node/integrations/postgres.js');\nconst mysql = require('./node/integrations/mysql.js');\nconst mongo = require('./node/integrations/mongo.js');\nconst prisma = require('./node/integrations/prisma.js');\nconst graphql = require('./node/integrations/graphql.js');\nconst apollo = require('./node/integrations/apollo.js');\nconst lazy = require('./node/integrations/lazy.js');\nconst browsertracing = require('./browser/browsertracing.js');\nconst request = require('./browser/request.js');\nconst instrument = require('./browser/instrument.js');\nconst fetch = require('./common/fetch.js');\nconst extensions = require('./extensions.js');\n\n\n\nexports.IdleTransaction = core.IdleTransaction;\nexports.Span = core.Span;\nexports.SpanStatus = core.SpanStatus;\nexports.Transaction = core.Transaction;\nexports.extractTraceparentData = core.extractTraceparentData;\nexports.getActiveTransaction = core.getActiveTransaction;\nexports.hasTracingEnabled = core.hasTracingEnabled;\nexports.spanStatusfromHttpCode = core.spanStatusfromHttpCode;\nexports.startIdleTransaction = core.startIdleTransaction;\nexports.TRACEPARENT_REGEXP = utils.TRACEPARENT_REGEXP;\nexports.stripUrlQueryAndFragment = utils.stripUrlQueryAndFragment;\nexports.Express = express.Express;\nexports.Postgres = postgres.Postgres;\nexports.Mysql = mysql.Mysql;\nexports.Mongo = mongo.Mongo;\nexports.Prisma = prisma.Prisma;\nexports.GraphQL = graphql.GraphQL;\nexports.Apollo = apollo.Apollo;\nexports.lazyLoadedNodePerformanceMonitoringIntegrations = lazy.lazyLoadedNodePerformanceMonitoringIntegrations;\nexports.BROWSER_TRACING_INTEGRATION_ID = browsertracing.BROWSER_TRACING_INTEGRATION_ID;\nexports.BrowserTracing = browsertracing.BrowserTracing;\nexports.defaultRequestInstrumentationOptions = request.defaultRequestInstrumentationOptions;\nexports.instrumentOutgoingRequests = request.instrumentOutgoingRequests;\nexports.addClsInstrumentationHandler = instrument.addClsInstrumentationHandler;\nexports.addFidInstrumentationHandler = instrument.addFidInstrumentationHandler;\nexports.addLcpInstrumentationHandler = instrument.addLcpInstrumentationHandler;\nexports.addPerformanceInstrumentationHandler = instrument.addPerformanceInstrumentationHandler;\nexports.addTracingHeadersToFetchRequest = fetch.addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = fetch.instrumentFetchRequest;\nexports.addExtensionMethods = extensions.addExtensionMethods;\n//# sourceMappingURL=index.js.map\n", "import type { LazyLoadedIntegration } from '@sentry-internal/tracing';\nimport { lazyLoadedNodePerformanceMonitoringIntegrations } from '@sentry-internal/tracing';\nimport type { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/**\n * Automatically detects and returns integrations that will work with your dependencies.\n */\nexport function autoDiscoverNodePerformanceMonitoringIntegrations(): Integration[] {\n  const loadedIntegrations = lazyLoadedNodePerformanceMonitoringIntegrations\n    .map(tryLoad => {\n      try {\n        return tryLoad();\n      } catch (_) {\n        return undefined;\n      }\n    })\n    .filter(integration => !!integration) as LazyLoadedIntegration[];\n\n  if (loadedIntegrations.length === 0) {\n    logger.warn('Performance monitoring integrations could not be automatically loaded.');\n  }\n\n  // Only return integrations where their dependencies loaded successfully.\n  return loadedIntegrations.filter(integration => !!integration.loadDependency());\n}\n", "import * as os from 'os';\nimport { TextEncoder } from 'util';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { SDK_VERSION, ServerRuntimeClient } from '@sentry/core';\n\nimport type { NodeClientOptions } from './types';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends ServerRuntimeClient<NodeClientOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeClientOptions) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.node',\n      packages: [\n        {\n          name: 'npm:@sentry/node',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n    options.transportOptions = {\n      textEncoder: new TextEncoder(),\n      ...options.transportOptions,\n    };\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    super(clientOptions);\n  }\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following licence:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\nimport * as http from 'http';\nimport type * as net from 'net';\nimport type { Duplex } from 'stream';\nimport type * as tls from 'tls';\n\nexport * from './helpers';\n\ninterface HttpConnectOpts extends net.TcpNetConnectOpts {\n  secureEndpoint: false;\n  protocol?: string;\n}\n\ninterface HttpsConnectOpts extends tls.ConnectionOptions {\n  secureEndpoint: true;\n  protocol?: string;\n  port: number;\n}\n\nexport type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\ninterface InternalState {\n  defaultPort?: number;\n  protocol?: string;\n  currentSocket?: Duplex;\n}\n\nexport abstract class Agent extends http.Agent {\n  private [INTERNAL]: InternalState;\n\n  // Set by `http.Agent` - missing from `@types/node`\n  options!: Partial<net.TcpNetConnectOpts & tls.ConnectionOptions>;\n  keepAlive!: boolean;\n\n  constructor(opts?: http.AgentOptions) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  abstract connect(\n    req: http.ClientRequest,\n    options: AgentConnectOpts,\n  ): Promise<Duplex | http.Agent> | Duplex | http.Agent;\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options?: AgentConnectOpts): boolean {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options as any).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection(): Duplex {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort(): number {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v: number) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol(): string {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v: string) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following licence:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable jsdoc/require-jsdoc */\nimport type { IncomingHttpHeaders } from 'http';\nimport type { Readable } from 'stream';\nimport { logger } from '@sentry/utils';\n\nfunction debug(...args: unknown[]): void {\n  logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nexport interface ConnectResponse {\n  statusCode: number;\n  statusText: string;\n  headers: IncomingHttpHeaders;\n}\n\nexport function parseProxyResponse(socket: Readable): Promise<{ connect: ConnectResponse; buffered: Buffer }> {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers: Buffer[] = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err: Error) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b: Buffer) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +firstLineParts[1];\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers: IncomingHttpHeaders = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n", "/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following licence:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport assert from 'assert';\nimport type * as http from 'http';\nimport type { OutgoingHttpHeaders } from 'http';\nimport * as net from 'net';\nimport * as tls from 'tls';\n// TODO (v8): Remove this when Node < 12 is no longer supported\nimport { URL } from 'url';\nimport { logger } from '@sentry/utils';\nimport { Agent } from './base';\nimport type { AgentConnectOpts } from './base';\nimport { parseProxyResponse } from './parse-proxy-response';\n\nfunction debug(...args: unknown[]): void {\n  logger.log('[https-proxy-agent]', ...args);\n}\n\ntype Protocol<T> = T extends `${infer Protocol}:${infer _}` ? Protocol : never;\n\ntype ConnectOptsMap = {\n  http: Omit<net.TcpNetConnectOpts, 'host' | 'port'>;\n  https: Omit<tls.ConnectionOptions, 'host' | 'port'>;\n};\n\ntype ConnectOpts<T> = {\n  [P in keyof ConnectOptsMap]: Protocol<T> extends P ? ConnectOptsMap[P] : never;\n}[keyof ConnectOptsMap];\n\nexport type HttpsProxyAgentOptions<T> = ConnectOpts<T> &\n  http.AgentOptions & {\n    headers?: OutgoingHttpHeaders | (() => OutgoingHttpHeaders);\n  };\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nexport class HttpsProxyAgent<Uri extends string> extends Agent {\n  static protocols = ['http', 'https'] as const;\n\n  readonly proxy: URL;\n  proxyHeaders: OutgoingHttpHeaders | (() => OutgoingHttpHeaders);\n  connectOpts: net.TcpNetConnectOpts & tls.ConnectionOptions;\n\n  constructor(proxy: Uri | URL, opts?: HttpsProxyAgentOptions<Uri>) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req: http.ClientRequest, opts: AgentConnectOpts): Promise<net.Socket> {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket: net.Socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers: OutgoingHttpHeaders =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s: net.Socket) => {\n      debug('Replaying proxy buffer for failed request');\n      assert(s.listenerCount('data') > 0);\n\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n}\n\nfunction resume(socket: net.Socket | tls.TLSSocket): void {\n  socket.resume();\n}\n\nfunction omit<T extends object, K extends [...(keyof T)[]]>(\n  obj: T,\n  ...keys: K\n): {\n  [K2 in Exclude<keyof T, K[number]>]: T[K2];\n} {\n  const ret = {} as {\n    [K in keyof typeof obj]: (typeof obj)[K];\n  };\n  let key: keyof typeof obj;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n", "import * as http from 'http';\nimport * as https from 'https';\nimport { Readable } from 'stream';\nimport { URL } from 'url';\nimport { createGzip } from 'zlib';\nimport { createTransport } from '@sentry/core';\nimport type {\n  BaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\nimport { HttpsProxyAgent } from '../proxy';\n\nimport type { HTTPModule } from './http-module';\n\nexport interface NodeTransportOptions extends BaseTransportOptions {\n  /** Define custom headers */\n  headers?: Record<string, string>;\n  /** Set a proxy that should be used for outbound requests. */\n  proxy?: string;\n  /** HTTPS proxy CA certificates */\n  caCerts?: string | Buffer | Array<string | Buffer>;\n  /** Custom HTTP module. Defaults to the native 'http' and 'https' modules. */\n  httpModule?: HTTPModule;\n  /** Allow overriding connection keepAlive, defaults to false */\n  keepAlive?: boolean;\n}\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body: Uint8Array | string): Readable {\n  return new Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nexport function makeNodeTransport(options: NodeTransportOptions): Transport {\n  let urlSegments: URL;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v7): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new HttpsProxyAgent(proxy) as http.Agent)\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, options.httpModule ?? nativeHttpModule, agent);\n  return createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments: URL, proxy: string | undefined): string | undefined {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy =\n    no_proxy &&\n    no_proxy\n      .split(',')\n      .some(\n        exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n      );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options: NodeTransportOptions,\n  httpModule: HTTPModule,\n  agent: http.Agent,\n): TransportRequestExecutor {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    return new Promise((resolve, reject) => {\n      let body = streamFromBody(request.body);\n\n      const headers: Record<string, string> = { ...options.headers };\n\n      if (request.body.length > GZIP_THRESHOLD) {\n        headers['content-encoding'] = 'gzip';\n        body = body.pipe(createGzip());\n      }\n\n      const req = httpModule.request(\n        {\n          method: 'POST',\n          agent,\n          headers,\n          hostname,\n          path: `${pathname}${search}`,\n          port,\n          protocol,\n          ca: options.caCerts,\n        },\n        res => {\n          res.on('data', () => {\n            // Drain socket\n          });\n\n          res.on('end', () => {\n            // Drain socket\n          });\n\n          res.setEncoding('utf8');\n\n          // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n          // https://nodejs.org/api/http.html#http_message_headers\n          const retryAfterHeader = res.headers['retry-after'] ?? null;\n          const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n          resolve({\n            statusCode: res.statusCode,\n            headers: {\n              'retry-after': retryAfterHeader,\n              'x-sentry-rate-limits': Array.isArray(rateLimitsHeader) ? rateLimitsHeader[0] : rateLimitsHeader,\n            },\n          });\n        },\n      );\n\n      req.on('error', reject);\n      body.pipe(req);\n    });\n  };\n}\n", "import { parseSemver } from '@sentry/utils';\n\nexport const NODE_VERSION = parseSemver(process.versions.node) as { major: number; minor: number; patch: number };\n", "import * as domain from 'domain';\nimport type { Carrier, Hub, RunWithAsyncContextOptions } from '@sentry/core';\nimport { ensureHubOnCarrier, getHubFromCarrier, setAsyncContextStrategy, setHubOnCarrier } from '@sentry/core';\n\nfunction getActiveDomain<T>(): T | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  return (domain as any).active as T | undefined;\n}\n\nfunction getCurrentHub(): Hub | undefined {\n  const activeDomain = getActiveDomain<Carrier>();\n\n  // If there's no active domain, just return undefined and the global hub will be used\n  if (!activeDomain) {\n    return undefined;\n  }\n\n  ensureHubOnCarrier(activeDomain);\n\n  return getHubFromCarrier(activeDomain);\n}\n\nfunction createNewHub(parent: Hub | undefined): Hub {\n  const carrier: Carrier = {};\n  ensureHubOnCarrier(carrier, parent);\n  return getHubFromCarrier(carrier);\n}\n\nfunction runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T {\n  const activeDomain = getActiveDomain<domain.Domain & Carrier>();\n\n  if (activeDomain && options?.reuseExisting) {\n    // We're already in a domain, so we don't need to create a new one, just call the callback with the current hub\n    return callback();\n  }\n\n  const local = domain.create() as domain.Domain & Carrier;\n\n  const parentHub = activeDomain ? getHubFromCarrier(activeDomain) : undefined;\n  const newHub = createNewHub(parentHub);\n  setHubOnCarrier(local, newHub);\n\n  return local.bind(() => {\n    return callback();\n  })();\n}\n\n/**\n * Sets the async context strategy to use Node.js domains.\n */\nexport function setDomainAsyncContextStrategy(): void {\n  setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });\n}\n", "import type { Carrier, Hub, RunWithAsyncContextOptions } from '@sentry/core';\nimport { ensureHubOnCarrier, getHubFromCarrier, setAsyncContextStrategy } from '@sentry/core';\nimport * as async_hooks from 'async_hooks';\n\ninterface AsyncLocalStorage<T> {\n  getStore(): T | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\n}\n\ntype AsyncLocalStorageConstructor = { new <T>(): AsyncLocalStorage<T> };\n// AsyncLocalStorage only exists in async_hook after Node v12.17.0 or v13.10.0\ntype NewerAsyncHooks = typeof async_hooks & { AsyncLocalStorage: AsyncLocalStorageConstructor };\n\nlet asyncStorage: AsyncLocalStorage<Hub>;\n\n/**\n * Sets the async context strategy to use AsyncLocalStorage which requires Node v12.17.0 or v13.10.0.\n */\nexport function setHooksAsyncContextStrategy(): void {\n  if (!asyncStorage) {\n    asyncStorage = new (async_hooks as NewerAsyncHooks).AsyncLocalStorage<Hub>();\n  }\n\n  function getCurrentHub(): Hub | undefined {\n    return asyncStorage.getStore();\n  }\n\n  function createNewHub(parent: Hub | undefined): Hub {\n    const carrier: Carrier = {};\n    ensureHubOnCarrier(carrier, parent);\n    return getHubFromCarrier(carrier);\n  }\n\n  function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T {\n    const existingHub = getCurrentHub();\n\n    if (existingHub && options?.reuseExisting) {\n      // We're already in an async context, so we don't need to create a new one\n      // just call the callback with the current hub\n      return callback();\n    }\n\n    const newHub = createNewHub(existingHub);\n\n    return asyncStorage.run(newHub, () => {\n      return callback();\n    });\n  }\n\n  setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });\n}\n", "import { NODE_VERSION } from '../nodeVersion';\nimport { setDomainAsyncContextStrategy } from './domain';\nimport { setHooksAsyncContextStrategy } from './hooks';\n\n/**\n * Sets the correct async context strategy for Node.js\n *\n * Node.js >= 14 uses AsyncLocalStorage\n * Node.js < 14 uses domains\n */\nexport function setNodeAsyncContextStrategy(): void {\n  if (NODE_VERSION.major >= 14) {\n    setHooksAsyncContextStrategy();\n  } else {\n    setDomainAsyncContextStrategy();\n  }\n}\n", "import * as util from 'util';\nimport { addBreadcrumb, convertIntegrationFnToClass, getClient } from '@sentry/core';\nimport type { Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { addConsoleInstrumentationHandler, severityLevelFromString } from '@sentry/utils';\n\nconst INTEGRATION_NAME = 'Console';\n\nconst consoleIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client) {\n          return;\n        }\n\n        addBreadcrumb(\n          {\n            category: 'console',\n            level: severityLevelFromString(level),\n            message: util.format.apply(undefined, args),\n          },\n          {\n            input: [...args],\n            level,\n          },\n        );\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Console module integration */\n// eslint-disable-next-line deprecation/deprecation\nexport const Console = convertIntegrationFnToClass(INTEGRATION_NAME, consoleIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n>;\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import type * as http from 'http';\nimport type * as https from 'https';\nimport { URL } from 'url';\n\nimport { NODE_VERSION } from '../../nodeVersion';\n\n/**\n * Assembles a URL that's passed to the users to filter on.\n * It can include raw (potentially PII containing) data, which we'll allow users to access to filter\n * but won't include in spans or breadcrumbs.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\n// TODO (v8): This function should include auth, query and fragment (it's breaking, so we need to wait for v8)\nexport function extractRawUrl(requestOptions: RequestOptions): string {\n  const { protocol, hostname, port } = parseRequestOptions(requestOptions);\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nexport function extractUrl(requestOptions: RequestOptions): string {\n  const { protocol, hostname, port } = parseRequestOptions(requestOptions);\n\n  const path = requestOptions.pathname || '/';\n\n  // always filter authority, see https://develop.sentry.dev/sdk/data-handling/#structuring-data\n  const authority = requestOptions.auth ? redactAuthority(requestOptions.auth) : '';\n\n  return `${protocol}//${authority}${hostname}${port}${path}`;\n}\n\nfunction redactAuthority(auth: string): string {\n  const [user, password] = auth.split(':');\n  return `${user ? '[Filtered]' : ''}:${password ? '[Filtered]' : ''}@`;\n}\n\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nexport function cleanSpanDescription(\n  description: string | undefined,\n  requestOptions: RequestOptions,\n  request: http.ClientRequest,\n): string | undefined {\n  // nothing to clean\n  if (!description) {\n    return description;\n  }\n\n  // eslint-disable-next-line prefer-const\n  let [method, requestUrl] = description.split(' ');\n\n  // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (request as any)?.agent?.protocol; // worst comes to worst, this is undefined and nothing changes\n    // This URL contains the filtered authority ([filtered]:[filtered]@example.com) but no fragment or query params\n    requestUrl = extractUrl(requestOptions);\n  }\n\n  // internal routes can end up starting with a triple slash rather than a single one\n  if (requestUrl?.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return `${method} ${requestUrl}`;\n}\n\n// the node types are missing a few properties which node's `urlToOptions` function spits out\nexport type RequestOptions = http.RequestOptions & { hash?: string; search?: string; pathname?: string; href?: string };\ntype RequestCallback = (response: http.IncomingMessage) => void;\nexport type RequestMethodArgs =\n  | [RequestOptions | string | URL, RequestCallback?]\n  | [string | URL, RequestOptions, RequestCallback?];\nexport type RequestMethod = (...args: RequestMethodArgs) => http.ClientRequest;\n\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nexport function urlToOptions(url: URL): RequestOptions {\n  const options: RequestOptions = {\n    protocol: url.protocol,\n    hostname:\n      typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: `${url.pathname || ''}${url.search || ''}`,\n    href: url.href,\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`;\n  }\n  return options;\n}\n\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nexport function normalizeRequestArgs(\n  httpModule: typeof http | typeof https,\n  requestArgs: RequestMethodArgs,\n): [RequestOptions] | [RequestOptions, RequestCallback] {\n  let callback, requestOptions;\n\n  // pop off the callback, if there is one\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop() as RequestCallback;\n  }\n\n  // create a RequestOptions object of whatever's at index 0\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n\n    try {\n      const parsed = new URL(\n        requestOptions.path || '',\n        `${requestOptions.protocol || 'http:'}//${requestOptions.hostname}`,\n      );\n      requestOptions = {\n        pathname: parsed.pathname,\n        search: parsed.search,\n        hash: parsed.hash,\n        ...requestOptions,\n      };\n    } catch (e) {\n      // ignore\n    }\n  }\n\n  // if the options were given separately from the URL, fold them in\n  if (requestArgs.length === 2) {\n    requestOptions = { ...requestOptions, ...requestArgs[1] };\n  }\n\n  // Figure out the protocol if it's currently missing\n  if (requestOptions.protocol === undefined) {\n    // Worst case we end up populating protocol with undefined, which it already is\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // Because of that, we cannot rely on `httpModule` to provide us with valid protocol,\n    // as it will always return `http`, even when using `https` module.\n    //\n    // See test/integrations/http.test.ts for more details on Node <=v8 protocol issue.\n    if (NODE_VERSION.major > 8) {\n      requestOptions.protocol =\n        (httpModule?.globalAgent as any)?.protocol ||\n        (requestOptions.agent as any)?.protocol ||\n        (requestOptions._defaultAgent as any)?.protocol;\n    } else {\n      requestOptions.protocol =\n        (requestOptions.agent as any)?.protocol ||\n        (requestOptions._defaultAgent as any)?.protocol ||\n        (httpModule?.globalAgent as any)?.protocol;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */\n  }\n\n  // return args in standardized form\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}\n\nfunction parseRequestOptions(requestOptions: RequestOptions): {\n  protocol: string;\n  hostname: string;\n  port: string;\n} {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n\n  return { protocol, hostname, port };\n}\n", "import type * as http from 'http';\nimport type * as https from 'https';\nimport type { Hub } from '@sentry/core';\nimport {\n  addBreadcrumb,\n  getActiveSpan,\n  getClient,\n  getCurrentHub,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  isSentryRequestUrl,\n  spanToJSON,\n  spanToTraceHeader,\n} from '@sentry/core';\nimport type {\n  DynamicSamplingContext,\n  EventProcessor,\n  Integration,\n  SanitizedRequestData,\n  TracePropagationTargets,\n} from '@sentry/types';\nimport {\n  LRUMap,\n  dynamicSamplingContextToSentryBaggageHeader,\n  fill,\n  generateSentryTraceHeader,\n  logger,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport type { NodeClient } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { NODE_VERSION } from '../nodeVersion';\nimport type { RequestMethod, RequestMethodArgs, RequestOptions } from './utils/http';\nimport { cleanSpanDescription, extractRawUrl, extractUrl, normalizeRequestArgs } from './utils/http';\n\ninterface TracingOptions {\n  /**\n   * List of strings/regex controlling to which outgoing requests\n   * the SDK will attach tracing headers.\n   *\n   * By default the SDK will attach those headers to all outgoing\n   * requests. If this option is provided, the SDK will match the\n   * request URL of outgoing requests against the items in this\n   * array, and only attach tracing headers if a match was found.\n   *\n   * @deprecated Use top level `tracePropagationTargets` option instead.\n   * This option will be removed in v8.\n   *\n   * ```\n   * Sentry.init({\n   *   tracePropagationTargets: ['api.site.com'],\n   * })\n   */\n  tracePropagationTargets?: TracePropagationTargets;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\ninterface HttpOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * Whether tracing spans should be created for requests\n   * Defaults to false\n   */\n  tracing?: TracingOptions | boolean;\n}\n\n/**\n * The http module integration instruments Node's internal http module. It creates breadcrumbs, transactions for outgoing\n * http requests and attaches trace data when tracing is enabled via its `tracing` option.\n */\nexport class Http implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Http';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Http.id;\n\n  private readonly _breadcrumbs: boolean;\n  private readonly _tracing: TracingOptions | undefined;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: HttpOptions = {}) {\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = !options.tracing ? undefined : options.tracing === true ? {} : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(\n    _addGlobalEventProcessor: (callback: EventProcessor) => void,\n    setupOnceGetCurrentHub: () => Hub,\n  ): void {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const clientOptions = setupOnceGetCurrentHub().getClient<NodeClient>()?.getOptions();\n\n    // Do not auto-instrument for other instrumenter\n    if (clientOptions && clientOptions.instrumenter !== 'sentry') {\n      DEBUG_BUILD && logger.log('HTTP Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const shouldCreateSpanForRequest =\n      // eslint-disable-next-line deprecation/deprecation\n      this._tracing?.shouldCreateSpanForRequest || clientOptions?.shouldCreateSpanForRequest;\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = clientOptions?.tracePropagationTargets || this._tracing?.tracePropagationTargets;\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const httpModule = require('http');\n    const wrappedHttpHandlerMaker = _createWrappedRequestMethodFactory(\n      httpModule,\n      this._breadcrumbs,\n      shouldCreateSpanForRequest,\n      tracePropagationTargets,\n    );\n    fill(httpModule, 'get', wrappedHttpHandlerMaker);\n    fill(httpModule, 'request', wrappedHttpHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major > 8) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const httpsModule = require('https');\n      const wrappedHttpsHandlerMaker = _createWrappedRequestMethodFactory(\n        httpsModule,\n        this._breadcrumbs,\n        shouldCreateSpanForRequest,\n        tracePropagationTargets,\n      );\n      fill(httpsModule, 'get', wrappedHttpsHandlerMaker);\n      fill(httpsModule, 'request', wrappedHttpsHandlerMaker);\n    }\n  }\n}\n\n// for ease of reading below\ntype OriginalRequestMethod = RequestMethod;\ntype WrappedRequestMethod = RequestMethod;\ntype WrappedRequestMethodFactory = (original: OriginalRequestMethod) => WrappedRequestMethod;\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  httpModule: typeof http | typeof https,\n  breadcrumbsEnabled: boolean,\n  shouldCreateSpanForRequest: ((url: string) => boolean) | undefined,\n  tracePropagationTargets: TracePropagationTargets | undefined,\n): WrappedRequestMethodFactory {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const shouldCreateSpan = (url: string): boolean => {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    createSpanUrlMap.set(url, decision);\n    return decision;\n  };\n\n  const shouldAttachTraceData = (url: string): boolean => {\n    if (tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n    headersUrlMap.set(url, decision);\n    return decision;\n  };\n\n  /**\n   * Captures Breadcrumb based on provided request/response pair\n   */\n  function addRequestBreadcrumb(\n    event: string,\n    requestSpanData: SanitizedRequestData,\n    req: http.ClientRequest,\n    res?: http.IncomingMessage,\n  ): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getCurrentHub().getIntegration(Http)) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: 'http',\n        data: {\n          status_code: res && res.statusCode,\n          ...requestSpanData,\n        },\n        type: 'http',\n      },\n      {\n        event,\n        request: req,\n        response: res,\n      },\n    );\n  }\n\n  return function wrappedRequestMethodFactory(originalRequestMethod: OriginalRequestMethod): WrappedRequestMethod {\n    return function wrappedMethod(this: unknown, ...args: RequestMethodArgs): http.ClientRequest {\n      const requestArgs = normalizeRequestArgs(httpModule, args);\n      const requestOptions = requestArgs[0];\n      // eslint-disable-next-line deprecation/deprecation\n      const rawRequestUrl = extractRawUrl(requestOptions);\n      const requestUrl = extractUrl(requestOptions);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequestUrl(requestUrl, getClient())) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      const scope = getCurrentScope();\n      const parentSpan = getActiveSpan();\n\n      const data = getRequestSpanData(requestUrl, requestOptions);\n\n      const requestSpan = shouldCreateSpan(rawRequestUrl)\n        ? // eslint-disable-next-line deprecation/deprecation\n          parentSpan?.startChild({\n            op: 'http.client',\n            origin: 'auto.http.node.http',\n            description: `${data['http.method']} ${data.url}`,\n            data,\n          })\n        : undefined;\n\n      if (shouldAttachTraceData(rawRequestUrl)) {\n        if (requestSpan) {\n          const sentryTraceHeader = spanToTraceHeader(requestSpan);\n          const dynamicSamplingContext = getDynamicSamplingContextFromSpan(requestSpan);\n          addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n        } else {\n          const client = getClient();\n          const { traceId, sampled, dsc } = scope.getPropagationContext();\n          const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n          const dynamicSamplingContext =\n            dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n          addHeadersToRequestOptions(requestOptions, requestUrl, sentryTraceHeader, dynamicSamplingContext);\n        }\n      } else {\n        DEBUG_BUILD &&\n          logger.log(\n            `[Tracing] Not adding sentry-trace header to outgoing request (${requestUrl}) due to mismatching tracePropagationTargets option.`,\n          );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function (this: http.ClientRequest, res: http.IncomingMessage): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', data, req, res);\n          }\n          if (requestSpan) {\n            if (res.statusCode) {\n              requestSpan.setHttpStatus(res.statusCode);\n            }\n            requestSpan.updateName(\n              cleanSpanDescription(spanToJSON(requestSpan).description || '', requestOptions, req) || '',\n            );\n            requestSpan.end();\n          }\n        })\n        .once('error', function (this: http.ClientRequest): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', data, req);\n          }\n          if (requestSpan) {\n            requestSpan.setHttpStatus(500);\n            requestSpan.updateName(\n              cleanSpanDescription(spanToJSON(requestSpan).description || '', requestOptions, req) || '',\n            );\n            requestSpan.end();\n          }\n        });\n    };\n  };\n}\n\nfunction addHeadersToRequestOptions(\n  requestOptions: RequestOptions,\n  requestUrl: string,\n  sentryTraceHeader: string,\n  dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined,\n): void {\n  // Don't overwrite sentry-trace and baggage header if it's already set.\n  const headers = requestOptions.headers || {};\n  if (headers['sentry-trace']) {\n    return;\n  }\n\n  DEBUG_BUILD &&\n    logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${requestUrl}\": `);\n  const sentryBaggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryBaggageHeader =\n    sentryBaggage && sentryBaggage.length > 0 ? normalizeBaggageHeader(requestOptions, sentryBaggage) : undefined;\n\n  requestOptions.headers = {\n    ...requestOptions.headers,\n    'sentry-trace': sentryTraceHeader,\n    // Setting a header to `undefined` will crash in node so we only set the baggage header when it's defined\n    ...(sentryBaggageHeader && { baggage: sentryBaggageHeader }),\n  };\n}\n\nfunction getRequestSpanData(requestUrl: string, requestOptions: RequestOptions): SanitizedRequestData {\n  const method = requestOptions.method || 'GET';\n  const data: SanitizedRequestData = {\n    url: requestUrl,\n    'http.method': method,\n  };\n  if (requestOptions.hash) {\n    // strip leading \"#\"\n    data['http.fragment'] = requestOptions.hash.substring(1);\n  }\n  if (requestOptions.search) {\n    // strip leading \"?\"\n    data['http.query'] = requestOptions.search.substring(1);\n  }\n  return data;\n}\n\nfunction normalizeBaggageHeader(\n  requestOptions: RequestOptions,\n  sentryBaggageHeader: string | undefined,\n): string | string[] | undefined {\n  if (!requestOptions.headers || !requestOptions.headers.baggage) {\n    return sentryBaggageHeader;\n  } else if (!sentryBaggageHeader) {\n    return requestOptions.headers.baggage as string | string[];\n  } else if (Array.isArray(requestOptions.headers.baggage)) {\n    return [...requestOptions.headers.baggage, sentryBaggageHeader];\n  }\n  // Type-cast explanation:\n  // Technically this the following could be of type `(number | string)[]` but for the sake of simplicity\n  // we say this is undefined behaviour, since it would not be baggage spec conform if the user did this.\n  return [requestOptions.headers.baggage, sentryBaggageHeader] as string[];\n}\n", "import { getClient } from '@sentry/core';\nimport { consoleSandbox, logger } from '@sentry/utils';\n\nimport type { NodeClient } from '../../client';\nimport { DEBUG_BUILD } from '../../debug-build';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nexport function logAndExitProcess(error: Error): void {\n  consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = getClient<NodeClient>();\n\n  if (client === undefined) {\n    DEBUG_BUILD && logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result: boolean) => {\n      if (!result) {\n        DEBUG_BUILD && logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      DEBUG_BUILD && logger.error(error);\n    },\n  );\n}\n", "import { captureException, convertIntegrationFnToClass } from '@sentry/core';\nimport { getClient } from '@sentry/core';\nimport type { Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport type { NodeClient } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { logAndExitProcess } from './utils/errorhandling';\n\ntype OnFatalErrorHandler = (firstError: Error, secondError?: Error) => void;\n\ntype TaggedListener = NodeJS.UncaughtExceptionListener & {\n  tag?: string;\n};\n\n// CAREFUL: Please think twice before updating the way _options looks because the Next.js SDK depends on it in `index.server.ts`\ninterface OnUncaughtExceptionOptions {\n  // TODO(v8): Evaluate whether we should switch the default behaviour here.\n  // Also, we can evaluate using https://nodejs.org/api/process.html#event-uncaughtexceptionmonitor per default, and\n  // falling back to current behaviour when that's not available.\n  /**\n   * Controls if the SDK should register a handler to exit the process on uncaught errors:\n   * - `true`: The SDK will exit the process on all uncaught errors.\n   * - `false`: The SDK will only exit the process when there are no other `uncaughtException` handlers attached.\n   *\n   * Default: `true`\n   */\n  exitEvenIfOtherHandlersAreRegistered: boolean;\n\n  /**\n   * This is called when an uncaught error would cause the process to exit.\n   *\n   * @param firstError Uncaught error causing the process to exit\n   * @param secondError Will be set if the handler was called multiple times. This can happen either because\n   * `onFatalError` itself threw, or because an independent error happened somewhere else while `onFatalError`\n   * was running.\n   */\n  onFatalError?(this: void, firstError: Error, secondError?: Error): void;\n}\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\nconst onUncaughtExceptionIntegration = ((options: Partial<OnUncaughtExceptionOptions> = {}) => {\n  const _options = {\n    exitEvenIfOtherHandlersAreRegistered: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client: NodeClient) {\n      global.process.on('uncaughtException', makeErrorHandler(client, _options));\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Global Exception handler */\n// eslint-disable-next-line deprecation/deprecation\nexport const OnUncaughtException = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  onUncaughtExceptionIntegration,\n) as IntegrationClass<Integration & { setup: (client: NodeClient) => void }> & {\n  new (\n    options?: Partial<{\n      exitEvenIfOtherHandlersAreRegistered: boolean;\n      onFatalError?(this: void, firstError: Error, secondError?: Error): void;\n    }>,\n  ): Integration;\n};\n\ntype ErrorHandler = { _errorHandler: boolean } & ((error: Error) => void);\n\n/** Exported only for tests */\nexport function makeErrorHandler(client: NodeClient, options: OnUncaughtExceptionOptions): ErrorHandler {\n  const timeout = 2000;\n  let caughtFirstError: boolean = false;\n  let caughtSecondError: boolean = false;\n  let calledFatalError: boolean = false;\n  let firstError: Error;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error: Error): void => {\n      let onFatalError: OnFatalErrorHandler = logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError as OnFatalErrorHandler;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (\n        global.process.listeners('uncaughtException') as TaggedListener[]\n      ).reduce<number>((acc, listener) => {\n        if (\n          // There are 3 listeners we ignore:\n          listener.name === 'domainUncaughtExceptionClear' || // as soon as we're using domains this listener is attached by node itself\n          (listener.tag && listener.tag === 'sentry_tracingErrorCallback') || // the handler we register for tracing\n          (listener as ErrorHandler)._errorHandler // the handler we register in this integration\n        ) {\n          return acc;\n        } else {\n          return acc + 1;\n        }\n      }, 0);\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (getClient() === client) {\n          captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            DEBUG_BUILD &&\n              logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              } else {\n                // it was probably case 2, our first error finished capturing while we waited, cool, do nothing\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n", "import { captureException, convertIntegrationFnToClass, getClient } from '@sentry/core';\nimport type { Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nimport { logAndExitProcess } from './utils/errorhandling';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\ninterface OnUnhandledRejectionOptions {\n  /**\n   * Option deciding what to do after capturing unhandledRejection,\n   * that mimicks behavior of node's --unhandled-rejection flag.\n   */\n  mode: UnhandledRejectionMode;\n}\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst onUnhandledRejectionIntegration = ((options: Partial<OnUnhandledRejectionOptions> = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Global Promise Rejection handler */\n// eslint-disable-next-line deprecation/deprecation\nexport const OnUnhandledRejection = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  onUnhandledRejectionIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: Partial<{ mode: UnhandledRejectionMode }>): Integration;\n};\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nexport function makeUnhandledPromiseHandler(\n  client: Client,\n  options: OnUnhandledRejectionOptions,\n): (reason: unknown, promise: unknown) => void {\n  return function sendUnhandledPromise(reason: unknown, promise: unknown): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any,\n  options: OnUnhandledRejectionOptions,\n): void {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n", "import { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { convertIntegrationFnToClass } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\n\nlet moduleCache: { [key: string]: string };\n\nconst INTEGRATION_NAME = 'Modules';\n\n/** Extract information about paths */\nfunction getPaths(): string[] {\n  try {\n    return require.cache ? Object.keys(require.cache as Record<string, unknown>) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules(): {\n  [name: string]: string;\n} {\n  const mainPaths = (require.main && require.main.paths) || [];\n  const paths = getPaths();\n  const infos: {\n    [name: string]: string;\n  } = {};\n  const seen: {\n    [path: string]: boolean;\n  } = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = (): void | (() => void) => {\n      const orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8')) as {\n          name: string;\n          version: string;\n        };\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules(): { [key: string]: string } {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nconst modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Add node modules / packages to the event */\n// eslint-disable-next-line deprecation/deprecation\nexport const Modules = convertIntegrationFnToClass(INTEGRATION_NAME, modulesIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Event }\n>;\n", "import { readFile } from 'fs';\nimport { convertIntegrationFnToClass } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\nimport { LRUMap, addContextToFrame } from '@sentry/utils';\n\nconst FILE_CONTENT_CACHE = new LRUMap<string, string[] | null>(100);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n\n// TODO: Replace with promisify when minimum supported node >= v8\nfunction readTextFileAsync(path: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    readFile(path, 'utf8', (err, data) => {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n}\n\n/**\n * Resets the file cache. Exists for testing purposes.\n * @hidden\n */\nexport function resetFileContentCache(): void {\n  FILE_CONTENT_CACHE.clear();\n}\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\nconst contextLinesIntegration = ((options: ContextLinesOptions = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Add node modules / packages to the event */\n// eslint-disable-next-line deprecation/deprecation\nexport const ContextLines = convertIntegrationFnToClass(INTEGRATION_NAME, contextLinesIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Promise<Event> }\n> & { new (options?: { frameContextLines?: number }): Integration };\n\nasync function addSourceContext(event: Event, contextLines: number): Promise<Event> {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const enqueuedReadSourceFileTasks: Record<string, number> = {};\n  const readSourceFileTasks: Promise<string[] | null>[] = [];\n\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (!exception.stacktrace?.frames) {\n        continue;\n      }\n\n      // We want to iterate in reverse order as calling cache.get will bump the file in our LRU cache.\n      // This ends up prioritizes source context for frames at the top of the stack instead of the bottom.\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        // Call cache.get to bump the file to the top of the cache and ensure we have not already\n        // enqueued a read operation for this filename\n        if (frame.filename && !enqueuedReadSourceFileTasks[frame.filename] && !FILE_CONTENT_CACHE.get(frame.filename)) {\n          readSourceFileTasks.push(_readSourceFile(frame.filename));\n          enqueuedReadSourceFileTasks[frame.filename] = 1;\n        }\n      }\n    }\n  }\n\n  // check if files to read > 0, if so, await all of them to be read before adding source contexts.\n  // Normally, Promise.all here could be short circuited if one of the promises rejects, but we\n  // are guarding from that by wrapping the i/o read operation in a try/catch.\n  if (readSourceFileTasks.length > 0) {\n    await Promise.all(readSourceFileTasks);\n  }\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames) {\n        await addSourceContextToFrames(exception.stacktrace.frames, contextLines);\n      }\n    }\n  }\n\n  return event;\n}\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(frames: StackFrame[], contextLines: number): void {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined) {\n      const sourceFileLines = FILE_CONTENT_CACHE.get(frame.filename);\n\n      if (sourceFileLines) {\n        try {\n          addContextToFrame(sourceFileLines, frame, contextLines);\n        } catch (e) {\n          // anomaly, being defensive in case\n          // unlikely to ever happen in practice but can definitely happen in theory\n        }\n      }\n    }\n  }\n}\n\n/**\n * Reads file contents and caches them in a global LRU cache.\n * If reading fails, mark the file as null in the cache so we don't try again.\n *\n * @param filename filepath to read content from.\n */\nasync function _readSourceFile(filename: string): Promise<string[] | null> {\n  const cachedFile = FILE_CONTENT_CACHE.get(filename);\n\n  // We have already attempted to read this file and failed, do not try again\n  if (cachedFile === null) {\n    return null;\n  }\n\n  // We have a cache hit, return it\n  if (cachedFile !== undefined) {\n    return cachedFile;\n  }\n\n  // Guard from throwing if readFile fails, this enables us to use Promise.all and\n  // not have it short circuiting if one of the promises rejects + since context lines are added\n  // on a best effort basis, we want to throw here anyways.\n\n  // If we made it to here, it means that our file is not cache nor marked as failed, so attempt to read it\n  let content: string[] | null = null;\n  try {\n    const rawFileContents = await readTextFileAsync(filename);\n    content = rawFileContents.split('\\n');\n  } catch (_) {\n    // if we fail, we will mark the file as null in the cache and short circuit next time we try to read it\n  }\n\n  FILE_CONTENT_CACHE.set(filename, content);\n  return content;\n}\n", "/* eslint-disable max-lines */\nimport { execFile } from 'child_process';\nimport { readFile, readdir } from 'fs';\nimport * as os from 'os';\nimport { join } from 'path';\nimport { promisify } from 'util';\nimport { convertIntegrationFnToClass } from '@sentry/core';\nimport type {\n  AppContext,\n  CloudResourceContext,\n  Contexts,\n  CultureContext,\n  DeviceContext,\n  Event,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  OsContext,\n} from '@sentry/types';\n\n// TODO: Required until we drop support for Node v8\nexport const readFileAsync = promisify(readFile);\nexport const readDirAsync = promisify(readdir);\n\nconst INTEGRATION_NAME = 'Context';\n\ninterface DeviceContextOptions {\n  cpu?: boolean;\n  memory?: boolean;\n}\n\ninterface ContextOptions {\n  app?: boolean;\n  os?: boolean;\n  device?: DeviceContextOptions | boolean;\n  culture?: boolean;\n  cloudResource?: boolean;\n}\n\nconst nodeContextIntegration = ((options: ContextOptions = {}) => {\n  let cachedContext: Promise<Contexts> | undefined;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event: Event): Promise<Event> {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts(): Promise<Contexts> {\n    const contexts: Contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/** Add node modules / packages to the event */\n// eslint-disable-next-line deprecation/deprecation\nexport const Context = convertIntegrationFnToClass(INTEGRATION_NAME, nodeContextIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Promise<Event> }\n> & {\n  new (options?: {\n    app?: boolean;\n    os?: boolean;\n    device?: { cpu?: boolean; memory?: boolean } | boolean;\n    culture?: boolean;\n    cloudResource?: boolean;\n  }): Integration;\n};\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts: Contexts): Contexts {\n  // Only update properties if they exist\n  if (contexts?.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts?.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext(): CultureContext | undefined {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions as unknown as any).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\nfunction getAppContext(): AppContext {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n\n  return { app_start_time, app_memory };\n}\n\n/**\n * Gets device information from os\n */\nexport function getDeviceContext(deviceOpt: DeviceContextOptions | true): DeviceContext {\n  const device: DeviceContext = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo: os.CpuInfo[] | undefined = os.cpus();\n    if (cpuInfo && cpuInfo.length) {\n      const firstCpu = cpuInfo[0];\n\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: string[];\n}\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext(): CloudResourceContext | undefined {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n", "import type { StackFrame, StackParser } from '@sentry/types';\nimport type { Debugger } from 'inspector';\n\nexport type Variables = Record<string, unknown>;\n\nexport type RateLimitIncrement = () => void;\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nexport function createRateLimiter(\n  maxPerSecond: number,\n  enable: () => void,\n  disable: (seconds: number) => void,\n): RateLimitIncrement {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1_000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\nexport type PausedExceptionEvent = Debugger.PausedEventDataType & {\n  data: {\n    // This contains error.stack\n    description: string;\n  };\n};\n\n/** Could this be an anonymous function? */\nexport function isAnonymous(name: string | undefined): boolean {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nexport function functionNamesMatch(a: string | undefined, b: string | undefined): boolean {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\n/** Creates a unique hash from stack frames */\nexport function hashFrames(frames: StackFrame[] | undefined): string | undefined {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nexport function hashFromStack(stackParser: StackParser, stack: string | undefined): string | undefined {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\nexport interface FrameVariables {\n  function: string;\n  vars?: Variables;\n}\n\nexport interface Options {\n  /**\n   * Capture local variables for both caught and uncaught exceptions\n   *\n   * - When false, only uncaught exceptions will have local variables\n   * - When true, both caught and uncaught exceptions will have local variables.\n   *\n   * Defaults to `true`.\n   *\n   * Capturing local variables for all exceptions can be expensive since the debugger pauses for every throw to collect\n   * local variables.\n   *\n   * To reduce the likelihood of this feature impacting app performance or throughput, this feature is rate-limited.\n   * Once the rate limit is reached, local variables will only be captured for uncaught exceptions until a timeout has\n   * been reached.\n   */\n  captureAllExceptions?: boolean;\n  /**\n   * Maximum number of exceptions to capture local variables for per second before rate limiting is triggered.\n   */\n  maxExceptionsPerSecond?: number;\n}\n", "/* eslint-disable max-lines */\nimport { convertIntegrationFnToClass } from '@sentry/core';\nimport type { Event, Exception, Integration, IntegrationClass, IntegrationFn, StackParser } from '@sentry/types';\nimport { LRUMap, logger } from '@sentry/utils';\nimport type { Debugger, InspectorNotification, Runtime, Session } from 'inspector';\nimport type { NodeClient } from '../../client';\n\nimport { NODE_VERSION } from '../../nodeVersion';\nimport type { FrameVariables, Options, PausedExceptionEvent, RateLimitIncrement, Variables } from './common';\nimport { createRateLimiter, functionNamesMatch, hashFrames, hashFromStack } from './common';\n\ntype OnPauseEvent = InspectorNotification<Debugger.PausedEventDataType>;\nexport interface DebugSession {\n  /** Configures and connects to the debug session */\n  configureAndConnect(onPause: (message: OnPauseEvent, complete: () => void) => void, captureAll: boolean): void;\n  /** Updates which kind of exceptions to capture */\n  setPauseOnExceptions(captureAll: boolean): void;\n  /** Gets local variables for an objectId */\n  getLocalVariables(objectId: string, callback: (vars: Variables) => void): void;\n}\n\ntype Next<T> = (result: T) => void;\ntype Add<T> = (fn: Next<T>) => void;\ntype CallbackWrapper<T> = { add: Add<T>; next: Next<T> };\n\n/** Creates a container for callbacks to be called sequentially */\nexport function createCallbackList<T>(complete: Next<T>): CallbackWrapper<T> {\n  // A collection of callbacks to be executed last to first\n  let callbacks: Next<T>[] = [];\n\n  let completedCalled = false;\n  function checkedComplete(result: T): void {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn: Next<T>): void {\n    callbacks.push(fn);\n  }\n\n  function next(result: T): void {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession implements DebugSession {\n  private readonly _session: Session;\n\n  /** Throws if inspector API is not available */\n  public constructor() {\n    /*\n    TODO: We really should get rid of this require statement below for a couple of reasons:\n    1. It makes the integration unusable in the SvelteKit SDK, as it's not possible to use `require`\n       in SvelteKit server code (at least not by default).\n    2. Throwing in a constructor is bad practice\n\n    More context for a future attempt to fix this:\n    We already tried replacing it with import but didn't get it to work because of async problems.\n    We still called import in the constructor but assigned to a promise which we \"awaited\" in\n    `configureAndConnect`. However, this broke the Node integration tests as no local variables\n    were reported any more. We probably missed a place where we need to await the promise, too.\n    */\n\n    // Node can be built without inspector support so this can throw\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { Session } = require('inspector');\n    this._session = new Session();\n  }\n\n  /** @inheritdoc */\n  public configureAndConnect(onPause: (event: OnPauseEvent, complete: () => void) => void, captureAll: boolean): void {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  public setPauseOnExceptions(captureAll: boolean): void {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n  public getLocalVariables(objectId: string, complete: (vars: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList<Variables>(complete);\n\n      for (const prop of props) {\n        if (prop?.value?.objectId && prop?.value.className === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (prop?.value?.objectId && prop?.value?.className === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (prop?.value?.value || prop?.value?.description) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n  private _getProperties(objectId: string, next: (result: Runtime.PropertyDescriptor[]) => void): void {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n  private _unrollArray(objectId: string, name: string, vars: Variables, next: (vars: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => v?.value?.value);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n  private _unrollObject(objectId: string, name: string, vars: Variables, next: (obj: Variables) => void): void {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map<[string, unknown]>(v => [v.name, v?.value?.value])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} as Variables);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n  private _unrollOther(prop: Runtime.PropertyDescriptor, vars: Variables, next: (vars: Variables) => void): void {\n    if (prop?.value?.value) {\n      vars[prop.name] = prop.value.value;\n    } else if (prop?.value?.description && prop?.value?.type !== 'function') {\n      vars[prop.name] = `<${prop.value.description}>`;\n    }\n\n    next(vars);\n  }\n}\n\n/**\n * When using Vercel pkg, the inspector module is not available.\n * https://github.com/getsentry/sentry-javascript/issues/6769\n */\nfunction tryNewAsyncSession(): AsyncSession | undefined {\n  try {\n    return new AsyncSession();\n  } catch (e) {\n    return undefined;\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesSyncIntegration = ((\n  options: Options = {},\n  session: DebugSession | undefined = tryNewAsyncSession(),\n) => {\n  const cachedFrames: LRUMap<string, FrameVariables[]> = new LRUMap(20);\n  let rateLimiter: RateLimitIncrement | undefined;\n  let shouldProcessEvent = false;\n\n  function handlePaused(\n    stackParser: StackParser,\n    { params: { reason, data, callFrames } }: InspectorNotification<PausedExceptionEvent>,\n    complete: () => void,\n  ): void {\n    if (reason !== 'exception' && reason !== 'promiseRejection') {\n      complete();\n      return;\n    }\n\n    rateLimiter?.();\n\n    // data.description contains the original error.stack\n    const exceptionHash = hashFromStack(stackParser, data?.description);\n\n    if (exceptionHash == undefined) {\n      complete();\n      return;\n    }\n\n    const { add, next } = createCallbackList<FrameVariables[]>(frames => {\n      cachedFrames.set(exceptionHash, frames);\n      complete();\n    });\n\n    // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n    // For this reason we only attempt to get local variables for the first 5 frames\n    for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n      const { scopeChain, functionName, this: obj } = callFrames[i];\n\n      const localScope = scopeChain.find(scope => scope.type === 'local');\n\n      // obj.className is undefined in ESM modules\n      const fn = obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n      if (localScope?.object.objectId === undefined) {\n        add(frames => {\n          frames[i] = { function: fn };\n          next(frames);\n        });\n      } else {\n        const id = localScope.object.objectId;\n        add(frames =>\n          session?.getLocalVariables(id, vars => {\n            frames[i] = { function: fn, vars };\n            next(frames);\n          }),\n        );\n      }\n    }\n\n    next([]);\n  }\n\n  function addLocalVariablesToException(exception: Exception): void {\n    const hash = hashFrames(exception?.stacktrace?.frames);\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    const frameCount = exception.stacktrace?.frames?.length || 0;\n\n    for (let i = 0; i < frameCount; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frameCount - i - 1;\n\n      // Drop out if we run out of frames to match up\n      if (!exception?.stacktrace?.frames?.[frameIndex] || !cachedFrame[i]) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrame[i].vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        exception.stacktrace.frames[frameIndex].in_app === false ||\n        // The function names need to match\n        !functionNamesMatch(exception.stacktrace.frames[frameIndex].function, cachedFrame[i].function)\n      ) {\n        continue;\n      }\n\n      exception.stacktrace.frames[frameIndex].vars = cachedFrame[i].vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event: Event): Event {\n    for (const exception of event?.exception?.values || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client: NodeClient) {\n      const clientOptions = client.getOptions();\n\n      if (session && clientOptions.includeLocalVariables) {\n        // Only setup this integration if the Node version is >= v18\n        // https://github.com/getsentry/sentry-javascript/issues/7697\n        const unsupportedNodeVersion = NODE_VERSION.major < 18;\n\n        if (unsupportedNodeVersion) {\n          logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n          return;\n        }\n\n        const captureAll = options.captureAllExceptions !== false;\n\n        session.configureAndConnect(\n          (ev, complete) =>\n            handlePaused(clientOptions.stackParser, ev as InspectorNotification<PausedExceptionEvent>, complete),\n          captureAll,\n        );\n\n        if (captureAll) {\n          const max = options.maxExceptionsPerSecond || 50;\n\n          rateLimiter = createRateLimiter(\n            max,\n            () => {\n              logger.log('Local variables rate-limit lifted.');\n              session?.setPauseOnExceptions(true);\n            },\n            seconds => {\n              logger.log(\n                `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n              );\n              session?.setPauseOnExceptions(false);\n            },\n          );\n        }\n\n        shouldProcessEvent = true;\n      }\n    },\n    processEvent(event: Event): Event {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount(): number {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame(): FrameVariables[] | undefined {\n      return cachedFrames.values()[0];\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds local variables to exception frames\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const LocalVariablesSync = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  localVariablesSyncIntegration,\n) as IntegrationClass<Integration & { processEvent: (event: Event) => Event; setup: (client: NodeClient) => void }> & {\n  new (options?: Options, session?: DebugSession): Integration;\n};\n", "import { LocalVariablesSync } from './local-variables-sync';\n\n/**\n * Adds local variables to exception frames\n */\nexport const LocalVariables = LocalVariablesSync;\n", "import {\n  addBreadcrumb,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  isSentryRequestUrl,\n  spanToTraceHeader,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Span } from '@sentry/types';\nimport {\n  LRUMap,\n  dynamicRequire,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  getSanitizedUrlString,\n  parseUrl,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport type { NodeClient } from '../../client';\nimport { NODE_VERSION } from '../../nodeVersion';\nimport type {\n  DiagnosticsChannel,\n  RequestCreateMessage,\n  RequestEndMessage,\n  RequestErrorMessage,\n  RequestWithSentry,\n} from './types';\n\nexport enum ChannelName {\n  // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n  RequestCreate = 'undici:request:create',\n  RequestEnd = 'undici:request:headers',\n  RequestError = 'undici:request:error',\n}\n\nexport interface UndiciOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n//\n// import { writeFileSync } from 'fs';\n// import { format } from 'util';\n//\n// function debug(...args: any): void {\n//   // Use a function like this one when debugging inside an AsyncHook callback\n//   // @ts-expect-error any\n//   writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n// }\n\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n */\nexport class Undici implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Undici';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Undici.id;\n\n  private readonly _options: UndiciOptions;\n\n  private readonly _createSpanUrlMap: LRUMap<string, boolean> = new LRUMap(100);\n  private readonly _headersUrlMap: LRUMap<string, boolean> = new LRUMap(100);\n\n  public constructor(_options: Partial<UndiciOptions> = {}) {\n    this._options = {\n      breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n      shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    // Requires Node 16+ to use the diagnostics_channel API.\n    if (NODE_VERSION.major < 16) {\n      return;\n    }\n\n    let ds: DiagnosticsChannel | undefined;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ds = dynamicRequire(module, 'diagnostics_channel') as DiagnosticsChannel;\n    } catch (e) {\n      // no-op\n    }\n\n    if (!ds || !ds.subscribe) {\n      return;\n    }\n\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n    ds.subscribe(ChannelName.RequestCreate, this._onRequestCreate);\n    ds.subscribe(ChannelName.RequestEnd, this._onRequestEnd);\n    ds.subscribe(ChannelName.RequestError, this._onRequestError);\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  private _shouldCreateSpan(url: string): boolean {\n    if (this._options.shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = this._createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = this._options.shouldCreateSpanForRequest(url);\n    this._createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  private _onRequestCreate = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message as RequestCreateMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    const client = getClient<NodeClient>();\n    if (!client) {\n      return;\n    }\n\n    if (isSentryRequestUrl(stringUrl, client) || request.__sentry_span__ !== undefined) {\n      return;\n    }\n\n    const clientOptions = client.getOptions();\n    const scope = getCurrentScope();\n    const parentSpan = getActiveSpan();\n\n    const span = this._shouldCreateSpan(stringUrl) ? createRequestSpan(parentSpan, request, stringUrl) : undefined;\n    if (span) {\n      request.__sentry_span__ = span;\n    }\n\n    const shouldAttachTraceData = (url: string): boolean => {\n      if (clientOptions.tracePropagationTargets === undefined) {\n        return true;\n      }\n\n      const cachedDecision = this._headersUrlMap.get(url);\n      if (cachedDecision !== undefined) {\n        return cachedDecision;\n      }\n\n      const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n      this._headersUrlMap.set(url, decision);\n      return decision;\n    };\n\n    if (shouldAttachTraceData(stringUrl)) {\n      if (span) {\n        const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n        setHeadersOnRequest(request, spanToTraceHeader(span), sentryBaggageHeader);\n      } else {\n        const { traceId, sampled, dsc } = scope.getPropagationContext();\n        const sentryTrace = generateSentryTraceHeader(traceId, undefined, sampled);\n        const dynamicSamplingContext = dsc || getDynamicSamplingContextFromClient(traceId, client, scope);\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n        setHeadersOnRequest(request, sentryTrace, sentryBaggageHeader);\n      }\n    }\n  };\n\n  private _onRequestEnd = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request, response } = message as RequestEndMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequestUrl(stringUrl, getClient())) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      span.setHttpStatus(response.statusCode);\n      span.end();\n    }\n\n    if (this._options.breadcrumbs) {\n      addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            status_code: response.statusCode,\n            url: stringUrl,\n          },\n          type: 'http',\n        },\n        {\n          event: 'response',\n          request,\n          response,\n        },\n      );\n    }\n  };\n\n  private _onRequestError = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message as RequestErrorMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequestUrl(stringUrl, getClient())) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      span.setStatus('internal_error');\n      span.end();\n    }\n\n    if (this._options.breadcrumbs) {\n      addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            url: stringUrl,\n          },\n          level: 'error',\n          type: 'http',\n        },\n        {\n          event: 'error',\n          request,\n        },\n      );\n    }\n  };\n}\n\nfunction setHeadersOnRequest(\n  request: RequestWithSentry,\n  sentryTrace: string,\n  sentryBaggageHeader: string | undefined,\n): void {\n  const headerLines = request.headers.split('\\r\\n');\n  const hasSentryHeaders = headerLines.some(headerLine => headerLine.startsWith('sentry-trace:'));\n\n  if (hasSentryHeaders) {\n    return;\n  }\n\n  request.addHeader('sentry-trace', sentryTrace);\n  if (sentryBaggageHeader) {\n    request.addHeader('baggage', sentryBaggageHeader);\n  }\n}\n\nfunction createRequestSpan(\n  activeSpan: Span | undefined,\n  request: RequestWithSentry,\n  stringUrl: string,\n): Span | undefined {\n  const url = parseUrl(stringUrl);\n\n  const method = request.method || 'GET';\n  const data: Record<string, unknown> = {\n    'http.method': method,\n  };\n  if (url.search) {\n    data['http.query'] = url.search;\n  }\n  if (url.hash) {\n    data['http.fragment'] = url.hash;\n  }\n  // eslint-disable-next-line deprecation/deprecation\n  return activeSpan?.startChild({\n    op: 'http.client',\n    origin: 'auto.http.node.undici',\n    description: `${method} ${getSanitizedUrlString(url)}`,\n    data,\n  });\n}\n", "import * as http from 'http';\nimport { URL } from 'url';\nimport { convertIntegrationFnToClass } from '@sentry/core';\nimport type { Client, Envelope, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { logger, serializeEnvelope } from '@sentry/utils';\n\ntype SpotlightConnectionOptions = {\n  /**\n   * Set this if the Spotlight Sidecar is not running on localhost:8969\n   * By default, the Url is set to http://localhost:8969/stream\n   */\n  sidecarUrl?: string;\n};\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst spotlightIntegration = ((options: Partial<SpotlightConnectionOptions> = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof process === 'object' && process.env && process.env.NODE_ENV !== 'development') {\n        logger.warn(\"[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?\");\n      }\n      connectToSpotlight(client, _options);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Spotlight = convertIntegrationFnToClass(INTEGRATION_NAME, spotlightIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n> & {\n  new (\n    options?: Partial<{\n      sidecarUrl?: string;\n    }>,\n  ): Integration;\n};\n\nfunction connectToSpotlight(client: Client, options: Required<SpotlightConnectionOptions>): void {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  if (typeof client.on !== 'function') {\n    logger.warn('[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)');\n    return;\n  }\n\n  client.on('beforeEnvelope', (envelope: Envelope) => {\n    if (failedRequests > 3) {\n      logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = serializeEnvelope(envelope);\n\n    const req = http.request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url: string): URL | undefined {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n", "/*! @sentry/node 7.94.1 (cf062ba) | https://github.com/getsentry/sentry-javascript */\nexports.base64WorkerScript=\"\";\n", "// TODO (v8): This import can be removed once we only support Node with global URL\nimport { URL } from 'url';\nimport { convertIntegrationFnToClass, getCurrentScope } from '@sentry/core';\nimport type { Client, Contexts, Event, EventHint, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { dynamicRequire, logger } from '@sentry/utils';\nimport type { Worker, WorkerOptions } from 'worker_threads';\nimport type { NodeClient } from '../../client';\nimport { NODE_VERSION } from '../../nodeVersion';\nimport type { Options, WorkerStartData } from './common';\nimport { base64WorkerScript } from './worker-script';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\ntype WorkerNodeV14 = Worker & { new (filename: string | URL, options?: WorkerOptions): Worker };\n\ntype WorkerThreads = {\n  Worker: WorkerNodeV14;\n};\n\nfunction log(message: string, ...args: unknown[]): void {\n  logger.log(`[ANR] ${message}`, ...args);\n}\n\n/**\n * We need to use dynamicRequire because worker_threads is not available in node < v12 and webpack error will when\n * targeting those versions\n */\nfunction getWorkerThreads(): WorkerThreads {\n  return dynamicRequire(module, 'worker_threads');\n}\n\n/**\n * Gets contexts by calling all event processors. This relies on being called after all integrations are setup\n */\nasync function getContexts(client: NodeClient): Promise<Contexts> {\n  let event: Event | null = { message: 'ANR' };\n  const eventHint: EventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return event?.contexts || {};\n}\n\ninterface InspectorApi {\n  open: (port: number) => void;\n  url: () => string | undefined;\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst anrIntegration = ((options: Partial<Options> = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client: NodeClient) {\n      if (NODE_VERSION.major < 16 || (NODE_VERSION.major === 16 && NODE_VERSION.minor < 17)) {\n        throw new Error('ANR detection requires Node 16.17.0 or later');\n      }\n\n      // setImmediate is used to ensure that all other integrations have been setup\n      setImmediate(() => _startWorker(client, options));\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Starts a thread to detect App Not Responding (ANR) events\n *\n * ANR detection requires Node 16.17.0 or later\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Anr = convertIntegrationFnToClass(INTEGRATION_NAME, anrIntegration) as IntegrationClass<\n  Integration & { setup: (client: NodeClient) => void }\n> & {\n  new (options?: Partial<Options>): Integration & { setup(client: Client): void };\n};\n\n/**\n * Starts the ANR worker thread\n */\nasync function _startWorker(client: NodeClient, _options: Partial<Options>): Promise<void> {\n  const contexts = await getContexts(client);\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return;\n  }\n\n  // These will not be accurate if sent later from the worker thread\n  delete contexts.app?.app_memory;\n  delete contexts.device?.free_memory;\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options: WorkerStartData = {\n    debug: logger.isEnabled(),\n    dsn,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: _options.appRootPath,\n    pollInterval: _options.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: _options.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!_options.captureStackTrace,\n    staticTags: _options.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const inspector: InspectorApi = require('inspector');\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const { Worker } = getWorkerThreads();\n\n  const worker = new Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n  });\n\n  process.on('exit', () => {\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg: string) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      getCurrentScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err: Error) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code: number) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n}\n", "import {\n  SDK_VERSION,\n  captureException,\n  continueTrace,\n  convertIntegrationFnToClass,\n  getActiveTransaction,\n  getCurrentScope,\n  getDynamicSamplingContextFromSpan,\n  spanToTraceHeader,\n  startTransaction,\n} from '@sentry/core';\nimport type { IntegrationFn } from '@sentry/types';\nimport { dynamicSamplingContextToSentryBaggageHeader, fill } from '@sentry/utils';\n\nimport type { Boom, RequestEvent, ResponseObject, Server } from './types';\n\nfunction isResponseObject(response: ResponseObject | Boom): response is ResponseObject {\n  return response && (response as ResponseObject).statusCode !== undefined;\n}\n\nfunction isBoomObject(response: ResponseObject | Boom): response is Boom {\n  return response && (response as Boom).isBoom !== undefined;\n}\n\nfunction isErrorEvent(event: RequestEvent): event is RequestEvent {\n  return event && (event as RequestEvent).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData: object): void {\n  captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nexport const hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg: Record<any, any>) {\n    const server = serverArg as unknown as Server;\n\n    server.events.on('request', (request, event) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (request.response && isBoomObject(request.response)) {\n        sendErrorToSentry(request.response);\n      } else if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n\n      if (transaction) {\n        transaction.setStatus('internal_error');\n        transaction.end();\n      }\n    });\n  },\n};\n\nexport const hapiTracingPlugin = {\n  name: 'SentryHapiTracingPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg: Record<any, any>) {\n    const server = serverArg as unknown as Server;\n\n    server.ext('onPreHandler', (request, h) => {\n      const transaction = continueTrace(\n        {\n          sentryTrace: request.headers['sentry-trace'] || undefined,\n          baggage: request.headers['baggage'] || undefined,\n        },\n        transactionContext => {\n          // eslint-disable-next-line deprecation/deprecation\n          return startTransaction({\n            ...transactionContext,\n            op: 'hapi.request',\n            name: request.route.path,\n            description: `${request.route.method} ${request.path}`,\n          });\n        },\n      );\n\n      // eslint-disable-next-line deprecation/deprecation\n      getCurrentScope().setSpan(transaction);\n\n      return h.continue;\n    });\n\n    server.ext('onPreResponse', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (request.response && isResponseObject(request.response) && transaction) {\n        const response = request.response as ResponseObject;\n        response.header('sentry-trace', spanToTraceHeader(transaction));\n\n        const dynamicSamplingContext = dynamicSamplingContextToSentryBaggageHeader(\n          getDynamicSamplingContextFromSpan(transaction),\n        );\n\n        if (dynamicSamplingContext) {\n          response.header('baggage', dynamicSamplingContext);\n        }\n      }\n\n      return h.continue;\n    });\n\n    server.ext('onPostHandler', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (request.response && isResponseObject(request.response) && transaction) {\n        transaction.setHttpStatus(request.response.statusCode);\n      }\n\n      if (transaction) {\n        transaction.end();\n      }\n\n      return h.continue;\n    });\n  },\n};\n\nexport type HapiOptions = {\n  /** Hapi server instance */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  server?: Record<any, any>;\n};\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst hapiIntegration = ((options: HapiOptions = {}) => {\n  const server = options.server as undefined | Server;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!server) {\n        return;\n      }\n\n      fill(server, 'start', (originalStart: () => void) => {\n        return async function (this: Server) {\n          await this.register(hapiTracingPlugin);\n          await this.register(hapiErrorPlugin);\n          const result = originalStart.apply(this);\n          return result;\n        };\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Hapi Framework Integration\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Hapi = convertIntegrationFnToClass(INTEGRATION_NAME, hapiIntegration);\n", "import { posix, sep } from 'path';\nimport { dirname } from '@sentry/utils';\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path: string): string {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nexport function createGetModuleFromFilename(\n  basePath: string = process.argv[1] ? dirname(process.argv[1]) : process.cwd(),\n  isWindows: boolean = sep === '\\\\',\n): (filename: string | undefined) => string | undefined {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename: string | undefined) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n", "/* eslint-disable max-lines */\nimport {\n  FunctionToString,\n  InboundFilters,\n  LinkedErrors,\n  endSession,\n  getClient,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  getIsolationScope,\n  getMainCarrier,\n  initAndBind,\n  startSession,\n} from '@sentry/core';\nimport type { SessionStatus, StackParser } from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  createStackParser,\n  nodeStackLineParser,\n  stackParserFromStackParserOptions,\n  tracingContextFromHeaders,\n} from '@sentry/utils';\n\nimport { setNodeAsyncContextStrategy } from './async';\nimport { NodeClient } from './client';\nimport {\n  Console,\n  Context,\n  ContextLines,\n  Http,\n  LocalVariables,\n  Modules,\n  OnUncaughtException,\n  OnUnhandledRejection,\n  RequestData,\n  Spotlight,\n  Undici,\n} from './integrations';\nimport { createGetModuleFromFilename } from './module';\nimport { makeNodeTransport } from './transports';\nimport type { NodeClientOptions, NodeOptions } from './types';\n\n/* eslint-disable deprecation/deprecation */\nexport const defaultIntegrations = [\n  // Common\n  new InboundFilters(),\n  new FunctionToString(),\n  new LinkedErrors(),\n  // Native Wrappers\n  new Console(),\n  new Http(),\n  new Undici(),\n  // Global Handlers\n  new OnUncaughtException(),\n  new OnUnhandledRejection(),\n  // Event Info\n  new ContextLines(),\n  new LocalVariables(),\n  new Context(),\n  new Modules(),\n  new RequestData(),\n];\n/* eslint-enable deprecation/deprecation */\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\n// eslint-disable-next-line complexity\nexport function init(options: NodeOptions = {}): void {\n  const carrier = getMainCarrier();\n\n  setNodeAsyncContextStrategy();\n\n  const autoloadedIntegrations = carrier.__SENTRY__?.integrations || [];\n\n  options.defaultIntegrations =\n    options.defaultIntegrations === false\n      ? []\n      : [\n          ...(Array.isArray(options.defaultIntegrations) ? options.defaultIntegrations : defaultIntegrations),\n          ...autoloadedIntegrations,\n        ];\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  const sentryTracesSampleRate = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (options.tracesSampleRate === undefined && sentryTracesSampleRate) {\n    const tracesSampleRate = parseFloat(sentryTracesSampleRate);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    } else {\n      // If release is not provided, then we should disable autoSessionTracking\n      options.autoSessionTracking = false;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  if (options.instrumenter === undefined) {\n    options.instrumenter = 'sentry';\n  }\n\n  // TODO(v7): Refactor this to reduce the logic above\n  const clientOptions: NodeClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeNodeTransport,\n  };\n\n  initAndBind(options.clientClass || NodeClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  updateScopeFromEnvVariables();\n\n  if (options.spotlight) {\n    const client = getClient();\n    if (client && client.addIntegration) {\n      // force integrations to be setup even if no DSN was set\n      // If they have already been added before, they will be ignored anyhow\n      const integrations = client.getOptions().integrations;\n      for (const integration of integrations) {\n        client.addIntegration(integration);\n      }\n      client.addIntegration(\n        new Spotlight({ sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined }),\n      );\n    }\n  }\n}\n\n/**\n * Function that takes an instance of NodeClient and checks if autoSessionTracking option is enabled for that client\n */\nexport function isAutoSessionTrackingEnabled(client?: NodeClient): boolean {\n  if (client === undefined) {\n    return false;\n  }\n  const clientOptions = client && client.getOptions();\n  if (clientOptions && clientOptions.autoSessionTracking !== undefined) {\n    return clientOptions.autoSessionTracking;\n  }\n  return false;\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE && GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  return (\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env.GITHUB_SHA ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env.COMMIT_REF ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env.VERCEL_GIT_COMMIT_SHA ||\n    process.env.VERCEL_GITHUB_COMMIT_SHA ||\n    process.env.VERCEL_GITLAB_COMMIT_SHA ||\n    process.env.VERCEL_BITBUCKET_COMMIT_SHA ||\n    // Zeit (now known as Vercel)\n    process.env.ZEIT_GITHUB_COMMIT_SHA ||\n    process.env.ZEIT_GITLAB_COMMIT_SHA ||\n    process.env.ZEIT_BITBUCKET_COMMIT_SHA ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env.CF_PAGES_COMMIT_SHA ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()));\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking(): void {\n  startSession();\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = getIsolationScope().getSession();\n    const terminalStates: SessionStatus[] = ['exited', 'crashed'];\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && !terminalStates.includes(session.status)) {\n      endSession();\n    }\n  });\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables(): void {\n  const sentryUseEnvironment = (process.env.SENTRY_USE_ENVIRONMENT || '').toLowerCase();\n  if (!['false', 'n', 'no', 'off', '0'].includes(sentryUseEnvironment)) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const { propagationContext } = tracingContextFromHeaders(sentryTraceEnv, baggageEnv);\n    getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n", "import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Recursively read the contents of a directory.\n *\n * @param targetDir Absolute or relative path of the directory to scan. All returned paths will be relative to this\n * directory.\n * @returns Array holding all relative paths\n * @deprecated This function will be removed in the next major version.\n */\nexport function deepReadDirSync(targetDir: string): string[] {\n  const targetDirAbsPath = path.resolve(targetDir);\n\n  if (!fs.existsSync(targetDirAbsPath)) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}. Directory does not exist.`);\n  }\n\n  if (!fs.statSync(targetDirAbsPath).isDirectory()) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}, because it is not a directory.`);\n  }\n\n  // This does the same thing as its containing function, `deepReadDirSync` (except that - purely for convenience - it\n  // deals in absolute paths rather than relative ones). We need this to be separate from the outer function to preserve\n  // the difference between `targetDirAbsPath` and `currentDirAbsPath`.\n  const deepReadCurrentDir = (currentDirAbsPath: string): string[] => {\n    return fs.readdirSync(currentDirAbsPath).reduce((absPaths: string[], itemName: string) => {\n      const itemAbsPath = path.join(currentDirAbsPath, itemName);\n\n      if (fs.statSync(itemAbsPath).isDirectory()) {\n        return absPaths.concat(deepReadCurrentDir(itemAbsPath));\n      }\n\n      absPaths.push(itemAbsPath);\n      return absPaths;\n    }, []);\n  };\n\n  return deepReadCurrentDir(targetDirAbsPath).map(absPath => path.relative(targetDirAbsPath, absPath));\n}\n", "import { getClient } from '@sentry/core';\nimport { Anr } from '.';\nimport type { NodeClient } from '../../client';\n\n// TODO (v8): Remove this entire file and the `enableAnrDetection` export\n\ninterface LegacyOptions {\n  entryScript: string;\n  pollInterval: number;\n  anrThreshold: number;\n  captureStackTrace: boolean;\n  debug: boolean;\n}\n\n/**\n * @deprecated Use the `Anr` integration instead.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *   dsn: '__DSN__',\n *   integrations: [new Sentry.Integrations.Anr({ captureStackTrace: true })],\n * });\n * ```\n */\nexport function enableAnrDetection(options: Partial<LegacyOptions>): Promise<void> {\n  const client = getClient() as NodeClient;\n  const integration = new Anr(options);\n  integration.setup(client);\n  return Promise.resolve();\n}\n", "/**\n * Deprecated functions which are slated for removal in v8. When the time comes, this entire file can be deleted.\n *\n * See https://github.com/getsentry/sentry-javascript/pull/5257.\n */\n\n/* eslint-disable deprecation/deprecation */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, ExtractedNodeRequestData, PolymorphicRequest } from '@sentry/types';\nimport type { AddRequestDataToEventOptions } from '@sentry/utils';\nimport { addRequestDataToEvent, extractRequestData as _extractRequestData } from '@sentry/utils';\n\n/**\n * @deprecated `Handlers.ExpressRequest` is deprecated and will be removed in v8. Use `PolymorphicRequest` instead.\n */\nexport type ExpressRequest = PolymorphicRequest;\n\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @deprecated `Handlers.extractRequestData` is deprecated and will be removed in v8. Use `extractRequestData` instead.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data.\n * @returns An object containing normalized request data\n */\nexport function extractRequestData(req: { [key: string]: any }, keys?: string[]): ExtractedNodeRequestData {\n  return _extractRequestData(req, { include: keys });\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n *\n * @deprecated `Handlers.ParseRequestOptions` is deprecated and will be removed in v8. Use\n * `AddRequestDataToEventOptions` in `@sentry/utils` instead.\n */\nexport type ParseRequestOptions = AddRequestDataToEventOptions['include'] & {\n  serverName?: boolean;\n  version?: boolean;\n};\n\n/**\n * Enriches passed event with request data.\n *\n * @deprecated `Handlers.parseRequest` is deprecated and will be removed in v8. Use `addRequestDataToEvent` instead.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nexport function parseRequest(event: Event, req: ExpressRequest, options: ParseRequestOptions = {}): Event {\n  return addRequestDataToEvent(event, req, { include: options });\n}\n", "import type * as http from 'http';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  captureException,\n  continueTrace,\n  flush,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  hasTracingEnabled,\n  runWithAsyncContext,\n  startTransaction,\n  withScope,\n} from '@sentry/core';\nimport type { Span } from '@sentry/types';\nimport type { AddRequestDataToEventOptions } from '@sentry/utils';\nimport {\n  addRequestDataToTransaction,\n  dropUndefinedKeys,\n  extractPathForTransaction,\n  extractRequestData,\n  isString,\n  isThenable,\n  logger,\n  normalize,\n} from '@sentry/utils';\n\nimport type { NodeClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\n// TODO (v8 / XXX) Remove this import\nimport type { ParseRequestOptions } from './requestDataDeprecated';\nimport { isAutoSessionTrackingEnabled } from './sdk';\n\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nexport function tracingHandler(): (\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error?: any) => void,\n) => void {\n  return function sentryTracingMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    const options = getClient()?.getOptions();\n\n    if (\n      !options ||\n      options.instrumenter !== 'sentry' ||\n      req.method?.toUpperCase() === 'OPTIONS' ||\n      req.method?.toUpperCase() === 'HEAD'\n    ) {\n      return next();\n    }\n\n    const sentryTrace = req.headers && isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined;\n    const baggage = req.headers?.baggage;\n    if (!hasTracingEnabled(options)) {\n      return next();\n    }\n\n    const [name, source] = extractPathForTransaction(req, { path: true, method: true });\n    const transaction = continueTrace({ sentryTrace, baggage }, ctx =>\n      // TODO: Refactor this to use `startSpan()`\n      // eslint-disable-next-line deprecation/deprecation\n      startTransaction(\n        {\n          name,\n          op: 'http.server',\n          origin: 'auto.http.node.tracingHandler',\n          ...ctx,\n          data: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n          },\n          metadata: {\n            // eslint-disable-next-line deprecation/deprecation\n            ...ctx.metadata,\n            // The request should already have been stored in `scope.sdkProcessingMetadata` (which will become\n            // `event.sdkProcessingMetadata` the same way the metadata here will) by `sentryRequestMiddleware`, but on the\n            // off chance someone is using `sentryTracingMiddleware` without `sentryRequestMiddleware`, it doesn't hurt to\n            // be sure\n            request: req,\n          },\n        },\n        // extra context passed to the tracesSampler\n        { request: extractRequestData(req) },\n      ),\n    );\n\n    // We put the transaction on the scope so users can attach children to it\n    // eslint-disable-next-line deprecation/deprecation\n    getCurrentScope().setSpan(transaction);\n\n    // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (res as any).__sentry_transaction = transaction;\n\n    res.once('finish', () => {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(() => {\n        addRequestDataToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.end();\n      });\n    });\n\n    next();\n  };\n}\n\nexport type RequestHandlerOptions =\n  // TODO (v8 / XXX) Remove ParseRequestOptions type and eslint override\n  // eslint-disable-next-line deprecation/deprecation\n  (ParseRequestOptions | AddRequestDataToEventOptions) & {\n    flushTimeout?: number;\n  };\n\n/**\n * Backwards compatibility shim which can be removed in v8. Forces the given options to follow the\n * `AddRequestDataToEventOptions` interface.\n *\n * TODO (v8): Get rid of this, and stop passing `requestDataOptionsFromExpressHandler` to `setSDKProcessingMetadata`.\n */\nfunction convertReqHandlerOptsToAddReqDataOpts(\n  reqHandlerOptions: RequestHandlerOptions = {},\n): AddRequestDataToEventOptions | undefined {\n  let addRequestDataOptions: AddRequestDataToEventOptions | undefined;\n\n  if ('include' in reqHandlerOptions) {\n    addRequestDataOptions = { include: reqHandlerOptions.include };\n  } else {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ip, request, transaction, user } = reqHandlerOptions as ParseRequestOptions;\n\n    if (ip || request || transaction || user) {\n      addRequestDataOptions = { include: dropUndefinedKeys({ ip, request, transaction, user }) };\n    }\n  }\n\n  return addRequestDataOptions;\n}\n\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nexport function requestHandler(\n  options?: RequestHandlerOptions,\n): (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: any) => void) => void {\n  // TODO (v8): Get rid of this\n  const requestDataOptions = convertReqHandlerOptsToAddReqDataOpts(options);\n\n  const client = getClient<NodeClient>();\n  // Initialise an instance of SessionFlusher on the client when `autoSessionTracking` is enabled and the\n  // `requestHandler` middleware is used indicating that we are running in SessionAggregates mode\n  if (client && isAutoSessionTrackingEnabled(client)) {\n    client.initSessionFlusher();\n\n    // If Scope contains a Single mode Session, it is removed in favor of using Session Aggregates mode\n    const scope = getCurrentScope();\n    if (scope.getSession()) {\n      scope.setSession();\n    }\n  }\n\n  return function sentryRequestMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _end = res.end;\n      res.end = function (chunk?: any | (() => void), encoding?: string | (() => void), cb?: () => void): void {\n        void flush(options.flushTimeout)\n          .then(() => {\n            _end.call(this, chunk, encoding, cb);\n          })\n          .then(null, e => {\n            DEBUG_BUILD && logger.error(e);\n            _end.call(this, chunk, encoding, cb);\n          });\n      };\n    }\n    runWithAsyncContext(() => {\n      const scope = getCurrentScope();\n      scope.setSDKProcessingMetadata({\n        request: req,\n        // TODO (v8): Stop passing this\n        requestDataOptionsFromExpressHandler: requestDataOptions,\n      });\n\n      const client = getClient<NodeClient>();\n      if (isAutoSessionTrackingEnabled(client)) {\n        // Set `status` of `RequestSession` to Ok, at the beginning of the request\n        scope.setRequestSession({ status: 'ok' });\n      }\n\n      res.once('finish', () => {\n        const client = getClient<NodeClient>();\n        if (isAutoSessionTrackingEnabled(client)) {\n          setImmediate(() => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (client && (client as any)._captureRequestSession) {\n              // Calling _captureRequestSession to capture request session at the end of the request by incrementing\n              // the correct SessionAggregates bucket i.e. crashed, errored or exited\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n              (client as any)._captureRequestSession();\n            }\n          });\n        }\n      });\n      next();\n    });\n  };\n}\n\n/** JSDoc */\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\n/** JSDoc */\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error: MiddlewareError): boolean {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nexport function errorHandler(options?: {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   * @param error Captured middleware error\n   */\n  shouldHandleError?(this: void, error: MiddlewareError): boolean;\n}): (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    const shouldHandleError = (options && options.shouldHandleError) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(_scope => {\n        // The request should already have been stored in `scope.sdkProcessingMetadata` by `sentryRequestMiddleware`,\n        // but on the off chance someone is using `sentryErrorMiddleware` without `sentryRequestMiddleware`, it doesn't\n        // hurt to be sure\n        _scope.setSDKProcessingMetadata({ request: _req });\n\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const transaction = (res as any).__sentry_transaction as Span;\n        if (transaction && !getActiveSpan()) {\n          // eslint-disable-next-line deprecation/deprecation\n          _scope.setSpan(transaction);\n        }\n\n        const client = getClient<NodeClient>();\n        if (client && isAutoSessionTrackingEnabled(client)) {\n          // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n          // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n          // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n          // running in SessionAggregates mode\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const isSessionAggregatesMode = (client as any)._sessionFlusher !== undefined;\n          if (isSessionAggregatesMode) {\n            const requestSession = _scope.getRequestSession();\n            // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n            // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n            // the bounds of a request, and if so the status is updated\n            if (requestSession && requestSession.status !== undefined) {\n              requestSession.status = 'crashed';\n            }\n          }\n        }\n\n        const eventId = captureException(error, { mechanism: { type: 'middleware', handled: false } });\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (res as any).sentry = eventId;\n        next(error);\n      });\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\ninterface SentryTrpcMiddlewareOptions {\n  /** Whether to include procedure inputs in reported events. Defaults to `false`. */\n  attachRpcInput?: boolean;\n}\n\ninterface TrpcMiddlewareArguments<T> {\n  path: string;\n  type: string;\n  next: () => T;\n  rawInput: unknown;\n}\n\n/**\n * Sentry tRPC middleware that names the handling transaction after the called procedure.\n *\n * Use the Sentry tRPC middleware in combination with the Sentry server integration,\n * e.g. Express Request Handlers or Next.js SDK.\n */\nexport function trpcMiddleware(options: SentryTrpcMiddlewareOptions = {}) {\n  return function <T>({ path, type, next, rawInput }: TrpcMiddlewareArguments<T>): T {\n    const clientOptions = getClient()?.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    const sentryTransaction = getCurrentScope().getTransaction();\n\n    if (sentryTransaction) {\n      sentryTransaction.updateName(`trpc/${path}`);\n      sentryTransaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n      sentryTransaction.op = 'rpc.server';\n\n      const trpcContext: Record<string, unknown> = {\n        procedure_type: type,\n      };\n\n      if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n        trpcContext.input = normalize(rawInput);\n      }\n\n      // TODO: Can we rewrite this to an attribute? Or set this on the scope?\n      // eslint-disable-next-line deprecation/deprecation\n      sentryTransaction.setContext('trpc', trpcContext);\n    }\n\n    function captureIfError(nextResult: { ok: false; error?: Error } | { ok: true }): void {\n      if (!nextResult.ok) {\n        captureException(nextResult.error, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n      }\n    }\n\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = next();\n    } catch (e) {\n      captureException(e, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Promise.resolve(maybePromiseResult).then(\n        nextResult => {\n          captureIfError(nextResult as any);\n        },\n        e => {\n          captureException(e, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n        },\n      );\n    } else {\n      captureIfError(maybePromiseResult as any);\n    }\n\n    // We return the original promise just to be safe.\n    return maybePromiseResult;\n  };\n}\n\n// TODO (v8 / #5257): Remove this\n// eslint-disable-next-line deprecation/deprecation\nexport type { ParseRequestOptions, ExpressRequest } from './requestDataDeprecated';\n// eslint-disable-next-line deprecation/deprecation\nexport { parseRequest, extractRequestData } from './requestDataDeprecated';\n", "Object.defineProperty(exports, '__esModule', { value: true });\n\nconst console = require('./console.js');\nconst http = require('./http.js');\nconst onuncaughtexception = require('./onuncaughtexception.js');\nconst onunhandledrejection = require('./onunhandledrejection.js');\nconst modules = require('./modules.js');\nconst contextlines = require('./contextlines.js');\nconst context = require('./context.js');\nconst core = require('@sentry/core');\nconst index = require('./local-variables/index.js');\nconst index$1 = require('./undici/index.js');\nconst spotlight = require('./spotlight.js');\nconst index$2 = require('./anr/index.js');\nconst index$3 = require('./hapi/index.js');\n\n\n\nexports.Console = console.Console;\nexports.Http = http.Http;\nexports.OnUncaughtException = onuncaughtexception.OnUncaughtException;\nexports.OnUnhandledRejection = onunhandledrejection.OnUnhandledRejection;\nexports.Modules = modules.Modules;\nexports.ContextLines = contextlines.ContextLines;\nexports.Context = context.Context;\nexports.RequestData = core.RequestData;\nexports.LocalVariables = index.LocalVariables;\nexports.Undici = index$1.Undici;\nexports.Spotlight = spotlight.Spotlight;\nexports.Anr = index$2.Anr;\nexports.Hapi = index$3.Hapi;\n//# sourceMappingURL=index.js.map\n", "Object.defineProperty(exports, '__esModule', { value: true });\n\nconst tracing = require('@sentry-internal/tracing');\n\n\n\nexports.Apollo = tracing.Apollo;\nexports.Express = tracing.Express;\nexports.GraphQL = tracing.GraphQL;\nexports.Mongo = tracing.Mongo;\nexports.Mysql = tracing.Mysql;\nexports.Postgres = tracing.Postgres;\nexports.Prisma = tracing.Prisma;\n//# sourceMappingURL=integrations.js.map\n", "const replacements: [string, string][] = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nexport function replaceCronNames(cronExpression: string): string {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n", "import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common';\n\nexport type CronJobParams = {\n  cronTime: string | Date;\n  onTick: (context: unknown, onComplete?: unknown) => void | Promise<void>;\n  onComplete?: () => void | Promise<void>;\n  start?: boolean | null;\n  context?: unknown;\n  runOnInit?: boolean | null;\n  utcOffset?: number;\n  timeZone?: string;\n  unrefTimeout?: boolean | null;\n};\n\nexport type CronJob = {\n  //\n};\n\nexport type CronJobConstructor = {\n  from: (param: CronJobParams) => CronJob;\n\n  new (\n    cronTime: CronJobParams['cronTime'],\n    onTick: CronJobParams['onTick'],\n    onComplete?: CronJobParams['onComplete'],\n    start?: CronJobParams['start'],\n    timeZone?: CronJobParams['timeZone'],\n    context?: CronJobParams['context'],\n    runOnInit?: CronJobParams['runOnInit'],\n    utcOffset?: CronJobParams['utcOffset'],\n    unrefTimeout?: CronJobParams['unrefTimeout'],\n  ): CronJob;\n};\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nexport function instrumentCron<T>(lib: T & CronJobConstructor, monitorSlug: string): T {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args: ConstructorParameters<CronJobConstructor>) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = replaceCronNames(cronTime);\n\n      function monitoredTick(context: unknown, onComplete?: unknown): void | Promise<void> {\n        return withMonitor(\n          monitorSlug,\n          () => {\n            return onTick(context, onComplete);\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            ...(timeZone ? { timeZone } : {}),\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop: keyof CronJobConstructor) {\n      if (prop === 'from') {\n        return (param: CronJobParams) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = replaceCronNames(cronTime);\n\n          param.onTick = (context: unknown, onComplete?: unknown) => {\n            return withMonitor(\n              monitorSlug,\n              () => {\n                return onTick(context, onComplete);\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                ...(timeZone ? { timeZone } : {}),\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n", "import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common';\n\nexport interface NodeCronOptions {\n  name: string;\n  timezone?: string;\n}\n\nexport interface NodeCron {\n  schedule: (cronExpression: string, callback: () => void, options: NodeCronOptions) => unknown;\n}\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nexport function instrumentNodeCron<T>(lib: Partial<NodeCron> & T): T {\n  return new Proxy(lib, {\n    get(target, prop: keyof NodeCron) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray: Parameters<NodeCron['schedule']>) {\n            const [expression, , options] = argArray;\n\n            if (!options?.name) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            return withMonitor(\n              options.name,\n              () => {\n                return target.apply(thisArg, argArray);\n              },\n              {\n                schedule: { type: 'crontab', value: replaceCronNames(expression) },\n                timezone: options?.timezone,\n              },\n            );\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n", "import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common';\n\nexport interface NodeSchedule {\n  scheduleJob(\n    nameOrExpression: string | Date | object,\n    expressionOrCallback: string | Date | object | (() => void),\n    callback?: () => void,\n  ): unknown;\n}\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nexport function instrumentNodeSchedule<T>(lib: T & NodeSchedule): T {\n  return new Proxy(lib, {\n    get(target, prop: keyof NodeSchedule) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray: Parameters<NodeSchedule['scheduleJob']>) {\n            const [nameOrExpression, expressionOrCallback] = argArray;\n\n            if (typeof nameOrExpression !== 'string' || typeof expressionOrCallback !== 'string') {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            return withMonitor(\n              monitorSlug,\n              () => {\n                return target.apply(thisArg, argArray);\n              },\n              {\n                schedule: { type: 'crontab', value: replaceCronNames(expression) },\n              },\n            );\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n", "export type {\n  Breadcrumb,\n  BreadcrumbHint,\n  PolymorphicRequest,\n  Request,\n  SdkInfo,\n  Event,\n  EventHint,\n  Exception,\n  Session,\n  // eslint-disable-next-line deprecation/deprecation\n  Severity,\n  SeverityLevel,\n  Span,\n  StackFrame,\n  Stacktrace,\n  Thread,\n  Transaction,\n  User,\n} from '@sentry/types';\nexport type { AddRequestDataToEventOptions, TransactionNamingScheme } from '@sentry/utils';\n\nexport type { NodeOptions } from './types';\n\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  addGlobalEventProcessor,\n  addEventProcessor,\n  addBreadcrumb,\n  addIntegration,\n  captureException,\n  captureEvent,\n  captureMessage,\n  close,\n  // eslint-disable-next-line deprecation/deprecation\n  configureScope,\n  createTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  extractTraceparentData,\n  flush,\n  // eslint-disable-next-line deprecation/deprecation\n  getActiveTransaction,\n  getHubFromCarrier,\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub,\n  getClient,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  Hub,\n  // eslint-disable-next-line deprecation/deprecation\n  lastEventId,\n  // eslint-disable-next-line deprecation/deprecation\n  makeMain,\n  setCurrentClient,\n  runWithAsyncContext,\n  Scope,\n  // eslint-disable-next-line deprecation/deprecation\n  startTransaction,\n  SDK_VERSION,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  spanStatusfromHttpCode,\n  // eslint-disable-next-line deprecation/deprecation\n  trace,\n  withScope,\n  withIsolationScope,\n  captureCheckIn,\n  withMonitor,\n  setMeasurement,\n  getActiveSpan,\n  startSpan,\n  // eslint-disable-next-line deprecation/deprecation\n  startActiveSpan,\n  startInactiveSpan,\n  startSpanManual,\n  continueTrace,\n  metrics,\n  functionToStringIntegration,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  requestDataIntegration,\n} from '@sentry/core';\nexport type { SpanStatusType } from '@sentry/core';\nexport { autoDiscoverNodePerformanceMonitoringIntegrations } from './tracing';\n\nexport { NodeClient } from './client';\nexport { makeNodeTransport } from './transports';\nexport { defaultIntegrations, init, defaultStackParser, getSentryRelease } from './sdk';\nexport { addRequestDataToEvent, DEFAULT_USER_INCLUDES, extractRequestData } from '@sentry/utils';\n// eslint-disable-next-line deprecation/deprecation\nexport { deepReadDirSync } from './utils';\n\nimport { createGetModuleFromFilename } from './module';\n/**\n * @deprecated use `createGetModuleFromFilename` instead.\n */\nexport const getModuleFromFilename = createGetModuleFromFilename();\nexport { createGetModuleFromFilename };\n\n// eslint-disable-next-line deprecation/deprecation\nexport { enableAnrDetection } from './integrations/anr/legacy';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\n\nimport * as Handlers from './handlers';\nimport * as NodeIntegrations from './integrations';\nimport * as TracingIntegrations from './tracing/integrations';\n\nconst INTEGRATIONS = {\n  // eslint-disable-next-line deprecation/deprecation\n  ...CoreIntegrations,\n  ...NodeIntegrations,\n  ...TracingIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Handlers };\n\nexport { hapiErrorPlugin } from './integrations/hapi';\n\nimport { instrumentCron } from './cron/cron';\nimport { instrumentNodeCron } from './cron/node-cron';\nimport { instrumentNodeSchedule } from './cron/node-schedule';\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nexport const cron = {\n  instrumentCron,\n  instrumentNodeCron,\n  instrumentNodeSchedule,\n};\n", "import { startInactiveSpan } from '@sentry/node';\nimport type { Integration, Span } from '@sentry/types';\nimport { fill } from '@sentry/utils';\n// 'aws-sdk/global' import is expected to be type-only so it's erased in the final .js file.\n// When TypeScript compiler is upgraded, use `import type` syntax to explicitly assert that we don't want to load a module here.\nimport type * as AWS from 'aws-sdk/global';\n\ntype GenericParams = { [key: string]: any }; // eslint-disable-line @typescript-eslint/no-explicit-any\ntype MakeRequestCallback<TResult> = (err: AWS.AWSError, data: TResult) => void;\n// This interace could be replaced with just type alias once the `strictBindCallApply` mode is enabled.\ninterface MakeRequestFunction<TParams, TResult> extends CallableFunction {\n  (operation: string, params?: TParams, callback?: MakeRequestCallback<TResult>): AWS.Request<TResult, AWS.AWSError>;\n}\ninterface AWSService {\n  serviceIdentifier: string;\n}\n\n/** AWS service requests tracking */\nexport class AWSServices implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'AWSServices';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private readonly _optional: boolean;\n\n  public constructor(options: { optional?: boolean } = {}) {\n    this.name = AWSServices.id;\n\n    this._optional = options.optional || false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const awsModule = require('aws-sdk/global') as typeof AWS;\n      fill(awsModule.Service.prototype, 'makeRequest', wrapMakeRequest);\n    } catch (e) {\n      if (!this._optional) {\n        throw e;\n      }\n    }\n  }\n}\n\n/** */\nfunction wrapMakeRequest<TService extends AWSService, TResult>(\n  orig: MakeRequestFunction<GenericParams, TResult>,\n): MakeRequestFunction<GenericParams, TResult> {\n  return function (this: TService, operation: string, params?: GenericParams, callback?: MakeRequestCallback<TResult>) {\n    let span: Span | undefined;\n    const req = orig.call(this, operation, params);\n    req.on('afterBuild', () => {\n      span = startInactiveSpan({\n        name: describe(this, operation, params),\n        op: 'http.client',\n        origin: 'auto.http.serverless',\n      });\n    });\n    req.on('complete', () => {\n      if (span) {\n        span.end();\n      }\n    });\n\n    if (callback) {\n      req.send(callback);\n    }\n    return req;\n  };\n}\n\n/** Describes an operation on generic AWS service */\nfunction describe<TService extends AWSService>(service: TService, operation: string, params?: GenericParams): string {\n  let ret = `aws.${service.serviceIdentifier}.${operation}`;\n  if (params === undefined) {\n    return ret;\n  }\n  switch (service.serviceIdentifier) {\n    case 's3':\n      ret += describeS3Operation(operation, params);\n      break;\n    case 'lambda':\n      ret += describeLambdaOperation(operation, params);\n      break;\n  }\n  return ret;\n}\n\n/** Describes an operation on AWS Lambda service */\nfunction describeLambdaOperation(_operation: string, params: GenericParams): string {\n  let ret = '';\n  if ('FunctionName' in params) {\n    ret += ` ${params.FunctionName}`;\n  }\n  return ret;\n}\n\n/** Describes an operation on AWS S3 service */\nfunction describeS3Operation(_operation: string, params: GenericParams): string {\n  let ret = '';\n  if ('Bucket' in params) {\n    ret += ` ${params.Bucket}`;\n  }\n  return ret;\n}\n", "declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n", "import { runWithAsyncContext } from '@sentry/core';\nimport type { Scope } from '@sentry/types';\nimport { addExceptionMechanism } from '@sentry/utils';\n\n/**\n * @param fn function to run\n * @returns function which runs in the newly created domain or in the existing one\n */\nexport function domainify<A extends unknown[], R>(fn: (...args: A) => R): (...args: A) => R | void {\n  return (...args) => runWithAsyncContext(() => fn(...args), { reuseExisting: true });\n}\n\n/**\n * @param source function to be wrapped\n * @param wrap wrapping function that takes source and returns a wrapper\n * @param overrides properties to override in the source\n * @returns wrapped function\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function proxyFunction<A extends any[], R, F extends (...args: A) => R>(\n  source: F,\n  wrap: (source: F) => F,\n  overrides?: Record<PropertyKey, unknown>,\n): F {\n  const wrapper = wrap(source);\n  const handler: ProxyHandler<F> = {\n    apply: <T>(_target: F, thisArg: T, args: A) => {\n      return wrapper.apply(thisArg, args);\n    },\n  };\n\n  if (overrides) {\n    handler.get = (target, prop) => {\n      if (Object.prototype.hasOwnProperty.call(overrides, prop)) {\n        return overrides[prop as string];\n      }\n      return (target as Record<PropertyKey, unknown>)[prop as string];\n    };\n  }\n\n  return new Proxy(source, handler);\n}\n\n/**\n * Marks an event as unhandled by adding a span processor to the passed scope.\n */\nexport function markEventUnhandled(scope: Scope): Scope {\n  scope.addEventProcessor(event => {\n    addExceptionMechanism(event, { handled: false });\n    return event;\n  });\n\n  return scope;\n}\n", "import { existsSync } from 'fs';\nimport { hostname } from 'os';\nimport { basename, resolve } from 'path';\nimport { types } from 'util';\n/* eslint-disable max-lines */\nimport type { NodeOptions, Scope } from '@sentry/node';\nimport { SDK_VERSION } from '@sentry/node';\nimport {\n  captureException,\n  captureMessage,\n  continueTrace,\n  defaultIntegrations as nodeDefaultIntegrations,\n  flush,\n  getCurrentScope,\n  init as initNode,\n  startSpanManual,\n  withScope,\n} from '@sentry/node';\nimport type { Integration, SdkMetadata, Span } from '@sentry/types';\nimport { isString, logger } from '@sentry/utils';\n// NOTE: I have no idea how to fix this right now, and don't want to waste more time, as it builds just fine — Kamil\nimport type { Context, Handler } from 'aws-lambda';\nimport { performance } from 'perf_hooks';\n\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '@sentry/core';\nimport { AWSServices } from './awsservices';\nimport { DEBUG_BUILD } from './debug-build';\nimport { markEventUnhandled } from './utils';\n\nexport * from '@sentry/node';\n\nconst { isPromise } = types;\n\n// https://www.npmjs.com/package/aws-lambda-consumer\ntype SyncHandler<T extends Handler> = (\n  event: Parameters<T>[0],\n  context: Parameters<T>[1],\n  callback: Parameters<T>[2],\n) => void;\n\nexport type AsyncHandler<T extends Handler> = (\n  event: Parameters<T>[0],\n  context: Parameters<T>[1],\n) => Promise<NonNullable<Parameters<Parameters<T>[2]>[1]>>;\n\nexport interface WrapperOptions {\n  flushTimeout: number;\n  /**\n   * @deprecated This option is unused since v6 and will be removed in v8.\n   */\n  rethrowAfterCapture?: boolean;\n  callbackWaitsForEmptyEventLoop: boolean;\n  captureTimeoutWarning: boolean;\n  timeoutWarningLimit: number;\n  /**\n   * Capture all errors when `Promise.allSettled` is returned by the handler\n   * The {@link wrapHandler} will not fail the lambda even if there are errors\n   * @default false\n   */\n  captureAllSettledReasons: boolean;\n  /**\n   * Automatically trace all handler invocations.\n   * You may want to disable this if you use express within Lambda (use tracingHandler instead).\n   * @default true\n   */\n  startTrace: boolean;\n}\n\nexport const defaultIntegrations: Integration[] = [...nodeDefaultIntegrations, new AWSServices({ optional: true })];\n\ninterface AWSLambdaOptions extends NodeOptions {\n  /**\n   * Internal field that is set to `true` when init() is called by the Sentry AWS Lambda layer.\n   *\n   */\n  _invokedByLambdaLayer?: boolean;\n}\n\n/**\n * Initializes the Sentry AWS Lambda SDK.\n *\n * @param options Configuration options for the SDK, @see {@link AWSLambdaOptions}.\n */\nexport function init(options: AWSLambdaOptions = {}): void {\n  const opts = {\n    _metadata: {} as SdkMetadata,\n    defaultIntegrations,\n    ...options,\n  };\n\n  opts._metadata.sdk = opts._metadata.sdk || {\n    name: 'sentry.javascript.serverless',\n    integrations: ['AWSLambda'],\n    packages: [\n      {\n        name: 'npm:@sentry/serverless',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  };\n\n  initNode(opts);\n}\n\n/** */\nfunction tryRequire<T>(taskRoot: string, subdir: string, mod: string): T {\n  const lambdaStylePath = resolve(taskRoot, subdir, mod);\n  if (existsSync(lambdaStylePath) || existsSync(`${lambdaStylePath}.js`)) {\n    // Lambda-style path\n    return require(lambdaStylePath);\n  }\n  // Node-style path\n  return require(require.resolve(mod, { paths: [taskRoot, subdir] }));\n}\n\n/** */\nfunction isPromiseAllSettledResult<T>(result: T[]): boolean {\n  return result.every(\n    v =>\n      Object.prototype.hasOwnProperty.call(v, 'status') &&\n      (Object.prototype.hasOwnProperty.call(v, 'value') || Object.prototype.hasOwnProperty.call(v, 'reason')),\n  );\n}\n\ntype PromiseSettledResult<T> = { status: 'rejected' | 'fulfilled'; reason?: T };\n\n/** */\nfunction getRejectedReasons<T>(results: PromiseSettledResult<T>[]): T[] {\n  return results.reduce((rejected: T[], result) => {\n    if (result.status === 'rejected' && result.reason) rejected.push(result.reason);\n    return rejected;\n  }, []);\n}\n\n/** */\nexport function tryPatchHandler(taskRoot: string, handlerPath: string): void {\n  type HandlerBag = HandlerModule | Handler | null | undefined;\n\n  interface HandlerModule {\n    [key: string]: HandlerBag;\n  }\n\n  const handlerDesc = basename(handlerPath);\n  const match = handlerDesc.match(/^([^.]*)\\.(.*)$/);\n  if (!match) {\n    DEBUG_BUILD && logger.error(`Bad handler ${handlerDesc}`);\n    return;\n  }\n\n  const [, handlerMod, handlerName] = match;\n\n  let obj: HandlerBag;\n  try {\n    const handlerDir = handlerPath.substring(0, handlerPath.indexOf(handlerDesc));\n    obj = tryRequire(taskRoot, handlerDir, handlerMod);\n  } catch (e) {\n    DEBUG_BUILD && logger.error(`Cannot require ${handlerPath} in ${taskRoot}`, e);\n    return;\n  }\n\n  let mod: HandlerBag;\n  let functionName: string | undefined;\n  handlerName.split('.').forEach(name => {\n    mod = obj;\n    obj = obj && (obj as HandlerModule)[name];\n    functionName = name;\n  });\n  if (!obj) {\n    DEBUG_BUILD && logger.error(`${handlerPath} is undefined or not exported`);\n    return;\n  }\n  if (typeof obj !== 'function') {\n    DEBUG_BUILD && logger.error(`${handlerPath} is not a function`);\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  (mod as HandlerModule)[functionName!] = wrapHandler(obj);\n}\n\n/**\n * Tries to invoke context.getRemainingTimeInMillis if not available returns 0\n * Some environments use AWS lambda but don't support this function\n * @param context\n */\nfunction tryGetRemainingTimeInMillis(context: Context): number {\n  return typeof context.getRemainingTimeInMillis === 'function' ? context.getRemainingTimeInMillis() : 0;\n}\n\n/**\n * Adds additional information from the environment and AWS Context to the Sentry Scope.\n *\n * @param scope Scope that should be enhanced\n * @param context AWS Lambda context that will be used to extract some part of the data\n * @param startTime performance.now() when wrapHandler was invoked\n */\nfunction enhanceScopeWithEnvironmentData(scope: Scope, context: Context, startTime: number): void {\n  scope.setContext('aws.lambda', {\n    aws_request_id: context.awsRequestId,\n    function_name: context.functionName,\n    function_version: context.functionVersion,\n    invoked_function_arn: context.invokedFunctionArn,\n    execution_duration_in_millis: performance.now() - startTime,\n    remaining_time_in_millis: tryGetRemainingTimeInMillis(context),\n    'sys.argv': process.argv,\n  });\n\n  scope.setContext('aws.cloudwatch.logs', {\n    log_group: context.logGroupName,\n    log_stream: context.logStreamName,\n    url: `https://console.aws.amazon.com/cloudwatch/home?region=${\n      process.env.AWS_REGION\n    }#logsV2:log-groups/log-group/${encodeURIComponent(context.logGroupName)}/log-events/${encodeURIComponent(\n      context.logStreamName,\n    )}?filterPattern=\"${context.awsRequestId}\"`,\n  });\n}\n\n/**\n * Adds additional transaction-related information from the environment and AWS Context to the Sentry Scope.\n *\n * @param scope Scope that should be enhanced\n * @param context AWS Lambda context that will be used to extract some part of the data\n */\nfunction enhanceScopeWithTransactionData(scope: Scope, context: Context): void {\n  scope.addEventProcessor(event => {\n    event.transaction = context.functionName;\n    return event;\n  });\n  scope.setTag('server_name', process.env._AWS_XRAY_DAEMON_ADDRESS || process.env.SENTRY_NAME || hostname());\n  scope.setTag('url', `awslambda:///${context.functionName}`);\n}\n\n/**\n * Wraps a lambda handler adding it error capture and tracing capabilities.\n *\n * @param handler Handler\n * @param options Options\n * @returns Handler\n */\nexport function wrapHandler<TEvent, TResult>(\n  handler: Handler<TEvent, TResult>,\n  wrapOptions: Partial<WrapperOptions> = {},\n): Handler<TEvent, TResult> {\n  const START_TIME = performance.now();\n  const options: WrapperOptions = {\n    flushTimeout: 2000,\n    callbackWaitsForEmptyEventLoop: false,\n    captureTimeoutWarning: true,\n    timeoutWarningLimit: 500,\n    captureAllSettledReasons: false,\n    startTrace: true,\n    ...wrapOptions,\n  };\n  let timeoutWarningTimer: NodeJS.Timeout;\n\n  // AWSLambda is like Express. It makes a distinction about handlers based on its last argument\n  // async (event) => async handler\n  // async (event, context) => async handler\n  // (event, context, callback) => sync handler\n  // Nevertheless whatever option is chosen by user, we convert it to async handler.\n  const asyncHandler: AsyncHandler<typeof handler> =\n    handler.length > 2\n      ? (event, context) =>\n          new Promise((resolve, reject) => {\n            const rv = (handler as SyncHandler<typeof handler>)(event, context, (error, result) => {\n              if (error === null || error === undefined) {\n                resolve(result!); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n              } else {\n                reject(error);\n              }\n            }) as unknown;\n\n            // This should never happen, but still can if someone writes a handler as\n            // `async (event, context, callback) => {}`\n            if (isPromise(rv)) {\n              void (rv as Promise<NonNullable<TResult>>).then(resolve, reject);\n            }\n          })\n      : (handler as AsyncHandler<typeof handler>);\n\n  return async (event, context) => {\n    context.callbackWaitsForEmptyEventLoop = options.callbackWaitsForEmptyEventLoop;\n\n    // In seconds. You cannot go any more granular than this in AWS Lambda.\n    const configuredTimeout = Math.ceil(tryGetRemainingTimeInMillis(context) / 1000);\n    const configuredTimeoutMinutes = Math.floor(configuredTimeout / 60);\n    const configuredTimeoutSeconds = configuredTimeout % 60;\n\n    const humanReadableTimeout =\n      configuredTimeoutMinutes > 0\n        ? `${configuredTimeoutMinutes}m${configuredTimeoutSeconds}s`\n        : `${configuredTimeoutSeconds}s`;\n\n    // When `callbackWaitsForEmptyEventLoop` is set to false, which it should when using `captureTimeoutWarning`,\n    // we don't have a guarantee that this message will be delivered. Because of that, we don't flush it.\n    if (options.captureTimeoutWarning) {\n      const timeoutWarningDelay = tryGetRemainingTimeInMillis(context) - options.timeoutWarningLimit;\n\n      timeoutWarningTimer = setTimeout(() => {\n        withScope(scope => {\n          scope.setTag('timeout', humanReadableTimeout);\n          captureMessage(`Possible function timeout: ${context.functionName}`, 'warning');\n        });\n      }, timeoutWarningDelay) as unknown as NodeJS.Timeout;\n    }\n\n    async function processResult(span?: Span): Promise<TResult> {\n      const scope = getCurrentScope();\n\n      let rv: TResult;\n      try {\n        enhanceScopeWithEnvironmentData(scope, context, START_TIME);\n\n        rv = await asyncHandler(event, context);\n\n        // We manage lambdas that use Promise.allSettled by capturing the errors of failed promises\n        if (options.captureAllSettledReasons && Array.isArray(rv) && isPromiseAllSettledResult(rv)) {\n          const reasons = getRejectedReasons(rv);\n          reasons.forEach(exception => {\n            captureException(exception, scope => markEventUnhandled(scope));\n          });\n        }\n      } catch (e) {\n        captureException(e, scope => markEventUnhandled(scope));\n        throw e;\n      } finally {\n        clearTimeout(timeoutWarningTimer);\n        span?.end();\n        await flush(options.flushTimeout).catch(e => {\n          DEBUG_BUILD && logger.error(e);\n        });\n      }\n      return rv;\n    }\n\n    if (options.startTrace) {\n      const eventWithHeaders = event as { headers?: { [key: string]: string } };\n\n      const sentryTrace =\n        eventWithHeaders.headers && isString(eventWithHeaders.headers['sentry-trace'])\n          ? eventWithHeaders.headers['sentry-trace']\n          : undefined;\n      const baggage = eventWithHeaders.headers?.baggage;\n\n      const continueTraceContext = continueTrace({ sentryTrace, baggage });\n\n      return startSpanManual(\n        {\n          name: context.functionName,\n          op: 'function.aws.lambda',\n          origin: 'auto.function.serverless',\n          ...continueTraceContext,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n          },\n        },\n        span => {\n          enhanceScopeWithTransactionData(getCurrentScope(), context);\n\n          return processResult(span);\n        },\n      );\n    }\n\n    return withScope(async () => {\n      return processResult(undefined);\n    });\n  };\n}\n", "import type { EventEmitter } from 'events';\nimport { startInactiveSpan } from '@sentry/node';\nimport type { Integration } from '@sentry/types';\nimport { fill } from '@sentry/utils';\n\ninterface GrpcFunction extends CallableFunction {\n  (...args: unknown[]): EventEmitter;\n}\n\ninterface GrpcFunctionObject extends GrpcFunction {\n  requestStream: boolean;\n  responseStream: boolean;\n  originalName: string;\n}\n\ninterface StubOptions {\n  servicePath?: string;\n}\n\ninterface CreateStubFunc extends CallableFunction {\n  (createStub: unknown, options: StubOptions): PromiseLike<Stub>;\n}\n\ninterface Stub {\n  [key: string]: GrpcFunctionObject;\n}\n\n/** Google Cloud Platform service requests tracking for GRPC APIs */\nexport class GoogleCloudGrpc implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GoogleCloudGrpc';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private readonly _optional: boolean;\n\n  public constructor(options: { optional?: boolean } = {}) {\n    this.name = GoogleCloudGrpc.id;\n\n    this._optional = options.optional || false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const gaxModule = require('google-gax');\n      fill(\n        gaxModule.GrpcClient.prototype, // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n        'createStub',\n        wrapCreateStub,\n      );\n    } catch (e) {\n      if (!this._optional) {\n        throw e;\n      }\n    }\n  }\n}\n\n/** Returns a wrapped function that returns a stub with tracing enabled */\nfunction wrapCreateStub(origCreate: CreateStubFunc): CreateStubFunc {\n  return async function (this: unknown, ...args: Parameters<CreateStubFunc>) {\n    const servicePath = args[1]?.servicePath;\n    if (servicePath == null || servicePath == undefined) {\n      return origCreate.apply(this, args);\n    }\n    const serviceIdentifier = identifyService(servicePath);\n    const stub = await origCreate.apply(this, args);\n    for (const methodName of Object.keys(Object.getPrototypeOf(stub))) {\n      fillGrpcFunction(stub, serviceIdentifier, methodName);\n    }\n    return stub;\n  };\n}\n\n/** Patches the function in grpc stub to enable tracing */\nfunction fillGrpcFunction(stub: Stub, serviceIdentifier: string, methodName: string): void {\n  const funcObj = stub[methodName];\n  if (typeof funcObj !== 'function') {\n    return;\n  }\n  const callType =\n    !funcObj.requestStream && !funcObj.responseStream\n      ? 'unary call'\n      : funcObj.requestStream && !funcObj.responseStream\n        ? 'client stream'\n        : !funcObj.requestStream && funcObj.responseStream\n          ? 'server stream'\n          : 'bidi stream';\n  if (callType != 'unary call') {\n    return;\n  }\n  fill(\n    stub,\n    methodName,\n    (orig: GrpcFunction): GrpcFunction =>\n      (...args) => {\n        const ret = orig.apply(stub, args);\n        if (typeof ret?.on !== 'function') {\n          return ret;\n        }\n        const span = startInactiveSpan({\n          name: `${callType} ${methodName}`,\n          op: `grpc.${serviceIdentifier}`,\n          origin: 'auto.grpc.serverless',\n        });\n        ret.on('status', () => {\n          if (span) {\n            span.end();\n          }\n        });\n        return ret;\n      },\n  );\n}\n\n/** Identifies service by its address */\nfunction identifyService(servicePath: string): string {\n  const match = servicePath.match(/^(\\w+)\\.googleapis.com$/);\n  return match ? match[1] : servicePath;\n}\n", "// '@google-cloud/common' import is expected to be type-only so it's erased in the final .js file.\n// When TypeScript compiler is upgraded, use `import type` syntax to explicitly assert that we don't want to load a module here.\nimport type * as common from '@google-cloud/common';\nimport { startInactiveSpan } from '@sentry/node';\nimport type { Integration } from '@sentry/types';\nimport { fill } from '@sentry/utils';\n\ntype RequestOptions = common.DecorateRequestOptions;\ntype ResponseCallback = common.BodyResponseCallback;\n// This interace could be replaced with just type alias once the `strictBindCallApply` mode is enabled.\ninterface RequestFunction extends CallableFunction {\n  (reqOpts: RequestOptions, callback: ResponseCallback): void;\n}\n\n/** Google Cloud Platform service requests tracking for RESTful APIs */\nexport class GoogleCloudHttp implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GoogleCloudHttp';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  private readonly _optional: boolean;\n\n  public constructor(options: { optional?: boolean } = {}) {\n    this.name = GoogleCloudHttp.id;\n\n    this._optional = options.optional || false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const commonModule = require('@google-cloud/common') as typeof common;\n      fill(commonModule.Service.prototype, 'request', wrapRequestFunction);\n    } catch (e) {\n      if (!this._optional) {\n        throw e;\n      }\n    }\n  }\n}\n\n/** Returns a wrapped function that makes a request with tracing enabled */\nfunction wrapRequestFunction(orig: RequestFunction): RequestFunction {\n  return function (this: common.Service, reqOpts: RequestOptions, callback: ResponseCallback): void {\n    const httpMethod = reqOpts.method || 'GET';\n    const span = startInactiveSpan({\n      name: `${httpMethod} ${reqOpts.uri}`,\n      op: `http.client.${identifyService(this.apiEndpoint)}`,\n      origin: 'auto.http.serverless',\n    });\n    orig.call(this, reqOpts, (...args: Parameters<ResponseCallback>) => {\n      if (span) {\n        span.end();\n      }\n      callback(...args);\n    });\n  };\n}\n\n/** Identifies service by its base url */\nfunction identifyService(apiEndpoint: string): string {\n  const match = apiEndpoint.match(/^https:\\/\\/(\\w+)\\.googleapis.com$/);\n  return match ? match[1] : apiEndpoint.replace(/^(http|https)?:\\/\\//, '');\n}\n", "import { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, Transaction, handleCallbackErrors } from '@sentry/core';\nimport type { AddRequestDataToEventOptions } from '@sentry/node';\nimport { continueTrace, startSpanManual } from '@sentry/node';\nimport { getCurrentScope } from '@sentry/node';\nimport { captureException, flush } from '@sentry/node';\nimport { isString, logger, stripUrlQueryAndFragment } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { domainify, markEventUnhandled, proxyFunction } from './../utils';\nimport type { HttpFunction, WrapperOptions } from './general';\n\n// TODO (v8 / #5257): Remove this whole old/new business and just use the new stuff\ntype ParseRequestOptions = AddRequestDataToEventOptions['include'] & {\n  serverName?: boolean;\n  version?: boolean;\n};\n\ninterface OldHttpFunctionWrapperOptions extends WrapperOptions {\n  /**\n   * @deprecated Use `addRequestDataToEventOptions` instead.\n   */\n  parseRequestOptions: ParseRequestOptions;\n}\ninterface NewHttpFunctionWrapperOptions extends WrapperOptions {\n  addRequestDataToEventOptions: AddRequestDataToEventOptions;\n}\n\nexport type HttpFunctionWrapperOptions = OldHttpFunctionWrapperOptions | NewHttpFunctionWrapperOptions;\n\n/**\n * Wraps an HTTP function handler adding it error capture and tracing capabilities.\n *\n * @param fn HTTP Handler\n * @param options Options\n * @returns HTTP handler\n */\nexport function wrapHttpFunction(\n  fn: HttpFunction,\n  wrapOptions: Partial<HttpFunctionWrapperOptions> = {},\n): HttpFunction {\n  const wrap = (f: HttpFunction): HttpFunction => domainify(_wrapHttpFunction(f, wrapOptions));\n\n  let overrides: Record<PropertyKey, unknown> | undefined;\n\n  // Functions emulator from firebase-tools has a hack-ish workaround that saves the actual function\n  // passed to `onRequest(...)` and in fact runs it so we need to wrap it too.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n  const emulatorFunc = (fn as any).__emulator_func as HttpFunction | undefined;\n  if (emulatorFunc) {\n    overrides = { __emulator_func: proxyFunction(emulatorFunc, wrap) };\n  }\n  return proxyFunction(fn, wrap, overrides);\n}\n\n/** */\nfunction _wrapHttpFunction(fn: HttpFunction, wrapOptions: Partial<HttpFunctionWrapperOptions> = {}): HttpFunction {\n  // TODO (v8 / #5257): Switch to using `addRequestDataToEventOptions`\n  // eslint-disable-next-line deprecation/deprecation\n  const { parseRequestOptions } = wrapOptions as OldHttpFunctionWrapperOptions;\n\n  const options: HttpFunctionWrapperOptions = {\n    flushTimeout: 2000,\n    // TODO (v8 / xxx): Remove this line, since `addRequestDataToEventOptions` will be included in the spread of `wrapOptions`\n    addRequestDataToEventOptions: parseRequestOptions ? { include: parseRequestOptions } : {},\n    ...wrapOptions,\n  };\n  return (req, res) => {\n    const reqMethod = (req.method || '').toUpperCase();\n    const reqUrl = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n\n    const sentryTrace = req.headers && isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined;\n    const baggage = req.headers?.baggage;\n\n    const continueTraceContext = continueTrace({ sentryTrace, baggage });\n\n    return startSpanManual(\n      {\n        ...continueTraceContext,\n        name: `${reqMethod} ${reqUrl}`,\n        op: 'function.gcp.http',\n        origin: 'auto.function.serverless.gcp_http',\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n        },\n      },\n      span => {\n        getCurrentScope().setSDKProcessingMetadata({\n          request: req,\n          requestDataOptionsFromGCPWrapper: options.addRequestDataToEventOptions,\n        });\n\n        if (span instanceof Transaction) {\n          // We also set __sentry_transaction on the response so people can grab the transaction there to add\n          // spans to it later.\n          // TODO(v8): Remove this\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n          (res as any).__sentry_transaction = span;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        const _end = res.end;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res.end = function (chunk?: any | (() => void), encoding?: string | (() => void), cb?: () => void): any {\n          span?.setHttpStatus(res.statusCode);\n          span?.end();\n\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          flush(options.flushTimeout)\n            .then(null, e => {\n              DEBUG_BUILD && logger.error(e);\n            })\n            .then(() => {\n              _end.call(this, chunk, encoding, cb);\n            });\n        };\n\n        return handleCallbackErrors(\n          () => fn(req, res),\n          err => {\n            captureException(err, scope => markEventUnhandled(scope));\n          },\n        );\n      },\n    );\n  };\n}\n", "import { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, handleCallbackErrors } from '@sentry/core';\nimport { captureException, flush, getCurrentScope, startSpanManual } from '@sentry/node';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { domainify, markEventUnhandled, proxyFunction } from '../utils';\nimport type { EventFunction, EventFunctionWithCallback, WrapperOptions } from './general';\n\nexport type EventFunctionWrapperOptions = WrapperOptions;\n\n/**\n * Wraps an event function handler adding it error capture and tracing capabilities.\n *\n * @param fn Event handler\n * @param options Options\n * @returns Event handler\n */\nexport function wrapEventFunction(\n  fn: EventFunction | EventFunctionWithCallback,\n  wrapOptions: Partial<EventFunctionWrapperOptions> = {},\n): EventFunctionWithCallback {\n  return proxyFunction(fn, f => domainify(_wrapEventFunction(f, wrapOptions)));\n}\n\n/** */\nfunction _wrapEventFunction<F extends EventFunction | EventFunctionWithCallback>(\n  fn: F,\n  wrapOptions: Partial<EventFunctionWrapperOptions> = {},\n): (...args: Parameters<F>) => ReturnType<F> | Promise<void> {\n  const options: EventFunctionWrapperOptions = {\n    flushTimeout: 2000,\n    ...wrapOptions,\n  };\n  return (...eventFunctionArguments: Parameters<F>): ReturnType<F> | Promise<void> => {\n    const [data, context, callback] = eventFunctionArguments;\n\n    return startSpanManual(\n      {\n        name: context.eventType,\n        op: 'function.gcp.event',\n        origin: 'auto.function.serverless.gcp_event',\n        attributes: { [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component' },\n      },\n      span => {\n        const scope = getCurrentScope();\n        scope.setContext('gcp.function.context', { ...context });\n\n        const newCallback = domainify((...args: unknown[]) => {\n          if (args[0] !== null && args[0] !== undefined) {\n            captureException(args[0], scope => markEventUnhandled(scope));\n          }\n          span?.end();\n\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          flush(options.flushTimeout)\n            .then(null, e => {\n              DEBUG_BUILD && logger.error(e);\n            })\n            .then(() => {\n              if (typeof callback === 'function') {\n                callback(...args);\n              }\n            });\n        });\n\n        if (fn.length > 2) {\n          return handleCallbackErrors(\n            () => (fn as EventFunctionWithCallback)(data, context, newCallback),\n            err => {\n              captureException(err, scope => markEventUnhandled(scope));\n            },\n          );\n        }\n\n        return Promise.resolve()\n          .then(() => (fn as EventFunction)(data, context))\n          .then(\n            result => newCallback(null, result),\n            err => newCallback(err, undefined),\n          );\n      },\n    );\n  };\n}\n", "import { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, handleCallbackErrors } from '@sentry/core';\nimport { captureException, flush, getCurrentScope, startSpanManual } from '@sentry/node';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { domainify, markEventUnhandled, proxyFunction } from '../utils';\nimport type { CloudEventFunction, CloudEventFunctionWithCallback, WrapperOptions } from './general';\n\nexport type CloudEventFunctionWrapperOptions = WrapperOptions;\n\n/**\n * Wraps an event function handler adding it error capture and tracing capabilities.\n *\n * @param fn Event handler\n * @param options Options\n * @returns Event handler\n */\nexport function wrapCloudEventFunction(\n  fn: CloudEventFunction | CloudEventFunctionWithCallback,\n  wrapOptions: Partial<CloudEventFunctionWrapperOptions> = {},\n): CloudEventFunctionWithCallback {\n  return proxyFunction(fn, f => domainify(_wrapCloudEventFunction(f, wrapOptions)));\n}\n\nfunction _wrapCloudEventFunction(\n  fn: CloudEventFunction | CloudEventFunctionWithCallback,\n  wrapOptions: Partial<CloudEventFunctionWrapperOptions> = {},\n): CloudEventFunctionWithCallback {\n  const options: CloudEventFunctionWrapperOptions = {\n    flushTimeout: 2000,\n    ...wrapOptions,\n  };\n  return (context, callback) => {\n    return startSpanManual(\n      {\n        name: context.type || '<unknown>',\n        op: 'function.gcp.cloud_event',\n        origin: 'auto.function.serverless.gcp_cloud_event',\n        attributes: { [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component' },\n      },\n      span => {\n        const scope = getCurrentScope();\n        scope.setContext('gcp.function.context', { ...context });\n\n        const newCallback = domainify((...args: unknown[]) => {\n          if (args[0] !== null && args[0] !== undefined) {\n            captureException(args[0], scope => markEventUnhandled(scope));\n          }\n          span?.end();\n\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          flush(options.flushTimeout)\n            .then(null, e => {\n              DEBUG_BUILD && logger.error(e);\n            })\n            .then(() => {\n              callback(...args);\n            });\n        });\n\n        if (fn.length > 1) {\n          return handleCallbackErrors(\n            () => (fn as CloudEventFunctionWithCallback)(context, newCallback),\n            err => {\n              captureException(err, scope => markEventUnhandled(scope));\n            },\n          );\n        }\n\n        return Promise.resolve()\n          .then(() => (fn as CloudEventFunction)(context))\n          .then(\n            result => newCallback(null, result),\n            err => newCallback(err, undefined),\n          );\n      },\n    );\n  };\n}\n", "import * as Sentry from '@sentry/node';\nimport type { Integration, SdkMetadata } from '@sentry/types';\n\nimport { GoogleCloudGrpc } from '../google-cloud-grpc';\nimport { GoogleCloudHttp } from '../google-cloud-http';\n\nexport * from './http';\nexport * from './events';\nexport * from './cloud_events';\n\nexport const defaultIntegrations: Integration[] = [\n  ...Sentry.defaultIntegrations,\n  new GoogleCloudHttp({ optional: true }), // We mark this integration optional since '@google-cloud/common' module could be missing.\n  new GoogleCloudGrpc({ optional: true }), // We mark this integration optional since 'google-gax' module could be missing.\n];\n\n/**\n * @see {@link Sentry.init}\n */\nexport function init(options: Sentry.NodeOptions = {}): void {\n  const opts = {\n    _metadata: {} as SdkMetadata,\n    defaultIntegrations,\n    ...options,\n  };\n\n  opts._metadata.sdk = opts._metadata.sdk || {\n    name: 'sentry.javascript.serverless',\n    integrations: ['GCPFunction'],\n    packages: [\n      {\n        name: 'npm:@sentry/serverless',\n        version: Sentry.SDK_VERSION,\n      },\n    ],\n    version: Sentry.SDK_VERSION,\n  };\n\n  Sentry.init(opts);\n}\n", "Object.defineProperty(exports, '__esModule', { value: true });\n\nconst awslambda = require('./awslambda.js');\nconst index = require('./gcpfunction/index.js');\nconst awsservices = require('./awsservices.js');\nconst Sentry = require('@sentry/node');\n\n\n\nexports.AWSLambda = awslambda;\nexports.GCPFunction = index;\nexports.AWSServices = awsservices.AWSServices;\nexports.DEFAULT_USER_INCLUDES = Sentry.DEFAULT_USER_INCLUDES;\nexports.Handlers = Sentry.Handlers;\nexports.Hub = Sentry.Hub;\nexports.Integrations = Sentry.Integrations;\nexports.NodeClient = Sentry.NodeClient;\nexports.SDK_VERSION = Sentry.SDK_VERSION;\nexports.Scope = Sentry.Scope;\nexports.addBreadcrumb = Sentry.addBreadcrumb;\nexports.addEventProcessor = Sentry.addEventProcessor;\nexports.addGlobalEventProcessor = Sentry.addGlobalEventProcessor;\nexports.addIntegration = Sentry.addIntegration;\nexports.addRequestDataToEvent = Sentry.addRequestDataToEvent;\nexports.autoDiscoverNodePerformanceMonitoringIntegrations = Sentry.autoDiscoverNodePerformanceMonitoringIntegrations;\nexports.captureCheckIn = Sentry.captureCheckIn;\nexports.captureEvent = Sentry.captureEvent;\nexports.captureException = Sentry.captureException;\nexports.captureMessage = Sentry.captureMessage;\nexports.close = Sentry.close;\nexports.configureScope = Sentry.configureScope;\nexports.continueTrace = Sentry.continueTrace;\nexports.createTransport = Sentry.createTransport;\nexports.deepReadDirSync = Sentry.deepReadDirSync;\nexports.defaultIntegrations = Sentry.defaultIntegrations;\nexports.defaultStackParser = Sentry.defaultStackParser;\nexports.extractRequestData = Sentry.extractRequestData;\nexports.flush = Sentry.flush;\nexports.getActiveSpan = Sentry.getActiveSpan;\nexports.getActiveTransaction = Sentry.getActiveTransaction;\nexports.getClient = Sentry.getClient;\nexports.getCurrentHub = Sentry.getCurrentHub;\nexports.getCurrentScope = Sentry.getCurrentScope;\nexports.getGlobalScope = Sentry.getGlobalScope;\nexports.getHubFromCarrier = Sentry.getHubFromCarrier;\nexports.getIsolationScope = Sentry.getIsolationScope;\nexports.getSentryRelease = Sentry.getSentryRelease;\nexports.init = Sentry.init;\nexports.lastEventId = Sentry.lastEventId;\nexports.makeMain = Sentry.makeMain;\nexports.makeNodeTransport = Sentry.makeNodeTransport;\nexports.setContext = Sentry.setContext;\nexports.setCurrentClient = Sentry.setCurrentClient;\nexports.setExtra = Sentry.setExtra;\nexports.setExtras = Sentry.setExtras;\nexports.setMeasurement = Sentry.setMeasurement;\nexports.setTag = Sentry.setTag;\nexports.setTags = Sentry.setTags;\nexports.setUser = Sentry.setUser;\nexports.startActiveSpan = Sentry.startActiveSpan;\nexports.startInactiveSpan = Sentry.startInactiveSpan;\nexports.startSpan = Sentry.startSpan;\nexports.startSpanManual = Sentry.startSpanManual;\nexports.startTransaction = Sentry.startTransaction;\nexports.withIsolationScope = Sentry.withIsolationScope;\nexports.withMonitor = Sentry.withMonitor;\nexports.withScope = Sentry.withScope;\n//# sourceMappingURL=index.js.map\n", "\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/presentation/decorators/ControllerErrorHandlerDecorator.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/presentation/decorators/ControllerErrorHandlerDecorator.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"5e9b708e-4e39-415e-a8d3-58cf1a744b3e\",e._sentryDebugIdIdentifier=\"sentry-dbid-5e9b708e-4e39-415e-a8d3-58cf1a744b3e\")}catch(e){}}();", "import * as Sentry from '@sentry/serverless';\nimport { HttpRequest } from '../http/request';\nimport { HttpResponse } from '../http/response';\nimport { IHttpController } from '../../application/protocols/http/IHttp';\nimport {\n  HttpConflictError,\n  HttpError,\n  HttpInternalServerError,\n  HttpNotFoundError,\n  HttpUnauthorizedError,\n  HttpUnprocessableEntityError,\n} from '../http/errors';\nimport { ILogger } from '../../application/protocols/logger/ILogger';\n\nexport class ControllerErrorHandlerDecorator {\n  constructor(\n    private logger: ILogger,\n    private readonly controller: IHttpController,\n  ) {\n    this.logger = this.logger.getChild('ControllerErrorHandlerDecorator');\n  }\n\n  public async handle(request: HttpRequest): Promise<HttpResponse | HttpError> {\n    try {\n      return await this.controller.handle(request);\n    } catch (error: any) {\n      if (\n        [\n          'USER_NOT_CONFIRMED',\n          'NotAuthorizedException',\n          'NotAuthorizedException: Invalid Refresh Token',\n          'USER_NOT_AUTHORIZED',\n          'ADMIN_USER_NOT_AUTHORIZED',\n        ].includes(error.message)\n      ) {\n        return new HttpUnauthorizedError(error.message);\n      }\n\n      if (error.message === 'NotAuthorizedException: Invalid Refresh Token') {\n        return new HttpUnauthorizedError('Invalid Refresh Token');\n      }\n\n      if (['USER_NOT_FOUND', 'ADMIN_USER_NOT_FOUND'].includes(error.message)) {\n        return new HttpNotFoundError(error.message);\n      }\n\n      if (['USER_ALREADY_EXISTS'].includes(error.message)) {\n        return new HttpConflictError(error.message);\n      }\n\n      if (\n        ['SIGNUP_ALREADY_VALIDATED', 'USER_WITHOUT_PHOTO'].includes(\n          error.message,\n        )\n      ) {\n        return new HttpUnprocessableEntityError(error.message);\n      }\n      this.logger.error('Internal Server Error', error);\n      Sentry.captureException(error);\n      return new HttpInternalServerError(error as Error);\n    }\n  }\n}\n", "/* eslint-disable max-classes-per-file */\n\nexport class HttpError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly data: any,\n    public readonly stack?: string,\n    public readonly statusCode = 500,\n  ) {\n    super(message);\n    this.name = 'HttpError';\n    Object.setPrototypeOf(this, HttpError.prototype);\n    Error.captureStackTrace(this, HttpError);\n  }\n}\n\nexport class HttpBadRequestError extends HttpError {\n  constructor(\n    public readonly data: Array<string>,\n    public readonly name = 'HttpBadRequestError',\n    public readonly stack?: string,\n    public readonly message = 'BAD_REQUEST',\n    public readonly statusCode = 400,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpBadRequestError.prototype);\n    Error.captureStackTrace(this, HttpBadRequestError);\n  }\n}\n\nexport class HttpConflictError extends HttpError {\n  constructor(\n    public readonly data: any,\n    public readonly stack?: string,\n    public readonly name = 'HttpConflictError',\n    public readonly message = 'CONFLICT',\n    public readonly statusCode = 409,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpConflictError.prototype);\n    Error.captureStackTrace(this, HttpConflictError);\n  }\n}\n\nexport class HttpForbiddenError extends HttpError {\n  constructor(\n    public readonly data = 'Authenticated user is not authorized',\n    public readonly stack?: string,\n    public readonly name = 'HttpForbiddenError',\n    public readonly message = 'FORBIDDEN',\n    public readonly statusCode = 403,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpForbiddenError.prototype);\n    Error.captureStackTrace(this, HttpForbiddenError);\n  }\n}\n\nexport class HttpNotFoundError extends HttpError {\n  constructor(\n    public readonly data: any,\n    public readonly stack?: string,\n    public readonly name = 'HttpNotFoundError',\n    public readonly message = 'NOT_FOUND',\n    public readonly statusCode = 404,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpNotFoundError.prototype);\n    Error.captureStackTrace(this, HttpNotFoundError);\n  }\n}\n\nexport class HttpInternalServerError extends HttpError {\n  constructor(\n    public readonly data: Error,\n    public readonly stack?: string,\n    public readonly name = 'HttpInternalServerError',\n    public readonly message = 'INTERNAL_SERVER_ERROR',\n    public readonly statusCode = 500,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpInternalServerError.prototype);\n    Error.captureStackTrace(this, HttpInternalServerError);\n  }\n}\n\nexport class HttpUnauthorizedError extends HttpError {\n  constructor(\n    public readonly data = 'User must be authenticated',\n    public readonly stack?: string,\n    public readonly name = 'HttpUnauthorizedError',\n    public readonly message = 'UNAUTHORIZED',\n    public readonly statusCode = 401,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpUnauthorizedError.prototype);\n    Error.captureStackTrace(this, HttpUnauthorizedError);\n  }\n}\n\nexport class HttpUnprocessableEntityError extends HttpError {\n  constructor(\n    public readonly data: string,\n    public readonly stack?: string,\n    public readonly name = 'HttpUnprocessableEntityError',\n    public readonly message = 'UNPROCESSABLE_ENTITY',\n    public readonly statusCode = 422,\n  ) {\n    super(message, data, stack, statusCode);\n    Object.setPrototypeOf(this, HttpUnprocessableEntityError.prototype);\n    Error.captureStackTrace(this, HttpUnprocessableEntityError);\n  }\n}\n"],
  "mappings": "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",
  "names": ["objectToString", "isError", "wat", "isInstanceOf", "isBuiltin", "className", "isErrorEvent", "isDOMError", "isDOMException", "isString", "isParameterizedString", "isPrimitive", "isPlainObject", "isEvent", "isElement", "isRegExp", "isThenable", "isSyntheticEvent", "isNaN", "base", "isVueViewModel", "truncate", "str", "max", "snipLine", "line", "colno", "newLine", "lineLength", "start", "end", "safeJoin", "input", "delimiter", "output", "i", "value", "isVueViewModel", "isMatchingPattern", "pattern", "requireExactStringMatch", "isString", "isRegExp", "stringMatchesSomePattern", "testString", "patterns", "applyAggregateErrorsToEvent", "exceptionFromErrorImplementation", "parser", "maxValueLimit", "key", "limit", "event", "hint", "isInstanceOf", "originalException", "truncateAggregateExceptions", "aggregateExceptionsFromError", "error", "prevExceptions", "exception", "exceptionId", "newExceptions", "applyExceptionGroupFieldsForParentException", "newException", "newExceptionId", "applyExceptionGroupFieldsForChildException", "childError", "i", "source", "parentId", "exceptions", "maxValueLength", "truncate", "isGlobalObj", "obj", "GLOBAL_OBJ", "getGlobalObject", "getGlobalSingleton", "name", "creator", "gbl", "__SENTRY__", "WINDOW", "getGlobalObject", "DEFAULT_MAX_STRING_LENGTH", "htmlTreeAsString", "elem", "options", "currentElem", "MAX_TRAVERSE_HEIGHT", "out", "height", "len", "separator", "sepLength", "nextStr", "keyAttrs", "maxStringLength", "_htmlElementAsString", "el", "className", "classes", "key", "attr", "i", "keyAttrPairs", "keyAttr", "keyAttrPair", "isString", "allowedAttrs", "getLocationHref", "getDomElement", "selector", "getComponentName", "DEBUG_BUILD", "PREFIX", "CONSOLE_LEVELS", "originalConsoleMethods", "consoleSandbox", "callback", "GLOBAL_OBJ", "console", "wrappedFuncs", "wrappedLevels", "level", "originalConsoleMethod", "makeLogger", "enabled", "logger", "DEBUG_BUILD", "name", "args", "DSN_REGEX", "isValidProtocol", "protocol", "dsnToString", "dsn", "withPassword", "host", "path", "pass", "port", "projectId", "publicKey", "dsnFromString", "str", "match", "consoleSandbox", "lastPath", "split", "projectMatch", "dsnFromComponents", "components", "validateDsn", "DEBUG_BUILD", "component", "logger", "makeDsn", "from", "SentryError", "message", "logLevel", "fill", "source", "name", "replacementFactory", "original", "wrapped", "markFunctionWrapped", "addNonEnumerableProperty", "obj", "value", "DEBUG_BUILD", "logger", "proto", "getOriginalFunction", "func", "urlEncode", "object", "key", "convertToPlainObject", "isError", "getOwnProperties", "isEvent", "newObj", "serializeEventTarget", "isInstanceOf", "target", "isElement", "htmlTreeAsString", "extractedProps", "property", "extractExceptionKeysForMessage", "exception", "maxLength", "keys", "truncate", "includedKeys", "serialized", "dropUndefinedKeys", "inputValue", "_dropUndefinedKeys", "memoizationMap", "isPojo", "memoVal", "returnValue", "item", "input", "isPlainObject", "objectify", "wat", "objectified", "isPrimitive", "filenameIsInApp", "filename", "isNative", "node", "getModule", "FILENAME_MATCH", "FULL_MATCH", "line", "lineMatch", "object", "method", "functionName", "typeName", "methodName", "methodStart", "objectEnd", "STACKTRACE_FRAME_LIMIT", "WEBPACK_ERROR_REGEXP", "STRIP_FRAME_REGEXP", "createStackParser", "parsers", "sortedParsers", "a", "b", "p", "stack", "skipFirst", "frames", "lines", "i", "line", "cleanedLine", "parser", "frame", "stripSentryFramesAndReverse", "stackParserFromStackParserOptions", "stackParser", "localStack", "defaultFunctionName", "getFunctionName", "fn", "nodeStackLineParser", "getModule", "node", "handlers", "instrumented", "addHandler", "type", "handler", "resetInstrumentationHandlers", "key", "maybeInstrument", "instrumentFn", "triggerHandlers", "data", "typeHandlers", "e", "DEBUG_BUILD", "logger", "getFunctionName", "addConsoleInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentConsole", "GLOBAL_OBJ", "CONSOLE_LEVELS", "level", "fill", "originalConsoleMethod", "originalConsoleMethods", "args", "handlerData", "triggerHandlers", "log", "uuid4", "gbl", "GLOBAL_OBJ", "crypto", "getRandomByte", "typedArray", "c", "getFirstException", "event", "getEventDescription", "message", "eventId", "firstException", "addExceptionTypeValue", "value", "type", "exception", "values", "addExceptionMechanism", "newMechanism", "defaultMechanism", "currentMechanism", "mergedData", "SEMVER_REGEXP", "parseSemver", "input", "match", "major", "minor", "patch", "addContextToFrame", "lines", "frame", "linesOfContext", "maxLines", "sourceLine", "line", "snipLine", "checkOrSetAlreadyCaught", "addNonEnumerableProperty", "arrayify", "maybeArray", "WINDOW", "GLOBAL_OBJ", "DEBOUNCE_DURATION", "debounceTimerID", "lastCapturedEventType", "lastCapturedEventTargetId", "addClickKeypressInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentDOM", "triggerDOMHandler", "triggerHandlers", "globalDOMEventHandler", "makeDOMEventHandler", "target", "proto", "fill", "originalAddEventListener", "listener", "options", "el", "handlers", "handlerForType", "originalRemoveEventListener", "isSimilarToLastCapturedEvent", "event", "shouldSkipDOMEvent", "eventType", "globalListener", "getEventTarget", "addNonEnumerableProperty", "uuid4", "name", "WINDOW", "getGlobalObject", "supportsErrorEvent", "supportsDOMError", "supportsDOMException", "supportsFetch", "isNativeFetch", "func", "supportsNativeFetch", "result", "doc", "sandbox", "err", "DEBUG_BUILD", "logger", "supportsReportingObserver", "supportsReferrerPolicy", "addFetchInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentFetch", "supportsNativeFetch", "fill", "GLOBAL_OBJ", "originalFetch", "args", "method", "url", "parseFetchArgs", "handlerData", "triggerHandlers", "response", "finishedHandlerData", "error", "erroredHandlerData", "hasProp", "obj", "prop", "getUrlFromResource", "resource", "fetchArgs", "options", "arg", "_oldOnErrorHandler", "addGlobalErrorInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentError", "GLOBAL_OBJ", "msg", "url", "line", "column", "error", "handlerData", "triggerHandlers", "_oldOnUnhandledRejectionHandler", "addGlobalUnhandledRejectionInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentUnhandledRejection", "GLOBAL_OBJ", "e", "handlerData", "triggerHandlers", "WINDOW", "getGlobalObject", "supportsHistory", "chrome", "isChromePackagedApp", "hasHistoryApi", "WINDOW", "GLOBAL_OBJ", "lastHref", "addHistoryInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentHistory", "supportsHistory", "oldOnPopState", "args", "to", "from", "handlerData", "triggerHandlers", "historyReplacementFunction", "originalHistoryFunction", "url", "fill", "WINDOW", "GLOBAL_OBJ", "SENTRY_XHR_DATA_KEY", "addXhrInstrumentationHandler", "handler", "type", "addHandler", "maybeInstrument", "instrumentXHR", "xhrproto", "fill", "originalOpen", "args", "startTimestamp", "method", "isString", "url", "parseUrl", "onreadystatechangeHandler", "xhrInfo", "handlerData", "triggerHandlers", "original", "readyStateArgs", "setRequestHeaderArgs", "header", "value", "originalSend", "sentryXhrData", "addInstrumentationHandler", "type", "callback", "addConsoleInstrumentationHandler", "addClickKeypressInstrumentationHandler", "addXhrInstrumentationHandler", "addFetchInstrumentationHandler", "addHistoryInstrumentationHandler", "addGlobalErrorInstrumentationHandler", "addGlobalUnhandledRejectionInstrumentationHandler", "DEBUG_BUILD", "logger", "isBrowserBundle", "getSDKSource", "isNodeEnv", "isBrowserBundle", "dynamicRequire", "mod", "request", "loadModule", "moduleName", "module", "cwd", "isBrowser", "isNodeEnv", "isElectronNodeRenderer", "GLOBAL_OBJ", "memoBuilder", "hasWeakSet", "inner", "memoize", "obj", "i", "unmemoize", "normalize", "input", "depth", "maxProperties", "visit", "err", "normalizeToSize", "object", "maxSize", "normalized", "jsonSize", "key", "value", "memo", "memoBuilder", "memoize", "unmemoize", "isNaN", "stringified", "stringifyValue", "remainingDepth", "valueWithToJSON", "jsonValue", "numAdded", "visitable", "convertToPlainObject", "visitKey", "visitValue", "isVueViewModel", "isSyntheticEvent", "getFunctionName", "objName", "getConstructorName", "prototype", "utf8Length", "normalizeUrlToBase", "url", "basePath", "escapedBase", "newUrl", "normalizeArray", "parts", "allowAboveRoot", "up", "i", "last", "splitPathRe", "splitPath", "filename", "truncated", "resolve", "args", "resolvedPath", "resolvedAbsolute", "path", "p", "trim", "arr", "start", "end", "relative", "from", "to", "fromParts", "toParts", "length", "samePartsLength", "outputParts", "normalizePath", "isPathAbsolute", "isAbsolute", "trailingSlash", "normalizedPath", "join", "dirname", "result", "root", "dir", "basename", "ext", "f", "States", "RESOLVED", "REJECTED", "resolvedSyncPromise", "value", "SyncPromise", "resolve", "rejectedSyncPromise", "reason", "_", "reject", "_SyncPromise", "executor", "e", "onfulfilled", "onrejected", "result", "val", "onfinally", "isRejected", "state", "isThenable", "cachedHandlers", "handler", "makePromiseBuffer", "limit", "buffer", "isReady", "remove", "task", "add", "taskProducer", "rejectedSyncPromise", "SentryError", "drain", "timeout", "SyncPromise", "resolve", "reject", "counter", "capturedSetTimeout", "item", "resolvedSyncPromise", "parseCookie", "str", "obj", "index", "eqIdx", "endIdx", "key", "val", "parseUrl", "url", "match", "query", "fragment", "stripUrlQueryAndFragment", "urlPath", "getNumberOfUrlSegments", "s", "getSanitizedUrlString", "protocol", "host", "path", "filteredHost", "DEFAULT_INCLUDES", "DEFAULT_REQUEST_INCLUDES", "DEFAULT_USER_INCLUDES", "addRequestDataToTransaction", "transaction", "req", "deps", "name", "source", "extractPathForTransaction", "extractQueryParams", "options", "method", "path", "stripUrlQueryAndFragment", "extractTransaction", "type", "customRoute", "extractUserData", "user", "keys", "extractedUser", "key", "extractRequestData", "include", "requestData", "headers", "host", "protocol", "originalUrl", "absoluteUrl", "parseCookie", "isString", "normalize", "addRequestDataToEvent", "event", "extractedRequestData", "isPlainObject", "ip", "winterCGHeadersToDict", "winterCGHeaders", "value", "DEBUG_BUILD", "logger", "winterCGRequestToRequestData", "validSeverityLevels", "severityFromString", "level", "severityLevelFromString", "ONE_SECOND_IN_MS", "dateTimestampInSeconds", "createUnixTimestampInSecondsFunc", "performance", "GLOBAL_OBJ", "approxStartingTimeOrigin", "timeOrigin", "timestampInSeconds", "timestampWithMs", "_browserPerformanceTimeOriginMode", "browserPerformanceTimeOrigin", "threshold", "performanceNow", "dateNow", "timeOriginDelta", "timeOriginIsReliable", "navigationStart", "navigationStartDelta", "navigationStartIsReliable", "BAGGAGE_HEADER_NAME", "SENTRY_BAGGAGE_KEY_PREFIX", "SENTRY_BAGGAGE_KEY_PREFIX_REGEX", "MAX_BAGGAGE_STRING_LENGTH", "baggageHeaderToDynamicSamplingContext", "baggageHeader", "isString", "baggageObject", "acc", "curr", "currBaggageObject", "baggageHeaderToObject", "key", "dynamicSamplingContext", "value", "nonPrefixedKey", "dynamicSamplingContextToSentryBaggageHeader", "sentryPrefixedDSC", "dscKey", "dscValue", "objectToBaggageHeader", "baggageEntry", "keyOrValue", "object", "objectKey", "objectValue", "currentIndex", "newBaggageHeader", "DEBUG_BUILD", "logger", "TRACEPARENT_REGEXP", "extractTraceparentData", "traceparent", "matches", "parentSampled", "tracingContextFromHeaders", "sentryTrace", "baggage", "traceparentData", "dynamicSamplingContext", "baggageHeaderToDynamicSamplingContext", "traceId", "parentSpanId", "propagationContext", "uuid4", "generateSentryTraceHeader", "spanId", "sampled", "sampledString", "createEnvelope", "headers", "items", "addItemToEnvelope", "envelope", "newItem", "forEachEnvelopeItem", "callback", "envelopeItems", "envelopeItem", "envelopeItemType", "envelopeContainsItemType", "types", "_", "type", "encodeUTF8", "input", "textEncoder", "serializeEnvelope", "envHeaders", "parts", "append", "next", "item", "itemHeaders", "payload", "stringifiedPayload", "normalize", "concatBuffers", "buffers", "totalLength", "acc", "buf", "merged", "offset", "buffer", "parseEnvelope", "env", "textDecoder", "readBinary", "length", "bin", "readJson", "i", "envelopeHeader", "itemHeader", "binaryLength", "createAttachmentEnvelopeItem", "attachment", "dropUndefinedKeys", "ITEM_TYPE_TO_DATA_CATEGORY_MAP", "envelopeItemTypeToDataCategory", "getSdkMetadataForEnvelopeHeader", "metadataOrEvent", "name", "version", "createEventEnvelopeHeaders", "event", "sdkInfo", "tunnel", "dsn", "dynamicSamplingContext", "dsnToString", "createClientReportEnvelope", "discarded_events", "dsn", "timestamp", "clientReportItem", "dateTimestampInSeconds", "createEnvelope", "DEFAULT_RETRY_AFTER", "parseRetryAfterHeader", "header", "now", "headerDelay", "headerDate", "disabledUntil", "limits", "category", "isRateLimited", "updateRateLimits", "statusCode", "headers", "updatedRateLimits", "rateLimitHeader", "retryAfterHeader", "limit", "retryAfter", "categories", "delay", "setNestedKey", "obj", "keyPath", "value", "match", "innerObj", "addOrUpdateIntegration", "defaultIntegrationInstance", "userIntegrations", "forcedOptions", "addOrUpdateIntegrationInArray", "addOrUpdateIntegrationInFunction", "userInstance", "integration", "userIntegrationsFunc", "defaultIntegrations", "userFinalIntegrations", "makeFifoCache", "size", "evictionOrder", "cache", "key", "value", "evictCandidate", "parseStackFrames", "stackParser", "error", "exceptionFromError", "exception", "frames", "getMessageForObject", "message", "extractExceptionKeysForMessage", "eventFromUnknownInput", "getHubOrClient", "hint", "client", "ex", "mechanism", "extras", "isError", "isPlainObject", "normalizeDepth", "normalizeToSize", "event", "addExceptionTypeValue", "addExceptionMechanism", "eventFromMessage", "level", "attachStacktrace", "isParameterizedString", "__sentry_template_string__", "__sentry_template_values__", "parameterize", "strings", "values", "formatted", "watchdogTimer", "createTimer", "pollInterval", "anrThreshold", "callback", "timer", "triggered", "enabled", "diffMs", "state", "callFrameToStackFrame", "frame", "url", "getModuleFromFilename", "filename", "colno", "lineno", "dropUndefinedKeys", "filenameIsInApp", "LRUMap", "_maxSize", "key", "value", "values", "_nullishCoalesce", "lhs", "rhsFn", "_asyncNullishCoalesce", "lhs", "rhsFn", "_nullishCoalesce", "_asyncOptionalChain", "ops", "lastAccessLHS", "value", "i", "op", "fn", "args", "_asyncOptionalChainDelete", "ops", "result", "_asyncOptionalChain", "_optionalChain", "ops", "lastAccessLHS", "value", "i", "op", "fn", "args", "_optionalChainDelete", "ops", "result", "_optionalChain", "escapeStringForRegex", "regexString", "require_cjs", "__commonJSMin", "exports", "aggregateErrors", "browser", "dsn", "error", "worldwide", "index", "is", "isBrowser", "logger", "memo", "misc", "node", "normalize", "object", "path", "promisebuffer", "requestdata", "severity", "stacktrace", "string", "supports", "syncpromise", "time", "tracing", "env", "envelope", "clientreport", "ratelimit", "baggage", "url", "userIntegrations", "cache", "eventbuilder", "parameterize", "anr", "lru", "_asyncNullishCoalesce", "_asyncOptionalChain", "_asyncOptionalChainDelete", "_nullishCoalesce", "_optionalChain", "_optionalChainDelete", "console", "dom", "xhr", "fetch", "history", "globalError", "globalUnhandledRejection", "_handlers", "nodeStackTrace", "escapeStringForRegex", "supportsHistory", "DEBUG_BUILD", "DEFAULT_ENVIRONMENT", "getGlobalEventProcessors", "getGlobalSingleton", "addGlobalEventProcessor", "callback", "notifyEventProcessors", "processors", "event", "hint", "index", "SyncPromise", "resolve", "reject", "processor", "result", "DEBUG_BUILD", "logger", "isThenable", "final", "makeSession", "context", "startingTime", "timestampInSeconds", "session", "uuid4", "sessionToJSON", "updateSession", "duration", "closeSession", "status", "dropUndefinedKeys", "TRACE_FLAG_NONE", "TRACE_FLAG_SAMPLED", "spanToTraceContext", "span", "span_id", "trace_id", "data", "op", "parent_span_id", "status", "tags", "origin", "spanToJSON", "dropUndefinedKeys", "spanToTraceHeader", "traceId", "spanId", "sampled", "spanIsSampled", "generateSentryTraceHeader", "spanTimeInputToSeconds", "input", "ensureTimestampInSeconds", "timestampInSeconds", "timestamp", "spanIsSpanClass", "traceFlags", "prepareEvent", "options", "event", "hint", "scope", "client", "isolationScope", "normalizeDepth", "normalizeMaxBreadth", "prepared", "uuid4", "dateTimestampInSeconds", "integrations", "i", "applyClientOptions", "applyIntegrationsMetadata", "applyDebugIds", "finalScope", "getFinalScope", "addExceptionMechanism", "clientEventProcessors", "data", "getGlobalScope", "isolationData", "mergeScopeData", "finalScopeData", "attachments", "applyScopeDataToEvent", "eventProcessors", "getGlobalEventProcessors", "notifyEventProcessors", "evt", "applyDebugMeta", "normalizeEvent", "environment", "release", "dist", "maxValueLength", "DEFAULT_ENVIRONMENT", "truncate", "exception", "request", "debugIdStackParserCache", "stackParser", "debugIdMap", "GLOBAL_OBJ", "debugIdStackFramesCache", "cachedDebugIdStackFrameCache", "filenameDebugIdMap", "acc", "debugIdStackTrace", "parsedStack", "cachedParsedStack", "stackFrame", "frame", "images", "filename", "integrationNames", "depth", "maxBreadth", "normalized", "b", "normalize", "span", "spanToJSON", "captureContext", "Scope", "parseEventHintOrCaptureContext", "hintIsScopeOrFunction", "hintIsScopeContext", "captureContextKeys", "key", "captureException", "exception", "hint", "getCurrentHub", "parseEventHintOrCaptureContext", "captureMessage", "message", "captureContext", "level", "context", "captureEvent", "event", "configureScope", "callback", "addBreadcrumb", "breadcrumb", "setContext", "name", "setExtras", "extras", "setExtra", "key", "extra", "setTags", "tags", "setTag", "value", "setUser", "user", "withScope", "rest", "hub", "scope", "withIsolationScope", "runWithAsyncContext", "getIsolationScope", "withActiveSpan", "span", "startTransaction", "customSamplingContext", "captureCheckIn", "checkIn", "upsertMonitorConfig", "getCurrentScope", "client", "getClient", "DEBUG_BUILD", "logger", "uuid4", "withMonitor", "monitorSlug", "checkInId", "now", "timestampInSeconds", "finishCheckIn", "status", "maybePromiseResult", "e", "isThenable", "flush", "timeout", "close", "lastEventId", "startSession", "isolationScope", "currentScope", "release", "environment", "DEFAULT_ENVIRONMENT", "userAgent", "GLOBAL_OBJ", "session", "makeSession", "currentSession", "updateSession", "endSession", "closeSession", "_sendSessionUpdate", "captureSession", "end", "getRootSpan", "span", "getDynamicSamplingContextFromClient", "trace_id", "client", "scope", "options", "public_key", "user_segment", "dsc", "dropUndefinedKeys", "DEFAULT_ENVIRONMENT", "getDynamicSamplingContextFromSpan", "span", "getClient", "spanToJSON", "getCurrentScope", "txn", "getRootSpan", "v7FrozenDsc", "maybeSampleRate", "source", "jsonSpan", "spanIsSampled", "applyScopeDataToEvent", "event", "data", "fingerprint", "span", "breadcrumbs", "sdkProcessingMetadata", "propagationContext", "applyDataToEvent", "applySpanToEvent", "applyFingerprintToEvent", "applyBreadcrumbsToEvent", "applySdkMetadataToEvent", "mergeScopeData", "mergeData", "extra", "tags", "user", "contexts", "level", "eventProcessors", "attachments", "transactionName", "mergeAndOverwriteScopeData", "prop", "mergeVal", "key", "cleanedExtra", "dropUndefinedKeys", "cleanedTags", "cleanedUser", "cleanedContexts", "mergedBreadcrumbs", "spanToTraceContext", "rootSpan", "getRootSpan", "getDynamicSamplingContextFromSpan", "spanToJSON", "arrayify", "DEFAULT_MAX_BREADCRUMBS", "globalScope", "Scope", "_Scope", "generatePropagationContext", "scope", "newScope", "client", "callback", "user", "updateSession", "requestSession", "tags", "key", "value", "extras", "extra", "fingerprint", "level", "name", "context", "span", "session", "captureContext", "updatedScope", "isPlainObject", "breadcrumb", "maxBreadcrumbs", "maxCrumbs", "mergedBreadcrumb", "dateTimestampInSeconds", "breadcrumbs", "attachment", "_breadcrumbs", "_attachments", "_contexts", "_tags", "_extra", "_user", "_level", "_fingerprint", "_eventProcessors", "_propagationContext", "_sdkProcessingMetadata", "_transactionName", "_span", "event", "hint", "additionalEventProcessors", "applyScopeDataToEvent", "eventProcessors", "getGlobalEventProcessors", "notifyEventProcessors", "newData", "exception", "eventId", "uuid4", "logger", "syntheticException", "message", "getGlobalScope", "setGlobalScope", "SDK_VERSION", "API_VERSION", "SDK_VERSION", "DEFAULT_BREADCRUMBS", "Hub", "client", "scope", "isolationScope", "_version", "assignedScope", "Scope", "assignedIsolationScope", "version", "top", "callback", "maybePromiseResult", "e", "isThenable", "res", "exception", "hint", "eventId", "uuid4", "syntheticException", "message", "level", "event", "breadcrumb", "beforeBreadcrumb", "maxBreadcrumbs", "mergedBreadcrumb", "dateTimestampInSeconds", "finalBreadcrumb", "consoleSandbox", "user", "tags", "extras", "key", "value", "extra", "name", "context", "oldHub", "makeMain", "integration", "DEBUG_BUILD", "logger", "customSamplingContext", "result", "endSession", "session", "closeSession", "release", "environment", "DEFAULT_ENVIRONMENT", "userAgent", "GLOBAL_OBJ", "makeSession", "currentSession", "updateSession", "options", "method", "args", "sentry", "getMainCarrier", "hub", "registry", "getHubFromCarrier", "setHubOnCarrier", "getCurrentHub", "getGlobalHub", "getIsolationScope", "hasHubOnCarrier", "ensureHubOnCarrier", "carrier", "parent", "setAsyncContextStrategy", "strategy", "runWithAsyncContext", "getGlobalSingleton", "__SENTRY__", "getActiveTransaction", "maybeHub", "getCurrentHub", "extractTraceparentData", "_extractTraceparentData", "errorsInstrumented", "registerErrorInstrumentation", "addGlobalErrorInstrumentationHandler", "errorCallback", "addGlobalUnhandledRejectionInstrumentationHandler", "activeTransaction", "getActiveTransaction", "status", "DEBUG_BUILD", "logger", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE", "SEMANTIC_ATTRIBUTE_SENTRY_OP", "SpanRecorder", "maxlen", "span", "Span", "_Span", "spanContext", "uuid4", "timestampInSeconds", "SEMANTIC_ATTRIBUTE_SENTRY_OP", "name", "description", "traceId", "spanId", "sampled", "attributes", "startTime", "endTime", "status", "op", "TRACE_FLAG_SAMPLED", "TRACE_FLAG_NONE", "childSpan", "rootSpan", "getRootSpan", "DEBUG_BUILD", "opStr", "nameStr", "spanToJSON", "idStr", "logMessage", "logger", "key", "value", "httpStatus", "spanStatus", "spanStatusfromHttpCode", "endTimestamp", "spanTimeInputToSeconds", "spanToTraceHeader", "dropUndefinedKeys", "spanToTraceContext", "data", "hasData", "hasAttributes", "Transaction", "SpanClass", "transactionContext", "hub", "getCurrentHub", "incomingDynamicSamplingContext", "newName", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE", "metadata", "name", "source", "maxlen", "SpanRecorder", "key", "context", "value", "unit", "newMetadata", "endTimestamp", "timestampInS", "spanTimeInputToSeconds", "transaction", "spanContext", "dropUndefinedKeys", "getDynamicSamplingContextFromSpan", "DEBUG_BUILD", "logger", "client", "finishedSpans", "span", "spanToJSON", "endTimes", "prev", "current", "spanToTraceContext", "TRACING_DEFAULTS", "FINISH_REASON_TAG", "IDLE_TRANSACTION_FINISH_REASONS", "IdleTransactionSpanRecorder", "SpanRecorder", "_pushActivity", "_popActivity", "transactionSpanId", "maxlen", "span", "originalEnd", "rest", "spanToJSON", "IdleTransaction", "Transaction", "transactionContext", "_idleHub", "_idleTimeout", "_finalTimeout", "_heartbeatInterval", "_onScope", "delayAutoFinishUntilSignal", "DEBUG_BUILD", "logger", "endTimestamp", "endTimestampInS", "spanTimeInputToSeconds", "callback", "startTime", "endTime", "spanStartedBeforeTransactionFinish", "timeoutWithMarginOfError", "spanEndedBeforeFinalTimeout", "stringifiedSpan", "scope", "pushActivity", "id", "popActivity", "restartOnChildSpanChange", "reason", "spanId", "timestampInSeconds", "heartbeatString", "hasTracingEnabled", "maybeOptions", "client", "getClient", "options", "sampleTransaction", "transaction", "options", "samplingContext", "hasTracingEnabled", "SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE", "sampleRate", "isValidSampleRate", "DEBUG_BUILD", "logger", "spanToJSON", "rate", "isNaN", "traceHeaders", "span", "spanToTraceHeader", "_startTransaction", "transactionContext", "customSamplingContext", "client", "options", "configInstrumenter", "transactionInstrumenter", "DEBUG_BUILD", "logger", "transaction", "Transaction", "sampleTransaction", "startIdleTransaction", "hub", "idleTimeout", "finalTimeout", "onScope", "heartbeatInterval", "delayAutoFinishUntilSignal", "IdleTransaction", "addTracingExtensions", "carrier", "getMainCarrier", "registerErrorInstrumentation", "SpanStatus", "Ok", "DeadlineExceeded", "Unauthenticated", "PermissionDenied", "NotFound", "ResourceExhausted", "InvalidArgument", "Unimplemented", "Unavailable", "InternalError", "UnknownError", "Cancelled", "AlreadyExists", "FailedPrecondition", "Aborted", "OutOfRange", "DataLoss", "handleCallbackErrors", "fn", "onError", "onFinally", "maybePromiseResult", "e", "maybeHandlePromiseRejection", "value", "isThenable", "res", "trace", "context", "callback", "onError", "afterFinish", "hub", "getCurrentHub", "scope", "getCurrentScope", "parentSpan", "ctx", "normalizeContext", "activeSpan", "createChildSpanOrTransaction", "handleCallbackErrors", "error", "startSpan", "withScope", "status", "spanToJSON", "startActiveSpan", "startSpanManual", "finishAndSetSpan", "startInactiveSpan", "hasTracingEnabled", "getActiveSpan", "continueTrace", "sentryTrace", "baggage", "currentScope", "traceparentData", "dynamicSamplingContext", "propagationContext", "tracingContextFromHeaders", "DEBUG_BUILD", "logger", "transactionContext", "dropUndefinedKeys", "spanTimeInputToSeconds", "setMeasurement", "name", "value", "unit", "transaction", "getActiveTransaction", "enhanceEventWithSdkInfo", "event", "sdkInfo", "createSessionEnvelope", "session", "dsn", "metadata", "tunnel", "getSdkMetadataForEnvelopeHeader", "envelopeHeaders", "dsnToString", "envelopeItem", "createEnvelope", "createEventEnvelope", "eventType", "createEventEnvelopeHeaders", "eventItem", "SessionFlusher", "client", "attrs", "sessionAggregates", "aggregates", "key", "dropUndefinedKeys", "scope", "getCurrentScope", "requestSession", "status", "date", "sessionStartedTrunc", "aggregationCounts", "SENTRY_API_VERSION", "getBaseApiEndpoint", "dsn", "protocol", "port", "_getIngestEndpoint", "_encodedAuth", "sdkInfo", "urlEncode", "getEnvelopeEndpointWithUrlEncodedAuth", "tunnelOrOptions", "tunnel", "getReportDialogEndpoint", "dsnLike", "dialogOptions", "makeDsn", "endpoint", "encodedOptions", "dsnToString", "key", "user", "installedIntegrations", "filterDuplicates", "integrations", "integrationsByName", "currentInstance", "name", "existingInstance", "k", "getIntegrationsToSetup", "options", "defaultIntegrations", "userIntegrations", "integration", "arrayify", "finalIntegrations", "debugIndex", "findIndex", "debugInstance", "setupIntegrations", "client", "integrationIndex", "setupIntegration", "DEBUG_BUILD", "logger", "addGlobalEventProcessor", "getCurrentHub", "callback", "event", "hint", "processor", "addIntegration", "getClient", "arr", "i", "convertIntegrationFnToClass", "fn", "args", "defineIntegration", "COUNTER_METRIC_TYPE", "GAUGE_METRIC_TYPE", "SET_METRIC_TYPE", "DISTRIBUTION_METRIC_TYPE", "NAME_AND_TAG_KEY_NORMALIZATION_REGEX", "TAG_VALUE_NORMALIZATION_REGEX", "DEFAULT_BROWSER_FLUSH_INTERVAL", "DEFAULT_FLUSH_INTERVAL", "MAX_WEIGHT", "getBucketKey", "metricType", "name", "unit", "tags", "stringifiedTags", "dropUndefinedKeys", "a", "b", "simpleHash", "s", "rv", "i", "c", "serializeMetricBuckets", "metricBucketItems", "out", "item", "tagEntries", "maybeTags", "key", "value", "sanitizeTags", "unsanitizedTags", "sanitizedKey", "NAME_AND_TAG_KEY_NORMALIZATION_REGEX", "TAG_VALUE_NORMALIZATION_REGEX", "createMetricEnvelope", "metricBucketItems", "dsn", "metadata", "tunnel", "headers", "dsnToString", "item", "createMetricEnvelopeItem", "createEnvelope", "payload", "serializeMetricBuckets", "ALREADY_SEEN_ERROR", "BaseClient", "options", "makeDsn", "DEBUG_BUILD", "logger", "url", "getEnvelopeEndpointWithUrlEncodedAuth", "exception", "hint", "scope", "checkOrSetAlreadyCaught", "eventId", "event", "result", "message", "level", "eventMessage", "isParameterizedString", "promisedEvent", "isPrimitive", "session", "updateSession", "timeout", "transport", "clientFinished", "transportFlushed", "resolvedSyncPromise", "eventProcessor", "forceInitialize", "integrationId", "integrationName", "integration", "setupIntegration", "env", "createEventEnvelope", "attachment", "addItemToEnvelope", "createAttachmentEnvelopeItem", "promise", "sendResponse", "createSessionEnvelope", "reason", "category", "_event", "key", "metricBucketItems", "metricsEnvelope", "createMetricEnvelope", "hook", "callback", "rest", "setupIntegrations", "crashed", "errored", "exceptions", "ex", "mechanism", "sessionNonTerminal", "SyncPromise", "resolve", "ticked", "tick", "interval", "isolationScope", "getIsolationScope", "integrations", "prepareEvent", "evt", "propagationContext", "trace_id", "spanId", "parentSpanId", "dsc", "dynamicSamplingContext", "getDynamicSamplingContextFromClient", "finalEvent", "sentryError", "sampleRate", "isTransaction", "isTransactionEvent", "isError", "isErrorEvent", "eventType", "beforeSendLabel", "rejectedSyncPromise", "SentryError", "dataCategory", "prepared", "processBeforeSend", "_validateBeforeSendResult", "processedEvent", "transactionInfo", "source", "value", "envelope", "outcomes", "beforeSendResult", "invalidValueError", "isThenable", "isPlainObject", "e", "beforeSend", "beforeSendTransaction", "addEventProcessor", "client", "getClient", "createCheckInEnvelope", "checkIn", "dynamicSamplingContext", "metadata", "tunnel", "dsn", "headers", "dsnToString", "dropUndefinedKeys", "item", "createCheckInEnvelopeItem", "createEnvelope", "CounterMetric", "_value", "value", "GaugeMetric", "DistributionMetric", "first", "SetMetric", "val", "simpleHash", "METRIC_MAP", "COUNTER_METRIC_TYPE", "GAUGE_METRIC_TYPE", "DISTRIBUTION_METRIC_TYPE", "SET_METRIC_TYPE", "MetricsAggregator", "_client", "DEFAULT_FLUSH_INTERVAL", "metricType", "unsanitizedName", "value", "unit", "unsanitizedTags", "maybeFloatTimestamp", "timestampInSeconds", "timestamp", "name", "NAME_AND_TAG_KEY_NORMALIZATION_REGEX", "tags", "sanitizeTags", "bucketKey", "getBucketKey", "bucketItem", "METRIC_MAP", "MAX_WEIGHT", "cutoffSeconds", "flushedBuckets", "key", "bucket", "buckets", "ServerRuntimeClient", "BaseClient", "options", "addTracingExtensions", "MetricsAggregator", "exception", "hint", "resolvedSyncPromise", "eventFromUnknownInput", "getClient", "message", "level", "eventFromMessage", "scope", "requestSession", "event", "timeout", "release", "environment", "SessionFlusher", "DEBUG_BUILD", "logger", "checkIn", "monitorConfig", "id", "uuid4", "tunnel", "serializedCheckIn", "dynamicSamplingContext", "traceContext", "envelope", "createCheckInEnvelope", "isolationScope", "span", "getRootSpan", "getDynamicSamplingContextFromSpan", "spanToTraceContext", "traceId", "spanId", "parentSpanId", "dsc", "getDynamicSamplingContextFromClient", "initAndBind", "clientClass", "options", "DEBUG_BUILD", "logger", "consoleSandbox", "getCurrentScope", "client", "setCurrentClient", "initializeClient", "top", "getCurrentHub", "DEFAULT_TRANSPORT_BUFFER_SIZE", "createTransport", "options", "makeRequest", "buffer", "makePromiseBuffer", "rateLimits", "flush", "timeout", "send", "envelope", "filteredEnvelopeItems", "forEachEnvelopeItem", "item", "type", "envelopeItemDataCategory", "envelopeItemTypeToDataCategory", "isRateLimited", "event", "getEventForEnvelopeItem", "resolvedSyncPromise", "filteredEnvelope", "createEnvelope", "recordEnvelopeLoss", "reason", "requestTask", "serializeEnvelope", "response", "DEBUG_BUILD", "logger", "updateRateLimits", "error", "result", "SentryError", "MIN_DELAY", "START_DELAY", "MAX_DELAY", "log", "msg", "error", "DEBUG_BUILD", "logger", "makeOfflineTransport", "createTransport", "options", "transport", "store", "retryDelay", "flushTimer", "shouldQueue", "env", "envelopeContainsItemType", "flushIn", "delay", "found", "send", "e", "flushWithBackOff", "envelope", "result", "parseRetryAfterHeader", "t", "eventFromEnvelope", "env", "types", "event", "forEachEnvelopeItem", "item", "type", "makeOverrideReleaseTransport", "createTransport", "release", "options", "transport", "envelope", "timeout", "makeMultiplexedTransport", "matcher", "fallbackTransport", "otherTransports", "getTransport", "dsn", "key", "validatedDsn", "dsnFromString", "url", "getEnvelopeEndpointWithUrlEncodedAuth", "send", "getEvent", "eventTypes", "transports", "result", "t", "flush", "allTransports", "r", "isSentryRequestUrl", "url", "hubOrClient", "client", "isHub", "dsn", "tunnel", "checkDsn", "checkTunnel", "removeTrailingSlash", "str", "filenameMetadataMap", "parsedStacks", "ensureMetadataStacksAreParsed", "parser", "GLOBAL_OBJ", "stack", "metadata", "frames", "frame", "getMetadataForUrl", "filename", "addMetadataToStackFrames", "event", "exception", "stripMetadataFromStackFrames", "INTEGRATION_NAME", "_moduleMetadataIntegration", "client", "envelope", "forEachEnvelopeItem", "item", "type", "event", "stripMetadataFromStackFrames", "_hint", "stackParser", "addMetadataToStackFrames", "moduleMetadataIntegration", "defineIntegration", "ModuleMetadata", "convertIntegrationFnToClass", "DEFAULT_OPTIONS", "INTEGRATION_NAME", "_requestDataIntegration", "options", "_addRequestData", "addRequestDataToEvent", "_options", "event", "_hint", "client", "transactionNamingScheme", "sdkProcessingMetadata", "req", "addRequestDataOptions", "convertReqDataIntegrationOptsToAddReqDataOpts", "processedEvent", "transaction", "name", "spanToJSON", "shouldIncludeMethodInTransactionName", "getSDKName", "transactionValue", "extractPathForTransaction", "requestDataIntegration", "defineIntegration", "RequestData", "convertIntegrationFnToClass", "integrationOptions", "ip", "user", "requestOptions", "requestIncludeKeys", "key", "value", "addReqDataUserOpt", "userIncludeKeys", "DEFAULT_IGNORE_ERRORS", "DEFAULT_IGNORE_TRANSACTIONS", "INTEGRATION_NAME", "_inboundFiltersIntegration", "options", "event", "_hint", "client", "clientOptions", "mergedOptions", "_mergeOptions", "_shouldDropEvent", "inboundFiltersIntegration", "defineIntegration", "InboundFilters", "convertIntegrationFnToClass", "internalOptions", "_isSentryError", "DEBUG_BUILD", "logger", "getEventDescription", "_isIgnoredError", "_isIgnoredTransaction", "_isDeniedUrl", "_getEventFilterUrl", "_isAllowedUrl", "ignoreErrors", "_getPossibleEventMessages", "message", "stringMatchesSomePattern", "ignoreTransactions", "name", "denyUrls", "url", "allowUrls", "possibleMessages", "lastException", "_getLastValidUrl", "frames", "i", "frame", "originalFunctionToString", "INTEGRATION_NAME", "_functionToStringIntegration", "args", "context", "getOriginalFunction", "functionToStringIntegration", "defineIntegration", "FunctionToString", "convertIntegrationFnToClass", "DEFAULT_KEY", "DEFAULT_LIMIT", "INTEGRATION_NAME", "_linkedErrorsIntegration", "options", "limit", "key", "event", "hint", "client", "applyAggregateErrorsToEvent", "exceptionFromError", "linkedErrorsIntegration", "defineIntegration", "LinkedErrors", "convertIntegrationFnToClass", "BrowserMetricsAggregator", "_client", "DEFAULT_BROWSER_FLUSH_INTERVAL", "metricType", "unsanitizedName", "value", "unit", "unsanitizedTags", "maybeFloatTimestamp", "timestampInSeconds", "timestamp", "name", "NAME_AND_TAG_KEY_NORMALIZATION_REGEX", "tags", "sanitizeTags", "bucketKey", "getBucketKey", "bucketItem", "METRIC_MAP", "metricBuckets", "INTEGRATION_NAME", "_metricsAggregatorIntegration", "client", "BrowserMetricsAggregator", "metricsAggregatorIntegration", "defineIntegration", "MetricsAggregator", "convertIntegrationFnToClass", "addToMetricsAggregator", "metricType", "name", "value", "data", "client", "getClient", "scope", "getCurrentScope", "DEBUG_BUILD", "logger", "unit", "tags", "timestamp", "release", "environment", "transaction", "metricTags", "spanToJSON", "increment", "COUNTER_METRIC_TYPE", "distribution", "DISTRIBUTION_METRIC_TYPE", "set", "SET_METRIC_TYPE", "gauge", "GAUGE_METRIC_TYPE", "metrics", "MetricsAggregator", "metricsAggregatorIntegration", "Integrations", "INTEGRATIONS", "DEBUG_BUILD", "shouldDisableAutoInstrumentation", "getCurrentHub", "clientOptions", "_optionalChain", "_", "_2", "_3", "_4", "_5", "_6", "Express", "_Express", "options", "_", "getCurrentHub", "DEBUG_BUILD", "logger", "shouldDisableAutoInstrumentation", "instrumentMiddlewares", "instrumentRouter", "wrap", "fn", "method", "arity", "req", "res", "transaction", "span", "next", "_optionalChain", "_2", "_3", "args", "_4", "_5", "err", "_6", "_7", "_8", "_9", "wrapMiddlewareArgs", "arg", "a", "patchMiddleware", "router", "originalCallback", "methods", "appOrRouter", "isApp", "routerProto", "originalProcessParams", "layer", "called", "done", "layerRoutePath", "isRegex", "isArray", "numExtraSegments", "getLayerRoutePathInfo", "partialRoute", "preventDuplicateSegments", "finalPartialRoute", "segment", "urlLength", "getNumberOfUrlSegments", "stripUrlQueryAndFragment", "routeLength", "attributes", "spanToJSON", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "finalRoute", "name", "source", "extractPathForTransaction", "extractOriginalRoute", "path", "regexp", "keys", "_10", "_11", "orderedKeys", "b", "execResult", "paramIndices", "resultPath", "indexShift", "item", "index", "startOffset", "endOffset", "substr1", "replacement", "substr2", "lrp", "_12", "_13", "isRegExp", "major", "GLOBAL_OBJ", "getNumberOfArrayUrlSegments", "getLayerRoutePathString", "routesArray", "accNumSegments", "currentRoute", "r", "originalUrl", "reconstructedRoute", "layerPath", "normalizeURL", "originalUrlSplit", "_14", "_15", "_16", "_17", "v", "tempCounter", "currentOffset", "_18", "_19", "_20", "_21", "_22", "_23", "_24", "_25", "_26", "_27", "_28", "_29", "Postgres", "_Postgres", "options", "loadModule", "_", "getCurrentHub", "shouldDisableAutoInstrumentation", "DEBUG_BUILD", "logger", "pkg", "Client", "_optionalChain", "_2", "_3", "fill", "orig", "config", "values", "callback", "parentSpan", "data", "span", "_4", "_5", "err", "result", "_6", "_7", "_8", "_9", "rv", "isThenable", "res", "_10", "_11", "_12", "_13", "Mysql", "_Mysql", "loadModule", "_", "getCurrentHub", "shouldDisableAutoInstrumentation", "DEBUG_BUILD", "logger", "pkg", "mySqlConfig", "wrappingTarget", "thisArg", "args", "spanDataFromConfig", "finishSpan", "span", "data", "key", "fill", "orig", "options", "values", "callback", "parentSpan", "_optionalChain", "_2", "_3", "err", "result", "fields", "query", "OPERATIONS", "OPERATION_SIGNATURES", "isCursor", "maybeCursor", "Mongo", "_Mongo", "options", "moduleName", "loadModule", "_", "getCurrentHub", "shouldDisableAutoInstrumentation", "DEBUG_BUILD", "logger", "pkg", "collection", "operations", "operation", "getSpanContext", "fill", "orig", "args", "lastArg", "hub", "scope", "client", "parentSpan", "sendDefaultPii", "_optionalChain", "_2", "_3", "_4", "span", "_5", "_6", "maybePromiseOrCursor", "isThenable", "res", "_7", "_8", "cursor", "_9", "_10", "_11", "_12", "_13", "_14", "_15", "_16", "err", "result", "_17", "_18", "data", "spanContext", "signature", "shouldDescribe", "map", "reduce", "i", "isValidPrismaClient", "possibleClient", "Prisma", "_Prisma", "options", "addNonEnumerableProperty", "clientData", "engineConfig", "activeProvider", "clientVersion", "params", "next", "shouldDisableAutoInstrumentation", "getCurrentHub", "action", "model", "startSpan", "DEBUG_BUILD", "logger", "GraphQL", "_GraphQL", "loadModule", "_", "getCurrentHub", "shouldDisableAutoInstrumentation", "DEBUG_BUILD", "logger", "pkg", "fill", "orig", "args", "scope", "parentSpan", "span", "_optionalChain", "_2", "_3", "_4", "_5", "rv", "isThenable", "res", "_6", "_7", "_8", "_9", "_10", "_11", "_12", "_13", "Apollo", "_Apollo", "options", "loadModule", "_", "getCurrentHub", "shouldDisableAutoInstrumentation", "DEBUG_BUILD", "logger", "pkg", "fill", "orig", "args", "resolvers", "arrayify", "instrumentResolvers", "model", "resolverGroupName", "resolverName", "wrapResolver", "parentSpan", "span", "_optionalChain", "_2", "_3", "rv", "isThenable", "res", "_4", "_5", "_6", "_7", "lazyLoadedNodePerformanceMonitoringIntegrations", "integration", "dynamicRequire", "module", "WINDOW", "GLOBAL_OBJ", "registerBackgroundTabDetection", "WINDOW", "activeTransaction", "getActiveTransaction", "statusType", "op", "status", "spanToJSON", "DEBUG_BUILD", "logger", "bindReporter", "callback", "metric", "reportAllChanges", "prevValue", "delta", "forceReport", "generateUniqueID", "getNavigationEntryFromPerformanceTiming", "timing", "WINDOW", "type", "navigationEntry", "key", "getNavigationEntry", "getActivationStart", "navEntry", "getNavigationEntry", "initMetric", "name", "value", "navEntry", "getNavigationEntry", "navigationType", "WINDOW", "getActivationStart", "generateUniqueID", "observe", "type", "callback", "opts", "po", "list", "onHidden", "cb", "once", "onHiddenOrPageHide", "event", "WINDOW", "onCLS", "onReport", "metric", "initMetric", "report", "sessionValue", "sessionEntries", "handleEntries", "entries", "entry", "firstSessionEntry", "lastSessionEntry", "po", "observe", "bindReporter", "stopListening", "onHidden", "firstHiddenTime", "initHiddenTime", "WINDOW", "trackChanges", "onHidden", "timeStamp", "getVisibilityWatcher", "onFID", "onReport", "visibilityWatcher", "getVisibilityWatcher", "metric", "initMetric", "report", "handleEntry", "entry", "handleEntries", "entries", "po", "observe", "bindReporter", "onHidden", "reportedMetricIDs", "onLCP", "onReport", "visibilityWatcher", "getVisibilityWatcher", "metric", "initMetric", "report", "handleEntries", "entries", "lastEntry", "value", "getActivationStart", "po", "observe", "bindReporter", "stopListening", "type", "onHidden", "handlers", "instrumented", "_previousCls", "_previousFid", "_previousLcp", "addClsInstrumentationHandler", "callback", "addMetricObserver", "instrumentCls", "addLcpInstrumentationHandler", "instrumentLcp", "addFidInstrumentationHandler", "instrumentFid", "addPerformanceInstrumentationHandler", "type", "addHandler", "instrumentPerformanceObserver", "getCleanupCallback", "triggerHandlers", "data", "typeHandlers", "handler", "e", "DEBUG_BUILD", "logger", "getFunctionName", "onCLS", "metric", "onFID", "onLCP", "instrumentFn", "previousValue", "options", "observe", "entries", "index", "isMeasurementValue", "value", "_startChild", "transaction", "startTimestamp", "ctx", "MAX_INT_AS_BYTES", "msToSec", "time", "getBrowserPerformanceAPI", "WINDOW", "_performanceCursor", "_measurements", "_lcpEntry", "_clsEntry", "startTrackingWebVitals", "performance", "browserPerformanceTimeOrigin", "fidCallback", "_trackFID", "clsCallback", "_trackCLS", "lcpCallback", "_trackLCP", "startTrackingLongTasks", "addPerformanceInstrumentationHandler", "entries", "entry", "transaction", "getActiveTransaction", "startTime", "duration", "startTrackingInteractions", "span", "htmlTreeAsString", "componentName", "getComponentName", "addClsInstrumentationHandler", "metric", "DEBUG_BUILD", "logger", "addLcpInstrumentationHandler", "addFidInstrumentationHandler", "timeOrigin", "addPerformanceEntries", "performanceEntries", "responseStartTimestamp", "requestStartTimestamp", "op", "transactionStartTime", "spanToJSON", "_addNavigationSpans", "_addMeasureSpans", "firstHidden", "getVisibilityWatcher", "shouldRecord", "_addResourceSpans", "_trackNavigator", "name", "oldValue", "measurementTimestamp", "normalizedValue", "delta", "fidMark", "_startChild", "measurementName", "setMeasurement", "_tagMetricInfo", "measureStartTimestamp", "measureEndTimestamp", "event", "_addPerformanceNavigationTiming", "_addRequest", "description", "eventEnd", "end", "start", "resourceUrl", "parsedUrl", "parseUrl", "data", "setResourceEntrySizeData", "startTimestamp", "endTimestamp", "navigator", "connection", "isMeasurementValue", "source", "index", "key", "dataKey", "entryVal", "instrumentFetchRequest", "handlerData", "shouldCreateSpan", "shouldAttachHeaders", "spans", "spanOrigin", "hasTracingEnabled", "shouldCreateSpanResult", "spanId", "span", "contentLength", "contentLengthNum", "scope", "getCurrentScope", "client", "getClient", "parentSpan", "getActiveSpan", "method", "url", "request", "options", "addTracingHeadersToFetchRequest", "requestSpan", "transaction", "getRootSpan", "traceId", "sampled", "dsc", "sentryTraceHeader", "spanToTraceHeader", "generateSentryTraceHeader", "dynamicSamplingContext", "getDynamicSamplingContextFromSpan", "getDynamicSamplingContextFromClient", "sentryBaggageHeader", "dynamicSamplingContextToSentryBaggageHeader", "headers", "isInstanceOf", "newHeaders", "BAGGAGE_HEADER_NAME", "existingBaggageHeader", "newBaggageHeaders", "DEFAULT_TRACE_PROPAGATION_TARGETS", "defaultRequestInstrumentationOptions", "instrumentOutgoingRequests", "_options", "traceFetch", "traceXHR", "tracePropagationTargets", "tracingOrigins", "shouldCreateSpanForRequest", "enableHTTPTimings", "shouldCreateSpan", "_", "shouldAttachHeadersWithTargets", "url", "shouldAttachHeaders", "spans", "addFetchInstrumentationHandler", "handlerData", "createdSpan", "instrumentFetchRequest", "addHTTPTimings", "addXhrInstrumentationHandler", "xhrCallback", "isPerformanceResourceTiming", "entry", "span", "spanToJSON", "cleanup", "addPerformanceInstrumentationHandler", "entries", "resourceTimingEntryToSpanData", "data", "extractNetworkProtocol", "nextHopProtocol", "name", "version", "_name", "char", "getAbsoluteTime", "time", "browserPerformanceTimeOrigin", "resourceTiming", "timingSpanData", "stringMatchesSomePattern", "xhr", "sentryXhrData", "SENTRY_XHR_DATA_KEY", "hasTracingEnabled", "shouldCreateSpanResult", "spanId", "scope", "getCurrentScope", "parentSpan", "getActiveSpan", "transaction", "getRootSpan", "dynamicSamplingContext", "getDynamicSamplingContextFromSpan", "sentryBaggageHeader", "dynamicSamplingContextToSentryBaggageHeader", "setHeaderOnXhr", "spanToTraceHeader", "client", "getClient", "traceId", "sampled", "dsc", "sentryTraceHeader", "generateSentryTraceHeader", "getDynamicSamplingContextFromClient", "BAGGAGE_HEADER_NAME", "instrumentRoutingWithDefaults", "customStartTransaction", "startTransactionOnPageLoad", "startTransactionOnLocationChange", "WINDOW", "DEBUG_BUILD", "logger", "startingUrl", "activeTransaction", "browserPerformanceTimeOrigin", "addHistoryInstrumentationHandler", "to", "from", "BROWSER_TRACING_INTEGRATION_ID", "DEFAULT_BROWSER_TRACING_OPTIONS", "TRACING_DEFAULTS", "instrumentRoutingWithDefaults", "defaultRequestInstrumentationOptions", "BrowserTracing", "_options", "addTracingExtensions", "DEBUG_BUILD", "startTrackingWebVitals", "startTrackingLongTasks", "startTrackingInteractions", "_", "getCurrentHub", "client", "clientOptions", "instrumentRouting", "startTransactionOnLocationChange", "startTransactionOnPageLoad", "markBackgroundTransactions", "traceFetch", "traceXHR", "shouldCreateSpanForRequest", "enableHTTPTimings", "_experiments", "clientOptionsTracePropagationTargets", "tracePropagationTargets", "logger", "context", "transaction", "registerBackgroundTabDetection", "instrumentOutgoingRequests", "hub", "beforeNavigate", "idleTimeout", "finalTimeout", "heartbeatInterval", "isPageloadTransaction", "sentryTrace", "getMetaContent", "baggage", "traceparentData", "dynamicSamplingContext", "propagationContext", "tracingContextFromHeaders", "expandedContext", "modifiedContext", "finalContext", "sourceFromData", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "sourceFromMetadata", "location", "WINDOW", "idleTransaction", "startIdleTransaction", "scope", "spanIsSampled", "addPerformanceEntries", "inflightInteractionTransaction", "registerInteractionTransaction", "op", "currentTransaction", "getActiveTransaction", "type", "metaName", "metaTag", "getDomElement", "_autoloadDatabaseIntegrations", "carrier", "getMainCarrier", "packageToIntegrationMapping", "integration", "dynamicRequire", "module", "mappedPackages", "moduleName", "loadModule", "pkg", "p", "addExtensionMethods", "addTracingExtensions", "isNodeEnv", "require_cjs", "__commonJSMin", "exports", "core", "utils", "express", "postgres", "mysql", "mongo", "prisma", "graphql", "apollo", "lazy", "browsertracing", "request", "instrument", "fetch", "extensions", "autoDiscoverNodePerformanceMonitoringIntegrations", "loadedIntegrations", "lazyLoadedNodePerformanceMonitoringIntegrations", "tryLoad", "integration", "logger", "NodeClient", "ServerRuntimeClient", "options", "SDK_VERSION", "TextEncoder", "clientOptions", "os", "INTERNAL", "Agent", "http", "opts", "options", "stack", "l", "req", "cb", "connectOpts", "socket", "_nullishCoalesce", "v", "debug", "args", "logger", "parseProxyResponse", "socket", "resolve", "reject", "buffersLength", "buffers", "read", "b", "ondata", "cleanup", "onend", "onerror", "err", "buffered", "endOfHeaders", "headerParts", "firstLine", "firstLineParts", "statusCode", "statusText", "headers", "header", "firstColon", "key", "value", "current", "debug", "args", "logger", "HttpsProxyAgent", "Agent", "proxy", "opts", "URL", "_nullishCoalesce", "_optionalChain", "_2", "host", "port", "omit", "req", "socket", "servername", "tls", "net", "headers", "payload", "auth", "name", "proxyResponsePromise", "parseProxyResponse", "connect", "buffered", "resume", "fakeSocket", "s", "assert", "obj", "keys", "ret", "key", "GZIP_THRESHOLD", "streamFromBody", "body", "Readable", "makeNodeTransport", "options", "urlSegments", "URL", "consoleSandbox", "createTransport", "isHttps", "proxy", "applyNoProxyOption", "nativeHttpModule", "https", "http", "keepAlive", "agent", "HttpsProxyAgent", "requestExecutor", "createRequestExecutor", "_nullishCoalesce", "transportUrlSegments", "no_proxy", "exemption", "httpModule", "hostname", "pathname", "port", "protocol", "search", "request", "resolve", "reject", "headers", "createGzip", "req", "res", "retryAfterHeader", "rateLimitsHeader", "NODE_VERSION", "parseSemver", "getActiveDomain", "domain", "getCurrentHub", "activeDomain", "ensureHubOnCarrier", "getHubFromCarrier", "createNewHub", "parent", "carrier", "runWithAsyncContext", "callback", "options", "_optionalChain", "_", "local", "parentHub", "newHub", "setHubOnCarrier", "setDomainAsyncContextStrategy", "setAsyncContextStrategy", "asyncStorage", "setHooksAsyncContextStrategy", "async_hooks", "getCurrentHub", "createNewHub", "parent", "carrier", "ensureHubOnCarrier", "getHubFromCarrier", "runWithAsyncContext", "callback", "options", "existingHub", "_optionalChain", "_", "newHub", "setAsyncContextStrategy", "setNodeAsyncContextStrategy", "NODE_VERSION", "setHooksAsyncContextStrategy", "setDomainAsyncContextStrategy", "INTEGRATION_NAME", "consoleIntegration", "client", "addConsoleInstrumentationHandler", "args", "level", "getClient", "addBreadcrumb", "severityLevelFromString", "util", "Console", "convertIntegrationFnToClass", "DEBUG_BUILD", "extractRawUrl", "requestOptions", "protocol", "hostname", "port", "parseRequestOptions", "path", "extractUrl", "authority", "redactAuthority", "auth", "user", "password", "cleanSpanDescription", "description", "request", "method", "requestUrl", "_optionalChain", "_", "_2", "_3", "_4", "urlToOptions", "url", "options", "normalizeRequestArgs", "httpModule", "requestArgs", "callback", "URL", "parsed", "NODE_VERSION", "_5", "_6", "_7", "_8", "_9", "_10", "_11", "_12", "Http", "_Http", "options", "_addGlobalEventProcessor", "setupOnceGetCurrentHub", "clientOptions", "_optionalChain", "_", "_2", "_3", "_4", "_5", "DEBUG_BUILD", "logger", "shouldCreateSpanForRequest", "_6", "_7", "_8", "tracePropagationTargets", "_9", "_10", "_11", "httpModule", "wrappedHttpHandlerMaker", "_createWrappedRequestMethodFactory", "fill", "NODE_VERSION", "httpsModule", "wrappedHttpsHandlerMaker", "breadcrumbsEnabled", "createSpanUrlMap", "LRUMap", "headersUrlMap", "shouldCreateSpan", "url", "cachedDecision", "decision", "shouldAttachTraceData", "stringMatchesSomePattern", "addRequestBreadcrumb", "event", "requestSpanData", "req", "res", "getCurrentHub", "addBreadcrumb", "originalRequestMethod", "args", "requestArgs", "normalizeRequestArgs", "requestOptions", "rawRequestUrl", "extractRawUrl", "requestUrl", "extractUrl", "isSentryRequestUrl", "getClient", "scope", "getCurrentScope", "parentSpan", "getActiveSpan", "data", "getRequestSpanData", "requestSpan", "_12", "_13", "sentryTraceHeader", "spanToTraceHeader", "dynamicSamplingContext", "getDynamicSamplingContextFromSpan", "addHeadersToRequestOptions", "client", "traceId", "sampled", "dsc", "generateSentryTraceHeader", "getDynamicSamplingContextFromClient", "cleanSpanDescription", "spanToJSON", "sentryBaggage", "dynamicSamplingContextToSentryBaggageHeader", "sentryBaggageHeader", "normalizeBaggageHeader", "method", "DEFAULT_SHUTDOWN_TIMEOUT", "logAndExitProcess", "error", "consoleSandbox", "client", "getClient", "DEBUG_BUILD", "logger", "options", "timeout", "result", "INTEGRATION_NAME", "onUncaughtExceptionIntegration", "options", "_options", "client", "makeErrorHandler", "OnUncaughtException", "convertIntegrationFnToClass", "caughtFirstError", "caughtSecondError", "calledFatalError", "firstError", "clientOptions", "error", "onFatalError", "logAndExitProcess", "processWouldExit", "acc", "listener", "shouldApplyFatalHandlingLogic", "DEBUG_BUILD", "logger", "getClient", "captureException", "INTEGRATION_NAME", "onUnhandledRejectionIntegration", "options", "mode", "client", "makeUnhandledPromiseHandler", "OnUnhandledRejection", "convertIntegrationFnToClass", "reason", "promise", "getClient", "captureException", "handleRejection", "rejectionWarning", "consoleSandbox", "logAndExitProcess", "moduleCache", "INTEGRATION_NAME", "getPaths", "collectModules", "mainPaths", "paths", "infos", "seen", "path", "dir", "updir", "orig", "dirname", "pkgfile", "join", "existsSync", "info", "readFileSync", "_getModules", "modulesIntegration", "event", "Modules", "convertIntegrationFnToClass", "FILE_CONTENT_CACHE", "LRUMap", "DEFAULT_LINES_OF_CONTEXT", "INTEGRATION_NAME", "readTextFileAsync", "path", "resolve", "reject", "readFile", "err", "data", "contextLinesIntegration", "options", "contextLines", "event", "addSourceContext", "ContextLines", "convertIntegrationFnToClass", "enqueuedReadSourceFileTasks", "readSourceFileTasks", "_optionalChain", "_2", "_3", "exception", "_4", "_5", "i", "frame", "_readSourceFile", "_6", "_7", "addSourceContextToFrames", "frames", "sourceFileLines", "addContextToFrame", "filename", "cachedFile", "content", "readFileAsync", "promisify", "readFile", "readDirAsync", "readdir", "INTEGRATION_NAME", "nodeContextIntegration", "options", "cachedContext", "_options", "addContext", "event", "_getContexts", "updatedContext", "_updateContext", "_optionalChain", "_", "_2", "_3", "_4", "_5", "_6", "_7", "_8", "_9", "_10", "contexts", "getOsContext", "getAppContext", "getDeviceContext", "culture", "getCultureContext", "getCloudResourceContext", "Context", "convertIntegrationFnToClass", "_11", "_12", "_13", "_14", "os", "platformId", "getDarwinInfo", "getLinuxInfo", "PLATFORM_NAMES", "january", "app_memory", "deviceOpt", "device", "uptime", "cpuInfo", "firstCpu", "LINUX_DISTROS", "LINUX_VERSIONS", "content", "matchFirst", "regex", "text", "match", "darwinInfo", "output", "resolve", "reject", "execFile", "error", "stdout", "getLinuxDistroId", "name", "linuxInfo", "etcFiles", "distroFile", "file", "distroPath", "join", "contents", "distros", "d", "id", "createRateLimiter", "maxPerSecond", "enable", "disable", "count", "retrySeconds", "disabledTimeout", "isAnonymous", "name", "functionNamesMatch", "a", "b", "hashFrames", "frames", "acc", "frame", "hashFromStack", "stackParser", "stack", "createCallbackList", "complete", "callbacks", "completedCalled", "checkedComplete", "result", "add", "fn", "next", "popped", "AsyncSession", "Session", "onPause", "captureAll", "event", "objectId", "props", "prop", "_optionalChain", "_2", "_3", "_4", "_5", "id", "vars", "_6", "_7", "_8", "_9", "_10", "_11", "_12", "_13", "err", "params", "name", "v", "a", "b", "_14", "_15", "_16", "_17", "obj", "key", "val", "_18", "_19", "_20", "_21", "_22", "_23", "tryNewAsyncSession", "INTEGRATION_NAME", "localVariablesSyncIntegration", "options", "session", "cachedFrames", "LRUMap", "rateLimiter", "shouldProcessEvent", "handlePaused", "stackParser", "reason", "data", "callFrames", "_24", "exceptionHash", "hashFromStack", "_25", "frames", "i", "scopeChain", "functionName", "localScope", "scope", "_26", "_27", "_28", "_29", "addLocalVariablesToException", "exception", "hash", "hashFrames", "_30", "_31", "cachedFrame", "frameCount", "_32", "_33", "_34", "frameIndex", "_35", "_36", "_37", "functionNamesMatch", "addLocalVariablesToEvent", "_38", "_39", "client", "clientOptions", "NODE_VERSION", "logger", "ev", "max", "createRateLimiter", "_40", "_41", "seconds", "_42", "_43", "LocalVariablesSync", "convertIntegrationFnToClass", "LocalVariables", "LocalVariablesSync", "ChannelName", "RequestCreate", "RequestEnd", "RequestError", "Undici", "_Undici", "LRUMap", "_options", "_addGlobalEventProcessor", "NODE_VERSION", "ds", "dynamicRequire", "module", "url", "cachedDecision", "decision", "message", "_optionalChain", "getClient", "_10", "_11", "_12", "request", "stringUrl", "client", "isSentryRequestUrl", "clientOptions", "scope", "getCurrentScope", "parentSpan", "getActiveSpan", "span", "createRequestSpan", "stringMatchesSomePattern", "dynamicSamplingContext", "getDynamicSamplingContextFromSpan", "sentryBaggageHeader", "dynamicSamplingContextToSentryBaggageHeader", "setHeadersOnRequest", "spanToTraceHeader", "traceId", "sampled", "dsc", "sentryTrace", "generateSentryTraceHeader", "getDynamicSamplingContextFromClient", "_13", "_14", "_15", "response", "addBreadcrumb", "_16", "_17", "_18", "headerLine", "activeSpan", "parseUrl", "method", "data", "_19", "_20", "getSanitizedUrlString", "INTEGRATION_NAME", "spotlightIntegration", "options", "_options", "client", "logger", "connectToSpotlight", "Spotlight", "convertIntegrationFnToClass", "spotlightUrl", "parseSidecarUrl", "failedRequests", "envelope", "serializedEnvelope", "serializeEnvelope", "req", "http", "res", "url", "URL", "require_worker_script", "__commonJSMin", "exports", "DEFAULT_INTERVAL", "DEFAULT_HANG_THRESHOLD", "log", "message", "args", "logger", "getWorkerThreads", "dynamicRequire", "module", "getContexts", "client", "event", "eventHint", "processor", "_optionalChain", "_2", "INTEGRATION_NAME", "anrIntegration", "options", "NODE_VERSION", "_startWorker", "Anr", "convertIntegrationFnToClass", "_options", "contexts", "dsn", "_optionalChainDelete", "_3", "_4", "_5", "_6", "initOptions", "sdkMetadata", "i", "inspector", "Worker", "worker", "URL", "base64WorkerScript", "timer", "currentSession", "getCurrentScope", "session", "msg", "err", "code", "isResponseObject", "response", "isBoomObject", "isErrorEvent", "event", "sendErrorToSentry", "errorData", "captureException", "hapiErrorPlugin", "SDK_VERSION", "serverArg", "request", "transaction", "getActiveTransaction", "hapiTracingPlugin", "server", "h", "continueTrace", "transactionContext", "startTransaction", "getCurrentScope", "spanToTraceHeader", "dynamicSamplingContext", "dynamicSamplingContextToSentryBaggageHeader", "getDynamicSamplingContextFromSpan", "INTEGRATION_NAME", "hapiIntegration", "options", "fill", "originalStart", "Hapi", "convertIntegrationFnToClass", "normalizeWindowsPath", "path", "createGetModuleFromFilename", "basePath", "dirname", "isWindows", "sep", "normalizedBase", "filename", "normalizedFilename", "dir", "file", "ext", "posix", "n", "moduleName", "defaultIntegrations", "InboundFilters", "FunctionToString", "LinkedErrors", "Console", "Http", "Undici", "OnUncaughtException", "OnUnhandledRejection", "ContextLines", "LocalVariables", "Context", "Modules", "RequestData", "init", "options", "carrier", "getMainCarrier", "setNodeAsyncContextStrategy", "autoloadedIntegrations", "_optionalChain", "_", "_2", "sentryTracesSampleRate", "tracesSampleRate", "detectedRelease", "getSentryRelease", "clientOptions", "stackParserFromStackParserOptions", "defaultStackParser", "getIntegrationsToSetup", "makeNodeTransport", "initAndBind", "NodeClient", "startSessionTracking", "updateScopeFromEnvVariables", "client", "getClient", "integrations", "integration", "Spotlight", "isAutoSessionTrackingEnabled", "fallback", "GLOBAL_OBJ", "createStackParser", "nodeStackLineParser", "createGetModuleFromFilename", "startSession", "session", "getIsolationScope", "endSession", "sentryUseEnvironment", "sentryTraceEnv", "baggageEnv", "propagationContext", "tracingContextFromHeaders", "getCurrentScope", "deepReadDirSync", "targetDir", "targetDirAbsPath", "path", "fs", "deepReadCurrentDir", "currentDirAbsPath", "absPaths", "itemName", "itemAbsPath", "absPath", "enableAnrDetection", "options", "client", "getClient", "Anr", "extractRequestData", "req", "keys", "_extractRequestData", "parseRequest", "event", "options", "addRequestDataToEvent", "tracingHandler", "req", "res", "next", "options", "_optionalChain", "getClient", "_", "_2", "_3", "_4", "_5", "_6", "_7", "_8", "_9", "sentryTrace", "isString", "baggage", "_10", "_11", "hasTracingEnabled", "name", "source", "extractPathForTransaction", "transaction", "continueTrace", "ctx", "startTransaction", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "extractRequestData", "getCurrentScope", "addRequestDataToTransaction", "convertReqHandlerOptsToAddReqDataOpts", "reqHandlerOptions", "addRequestDataOptions", "ip", "request", "user", "dropUndefinedKeys", "requestHandler", "requestDataOptions", "client", "isAutoSessionTrackingEnabled", "scope", "_end", "chunk", "encoding", "cb", "flush", "e", "DEBUG_BUILD", "logger", "runWithAsyncContext", "getStatusCodeFromResponse", "error", "statusCode", "defaultShouldHandleError", "errorHandler", "_req", "withScope", "_scope", "getActiveSpan", "requestSession", "eventId", "captureException", "trpcMiddleware", "path", "type", "rawInput", "clientOptions", "_12", "_13", "_14", "sentryTransaction", "trpcContext", "_15", "normalize", "captureIfError", "nextResult", "maybePromiseResult", "isThenable", "require_integrations", "__commonJSMin", "exports", "console", "http", "onuncaughtexception", "onunhandledrejection", "modules", "contextlines", "context", "core", "index", "index$1", "spotlight", "index$2", "index$3", "require_integrations", "__commonJSMin", "exports", "tracing", "replacements", "replaceCronNames", "cronExpression", "acc", "name", "replacement", "ERROR_TEXT", "instrumentCron", "lib", "monitorSlug", "jobScheduled", "target", "args", "cronTime", "onTick", "onComplete", "start", "timeZone", "rest", "cronString", "replaceCronNames", "monitoredTick", "context", "withMonitor", "prop", "param", "instrumentNodeCron", "lib", "target", "prop", "thisArg", "argArray", "expression", "options", "_optionalChain", "_", "withMonitor", "replaceCronNames", "_2", "instrumentNodeSchedule", "lib", "target", "prop", "thisArg", "argArray", "nameOrExpression", "expressionOrCallback", "monitorSlug", "expression", "withMonitor", "replaceCronNames", "getModuleFromFilename", "createGetModuleFromFilename", "INTEGRATIONS", "CoreIntegrations", "NodeIntegrations", "TracingIntegrations", "cron", "instrumentCron", "instrumentNodeCron", "instrumentNodeSchedule", "AWSServices", "_AWSServices", "options", "awsModule", "fill", "wrapMakeRequest", "orig", "operation", "params", "callback", "span", "req", "startInactiveSpan", "describe", "service", "ret", "describeS3Operation", "describeLambdaOperation", "_operation", "DEBUG_BUILD", "domainify", "fn", "args", "runWithAsyncContext", "proxyFunction", "source", "wrap", "overrides", "wrapper", "handler", "_target", "thisArg", "target", "prop", "markEventUnhandled", "scope", "event", "addExceptionMechanism", "isPromise", "types", "defaultIntegrations", "nodeDefaultIntegrations", "AWSServices", "init", "options", "opts", "SDK_VERSION", "initNode", "tryRequire", "taskRoot", "subdir", "mod", "lambdaStylePath", "resolve", "existsSync", "isPromiseAllSettledResult", "result", "v", "getRejectedReasons", "results", "rejected", "tryPatchHandler", "handlerPath", "handlerDesc", "basename", "match", "DEBUG_BUILD", "logger", "handlerMod", "handlerName", "obj", "handlerDir", "e", "functionName", "name", "wrapHandler", "tryGetRemainingTimeInMillis", "context", "enhanceScopeWithEnvironmentData", "scope", "startTime", "performance", "enhanceScopeWithTransactionData", "event", "hostname", "handler", "wrapOptions", "START_TIME", "timeoutWarningTimer", "asyncHandler", "reject", "rv", "error", "configuredTimeout", "configuredTimeoutMinutes", "configuredTimeoutSeconds", "humanReadableTimeout", "timeoutWarningDelay", "withScope", "captureMessage", "processResult", "span", "getCurrentScope", "exception", "captureException", "markEventUnhandled", "_optionalChain", "_", "_2", "flush", "eventWithHeaders", "sentryTrace", "isString", "baggage", "_3", "_4", "continueTraceContext", "continueTrace", "startSpanManual", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "GoogleCloudGrpc", "_GoogleCloudGrpc", "options", "gaxModule", "fill", "wrapCreateStub", "origCreate", "args", "servicePath", "_optionalChain", "_", "_2", "serviceIdentifier", "identifyService", "stub", "methodName", "fillGrpcFunction", "funcObj", "callType", "orig", "ret", "_3", "span", "startInactiveSpan", "match", "GoogleCloudHttp", "_GoogleCloudHttp", "options", "commonModule", "fill", "wrapRequestFunction", "orig", "reqOpts", "callback", "httpMethod", "span", "startInactiveSpan", "identifyService", "args", "apiEndpoint", "match", "wrapHttpFunction", "fn", "wrapOptions", "wrap", "f", "domainify", "_wrapHttpFunction", "overrides", "emulatorFunc", "proxyFunction", "parseRequestOptions", "options", "req", "res", "reqMethod", "reqUrl", "stripUrlQueryAndFragment", "sentryTrace", "isString", "baggage", "_optionalChain", "_", "_2", "continueTraceContext", "continueTrace", "startSpanManual", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "span", "getCurrentScope", "Transaction", "_end", "chunk", "encoding", "cb", "_3", "_4", "_5", "_6", "flush", "e", "DEBUG_BUILD", "logger", "handleCallbackErrors", "err", "captureException", "scope", "markEventUnhandled", "wrapEventFunction", "fn", "wrapOptions", "proxyFunction", "f", "domainify", "_wrapEventFunction", "options", "eventFunctionArguments", "data", "context", "callback", "startSpanManual", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "span", "getCurrentScope", "newCallback", "args", "captureException", "scope", "markEventUnhandled", "_optionalChain", "_", "_2", "flush", "e", "DEBUG_BUILD", "logger", "handleCallbackErrors", "err", "result", "wrapCloudEventFunction", "fn", "wrapOptions", "proxyFunction", "f", "domainify", "_wrapCloudEventFunction", "options", "context", "callback", "startSpanManual", "SEMANTIC_ATTRIBUTE_SENTRY_SOURCE", "span", "getCurrentScope", "newCallback", "args", "captureException", "scope", "markEventUnhandled", "_optionalChain", "_", "_2", "flush", "e", "DEBUG_BUILD", "logger", "handleCallbackErrors", "err", "result", "defaultIntegrations", "Sentry", "GoogleCloudHttp", "GoogleCloudGrpc", "init", "options", "opts", "require_cjs", "__commonJSMin", "exports", "awslambda", "index", "awsservices", "Sentry", "ControllerErrorHandlerDecorator_exports", "__export", "ControllerErrorHandlerDecorator", "ControllerErrorHandlerDecorator_default", "__toCommonJS", "e", "n", "Sentry", "HttpError", "_HttpError", "message", "data", "stack", "statusCode", "HttpConflictError", "_HttpConflictError", "HttpError", "data", "stack", "name", "message", "statusCode", "HttpNotFoundError", "_HttpNotFoundError", "HttpError", "data", "stack", "name", "message", "statusCode", "HttpInternalServerError", "_HttpInternalServerError", "HttpUnauthorizedError", "_HttpUnauthorizedError", "HttpUnprocessableEntityError", "_HttpUnprocessableEntityError", "ControllerErrorHandlerDecorator", "logger", "controller", "request", "error", "HttpUnauthorizedError", "HttpNotFoundError", "HttpConflictError", "HttpUnprocessableEntityError", "HttpInternalServerError", "ControllerErrorHandlerDecorator_default"]
}
