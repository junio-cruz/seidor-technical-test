{
  "version": 3,
  "sources": ["../../../src/infra/logger/Manager.ts", "sentry-debug-id-stub:_sentry-debug-id-injection-stub?sentry-module-id=418a5823-d662-45c9-923c-229ecf05d0d1", "../../../src/infra/logger/Manager.ts", "../../../src/infra/logger/Logger.ts"],
  "sourcesContent": ["\n              import \"_sentry-debug-id-injection-stub\";\n              import * as OriginalModule from \"./src/infra/logger/Manager.ts\";\n              export default OriginalModule.default;\n              export * from \"./src/infra/logger/Manager.ts\";", ";!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"f86270b3-3cba-4077-9503-80052096bea6\",e._sentryDebugIdIdentifier=\"sentry-dbid-f86270b3-3cba-4077-9503-80052096bea6\")}catch(e){}}();", "import { EventEmitter } from 'events';\nimport { Logger } from './Logger';\n\nexport enum LogLevel {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\nexport type LogEntry = {\n  level: LogLevel;\n  module: string;\n  message: string;\n  data?: any;\n};\n\nexport class LogManager extends EventEmitter {\n  private static minLevel: string;\n\n  private consoleLoggerRegistered = false;\n\n  constructor(private readonly minLevel: string = LogLevel.INFO) {\n    super();\n  }\n\n  public getLogger(module: string): Logger {\n    if (!LogManager.minLevel) {\n      return new Logger(this, module, this.minLevel);\n    }\n    return new Logger(this, module, LogManager.minLevel);\n  }\n\n  public onLogEntry(listener: (logEntry: LogEntry) => void): LogManager {\n    this.on('log', listener);\n    return this;\n  }\n\n  public registerConsoleLogger(): LogManager {\n    if (this.consoleLoggerRegistered) return this;\n\n    this.onLogEntry(logEntry => {\n      const msg = `[${logEntry.level.toUpperCase()}] [${logEntry.module}]: ${\n        logEntry.message\n      }`;\n      switch (logEntry.level) {\n        case LogLevel.TRACE:\n          if (logEntry.data) {\n            console.trace(msg, ' :: ', logEntry.data);\n          } else {\n            console.trace(msg);\n          }\n          break;\n        case LogLevel.DEBUG:\n          if (logEntry.data) {\n            console.debug(msg, ' :: ', logEntry.data);\n          } else {\n            console.debug(msg);\n          }\n          break;\n        case LogLevel.INFO:\n          if (logEntry.data) {\n            console.info(msg, ' :: ', logEntry.data);\n          } else {\n            console.info(msg);\n          }\n          break;\n        case LogLevel.WARN:\n          if (logEntry.data) {\n            console.warn(msg, ' :: ', logEntry.data);\n          } else {\n            console.warn(msg);\n          }\n          break;\n        case LogLevel.ERROR:\n          if (logEntry.data) {\n            console.error(msg, ' :: ', logEntry.data);\n          } else {\n            console.error(msg);\n          }\n          break;\n        default:\n          if (logEntry.data) {\n            console.log(`{${logEntry.level}} ${msg}`, logEntry.data);\n          } else {\n            console.log(msg);\n          }\n      }\n    });\n\n    this.consoleLoggerRegistered = true;\n    return this;\n  }\n}\n\nexport const logging = (minLevel?: string) =>\n  new LogManager(minLevel).registerConsoleLogger();\n", "import { EventEmitter } from 'events';\nimport { LogEntry, LogLevel } from './Manager';\n\nexport class Logger {\n  private logManager: EventEmitter;\n\n  private minLevel: number;\n\n  private module: string;\n\n  private readonly levels: { [key: string]: number } = {\n    trace: 1,\n    debug: 2,\n    info: 3,\n    warn: 4,\n    error: 5,\n  };\n\n  constructor(\n    logManager: EventEmitter,\n    module: string,\n    minLevel: string = LogLevel.INFO,\n  ) {\n    this.logManager = logManager;\n    this.module = module;\n    this.minLevel = this.levelToInt(minLevel);\n  }\n\n  public getChild(module: string): Logger {\n    const copy: Logger = new (this.constructor as { new (): Logger })();\n    copy.logManager = this.logManager;\n    copy.minLevel = this.minLevel;\n    copy.module = `${this.module} | ${module}`;\n    return copy;\n  }\n\n  /**\n   * Central logging method.\n   * @param logLevel\n   * @param message\n   * @param data\n   */\n  public log(logLevel: LogLevel, message: string, data?: any): void {\n    const level = this.levelToInt(logLevel);\n    if (level < this.minLevel) return;\n\n    const logEntry: LogEntry = {\n      level: logLevel,\n      module: this.module,\n      message,\n      data,\n    };\n\n    this.logManager.emit('log', logEntry);\n  }\n\n  public trace(message: string, data?: any): void {\n    this.log(LogLevel.TRACE, message, data);\n  }\n\n  public debug(message: string, data?: any): void {\n    this.log(LogLevel.DEBUG, message, data);\n  }\n\n  public info(message: string, data?: any): void {\n    this.log(LogLevel.INFO, message, data);\n  }\n\n  public warn(message: string, data?: any): void {\n    this.log(LogLevel.WARN, message, data);\n  }\n\n  public error(message: string, data?: any): void {\n    this.log(LogLevel.ERROR, message, data);\n  }\n\n  /**\n   * Converts a string level (trace/debug/info/warn/error) into a number\n   *\n   * @param minLevel\n   */\n  private levelToInt(minLevel: string): number {\n    if (minLevel.toLowerCase() in this.levels)\n      return this.levels[minLevel.toLowerCase()];\n    return 99;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Manager_exports", "__export", "LogLevel", "LogManager", "Manager_default", "logging", "__toCommonJS", "e", "n", "import_events", "Logger", "logManager", "module", "minLevel", "copy", "logLevel", "message", "data", "logEntry", "LogLevel", "LogManager", "_LogManager", "minLevel", "module", "Logger", "listener", "logEntry", "msg", "logging", "Manager_default"]
}
